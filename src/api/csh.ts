/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** Response for fetching the Cashier report transactions. */
export interface CashierReportPostingsInfo {
  /** Transaction entries of the response. */
  postings?: DetailPostingsType;
  /** Set of Transaction Code results. */
  transactionCodes?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Details of the transaction(Posting).
 * @maxItems 4000
 */
export type DetailPostingsType = DetailPostingType[];

/** Posting information of the transaction. */
export interface DetailPostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Cross property posting hotel code.
   * @minLength 0
   * @maxLength 20
   */
  targetHotel?: string;
  /** SubPostings for the posting. */
  subPostings?: SummaryPostingsType;
  /** Details of the Guest information where this transaction was posted to. */
  guestInfo?: {
    /** Profile Id corresponding to the guest name. It is sometimes possible to have a guest name but the profile id is null. */
    profileId?: ProfileId;
    /** Reservation Id corresponding to the guest name. It is sometimes possible to have a room number but the reservation id is null. */
    reservationId?: ReservationId;
    /**
     * Guest name associated with the transaction.
     * @minLength 0
     * @maxLength 2000
     */
    guestName?: string;
    /**
     * Room number associated with the transaction.
     * @minLength 0
     * @maxLength 20
     */
    roomId?: string;
    /**
     * Confirmation number associated with the transaction.
     * @minLength 0
     * @maxLength 50
     */
    confirmationNo?: string;
  };
  /** Details of the AR account if the posting was part of an AR invoice. */
  aRInfo?: TransactionARInfoType;
  /** Currency exchange information if the posting was made using a currency different from the default currency. */
  currencyExchangeInfo?: TransactionCurrencyExchangeInfoType;
  /** Details regarding the adjustment made if the current transaction was created as a result of an adjustment. */
  adjustmentInfo?: TransactionAdjustmentInfoType;
  /** Defined method of payment for this transaction. */
  paymentMethod?: ReservationPaymentMethodType;
  /** Payee information for the folio. */
  payeeInfo?: PayeeInfoType;
  miscellaneousInfo?: {
    /** @format date-time */
    createDateTime?: string;
    /**
     * @minLength 0
     * @maxLength 10
     */
    covers?: string;
  };
  /**
   * Exchange Information - text presentation of the exchange operation including formula, buy rate, etc.
   * @minLength 0
   * @maxLength 2000
   */
  exchangeInformation?: string;
  folioWindowNo?: number;
  /** The Folio number of this posting, if there was a Folio already generated. */
  folioNo?: number;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Internal Unique id for the Folio Window. */
  internalFolioWindowID?: string;
  revisionNo?: number;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /** Flag to indicate if the Posting is a deferred tax record. Set to true only when the posting is a deferred tax record. Set to false only when the posting is not a deferred tax record. */
  deferredTax?: boolean;
}

/** A monetary value expressed with a currency code. */
export interface CurrencyAmountType {
  /** A monetary amount. */
  amount?: number;
  /**
   * Provides a currency code to reflect the currency in which an amount may be expressed.
   * @minLength 3
   * @maxLength 3
   */
  currencyCode?: string;
}

/** Wrapper Transaction Type. */
export enum CashieringTransactionTypeType {
  Revenue = 'Revenue',
  Payment = 'Payment',
  Wrapper = 'Wrapper',
}

/** Cashier information. Contains Id and Name details of the cashier. */
export interface CashierInfoType {
  /** Cashier Id of the Cashier. */
  cashierId?: number;
  /**
   * Cashier Name.
   * @minLength 0
   * @maxLength 2000
   */
  cashierName?: string;
}

/** Transaction group information. Ever posting could represent a. Regular transaction b. Group header - has Group Id, Count, Descripton and Includes Group Memebers elements c. Group transaction - has SubGroupId element pointing to Group Header Id */
export interface PostingGroupType {
  /**
   * Group Id.
   * @minLength 0
   * @maxLength 20
   */
  groupId?: string;
  /** Number of transactions in group. */
  groupCount?: number;
  /**
   * Group Description.
   * @minLength 0
   * @maxLength 2000
   */
  groupDescription?: string;
  /**
   * Indicates to which group transaction belongs.
   * @minLength 0
   * @maxLength 20
   */
  subGroupId?: string;
}

/** Collection of comp postings. */
export interface CompPostingsType {
  /**
   * Authorizer name of the Comp Account.
   * @minLength 0
   * @maxLength 200
   */
  authorizer?: string;
  /**
   * Approval status of the comp account.
   * @minLength 0
   * @maxLength 200
   */
  approvalStatus?: string;
}

/**
 * Unique Id that references an object uniquely in the system.
 * @maxItems 4000
 */
export type UniqueIDListType = UniqueIDType[];

/** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
export interface UniqueIDType {
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** Converted values for the Exchange Currency requested. */
export interface ExchangeAmounts {
  /** The converted Guest Ledger Debit Amount. */
  debitAmount?: CurrencyAmountType;
  /** The converted Guest Ledger Credit Amount. */
  creditAmount?: CurrencyAmountType;
}

/**
 * List of postings.
 * @maxItems 4000
 */
export type SummaryPostingsType = SummaryPostingType[];

/** Posting details. */
export interface SummaryPostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Flag to indicate if an Official Receipt is generated for the folio window. Applicable only in the Philippines. */
  officialBIRReceiptExists?: boolean;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /** When some SummaryPostingsGroupBy element is send as request ,then this element will represent how many transactions rolled up into this Summary Posting Type. */
  groupByCount?: number;
  /** The Folio Window number of this posting. */
  folioWindowNo?: number;
  /** Flag to indicate if the Posting is a deferred tax record. Set to true only when the posting is a deferred tax record. Set to false only when the posting is not a deferred tax record. */
  deferredTax?: boolean;
}

/** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
export interface ProfileId {
  /** URL that identifies the location associated with the record identified by the UniqueID. */
  url?: string;
  /**
   * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
   * @minLength 0
   * @maxLength 80
   */
  instance?: string;
  /**
   * Used to identify the source of the identifier (e.g., IATA, ABTA).
   * @minLength 0
   * @maxLength 80
   */
  idContext?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /** Additional identifying value assigned by the creating system. */
  idExtension?: number;
}

/** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
export interface ReservationId {
  /** URL that identifies the location associated with the record identified by the UniqueID. */
  url?: string;
  /**
   * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
   * @minLength 0
   * @maxLength 80
   */
  instance?: string;
  /**
   * Used to identify the source of the identifier (e.g., IATA, ABTA).
   * @minLength 0
   * @maxLength 80
   */
  idContext?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /** Additional identifying value assigned by the creating system. */
  idExtension?: number;
}

/** Details of the AR account where this transaction was posted to. */
export interface TransactionARInfoType {
  /**
   * AR Account number.
   * @minLength 0
   * @maxLength 20
   */
  accountNumber?: string;
  /**
   * The Account name where this invoice is sent.
   * @minLength 0
   * @maxLength 1000
   */
  accountName?: string;
  /** The invoice number which includes this transaction. */
  invoiceNo?: number;
}

/** Details of the Exchange Information for this transaction, if the posting was made in a currency different from the default currency. */
export interface TransactionCurrencyExchangeInfoType {
  /**
   * Description or reference for this exchange.
   * @minLength 0
   * @maxLength 200
   */
  description?: string;
  /** The Buying rate used for this transaction. */
  exchangeRate?: CurrencyAmountType;
  /** The foreign currency amount posted for this transaction. */
  currencyAmount?: CurrencyAmountType;
  /** The converted default currency amount */
  amount?: CurrencyAmountType;
  /** Percentage for commission used for the currency conversion. */
  commissionPercent?: number;
  /**
   * Foreign Currency Code of the currency which was used to post this transaction.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * The date when this exchange rate was set.
   * @format date
   * @maxLength 8
   */
  exchangeDate?: string;
}

/** Adjustment details of the transaction, if the transaction was created as part of an adjustment. */
export interface TransactionAdjustmentInfoType {
  /**
   * Reason for the adjustment.
   * @minLength 0
   * @maxLength 2000
   */
  reason?: string;
  /**
   * Department code for service recovery
   * @minLength 0
   * @maxLength 20
   */
  departmentCode?: string;
  /**
   * Adjustment code used.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
}

export interface ReservationPaymentMethodType {
  /** Information on a credit card for the customer. */
  paymentCard?: ResPaymentCardType;
  /** A monetary value expressed with a currency code. */
  balance?: CurrencyAmountType;
  /** Configured rule for computing the amount to authorize. */
  authorizationRule?: AuthorizationRuleType;
  /** Information on an email for the customer. */
  emailFolioInfo?: {
    /** eMail deatils for the profile. */
    email?: EmailType;
    emailFolio?: boolean;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @minLength 0
     * @maxLength 80
     */
    id?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @minLength 0
     * @maxLength 40
     */
    type?: string;
  };
  /**
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
  /**
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  folioView?: number;
}

/** Information on a credit card for the customer. */
export interface ResPaymentCardType {
  /** credit card id */
  cardId?: UniqueIDType;
  /** A monetary value expressed with a currency code. */
  currentAuthorizedAmount?: CurrencyAmountType;
  /** A monetary value expressed with a currency code. */
  approvalAmountNeeded?: CurrencyAmountType;
  /**
   * Approval code sent by the credit card company on a successful authorization.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /** Indicates the type of credit card from a defined list */
  cardType?: CardTypeType;
  /**
   * Indicates the user defined credit card type if credit card type from a defined list is not provided
   * @minLength 0
   * @maxLength 2
   */
  userDefinedCardType?: string;
  /**
   * @minLength 0
   * @maxLength 80
   */
  cardNumber?: string;
  /**
   * @minLength 0
   * @maxLength 80
   */
  cardNumberMasked?: string;
  /**
   * @minLength 0
   * @maxLength 80
   */
  cardNumberLast4Digits?: string;
  /**
   * Expiration date of the credit card
   * @format date
   * @maxLength 8
   */
  expirationDate?: string;
  /**
   * Masked Expiration date of the credit card
   * @minLength 0
   * @maxLength 20
   */
  expirationDateMasked?: string;
  expirationDateExpired?: boolean;
  /**
   * @minLength 0
   * @maxLength 200
   */
  cardHolderName?: string;
  /** Attach the credit card to profile. */
  attachCreditCardToProfile?: boolean;
  /** This contains information on whether EFT is enabled. A value of 'C' indicates EFT is enabled and 'M' indicates manual authorization is available for this payment card type. */
  processing?: CardProcessingType;
  swiped?: boolean;
  /** Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICE DIRECTIVE(PSD) Opera Control is active. */
  cardPresent?: boolean;
  /** This contains information on whether credit card is tokenized (token enabled). A value of 'Token' indicates credit card is token enabled and 'CardNumber' indicates non token environment for this payment card type. */
  cardOrToken?: CardNumberTypeType;
  /**
   * Customer Initiated Transaction(CIT) Id for Credit Cards. This is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active.
   * @minLength 0
   * @maxLength 30
   */
  citId?: string;
}

/** This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method. */
export enum CardTypeType {
  Ab = 'Ab',
  Am = 'Am',
  Ax = 'Ax',
  Cb = 'Cb',
  Dc = 'Dc',
  Ds = 'Ds',
  Dt = 'Dt',
  Ec = 'Ec',
  Er = 'Er',
  Jc = 'Jc',
  Jl = 'Jl',
  Mc = 'Mc',
  Nb = 'Nb',
  So = 'So',
  St = 'St',
  Sw = 'Sw',
  Va = 'Va',
  Xy = 'Xy',
  Zz = 'Zz',
  Cp = 'Cp',
  Cu = 'Cu',
}

export enum CardProcessingType {
  Eft = 'Eft',
  Manual = 'Manual',
}

/** Simple type for indicating if credit card number is tokenized. */
export enum CardNumberTypeType {
  CardNumber = 'CardNumber',
  Token = 'Token',
}

/** Configured rule for computing the amount to authorize. */
export interface AuthorizationRuleType {
  /**
   * The authorization rule code.
   * @pattern [0-9]{1,9}
   */
  code?: number;
  /** The amount applicable to the authorization rule. */
  amount?: CurrencyAmountType;
  /** A percentage value if the authorization rule is percentage based. */
  percent?: number;
}

/** Information on an email for the customer. */
export interface EmailType {
  /**
   * Defines the e-mail address.
   * @minLength 0
   * @maxLength 2000
   */
  emailAddress?: string;
  /**
   * Defines the purpose of the e-mail address (e.g. personal, business, listserve).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * Describes the Type code
   * @minLength 0
   * @maxLength 2000
   */
  typeDescription?: string;
  /** Supported Email format. */
  emailFormat?: 'Html' | 'Text';
  /** When true, indicates a primary information. */
  primaryInd?: boolean;
  /** Display Order sequence. */
  orderSequence?: number;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** Payee information. */
export interface PayeeInfoType {
  /** Opera name id of the payee. */
  payeeId?: UniqueIDType;
  /**
   * Name of the payee.
   * @minLength 0
   * @maxLength 80
   */
  payeeName?: string;
  /** Address of the payee. */
  payeeAddress?: AddressInfoType;
  /** Payee multiple address count. */
  payeeAddressCount?: number;
  /**
   * Reference currency of the payee.
   * @minLength 0
   * @maxLength 20
   */
  payeeReferenceCurrency?: string;
  /** AR account short info of the payee. */
  payeeAccountInfo?: ARAccountShortInfoType;
  /**
   * The tax number of the payee.
   * @minLength 0
   * @maxLength 40
   */
  payeeTaxNumber?: string;
}

/** Provides address information. */
export interface AddressInfoType {
  /** Address details for the profile. */
  address?: AddressType;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** Provides address information. */
export interface AddressType {
  /** Indicator to define if the Address is validated by the Address Validation System. */
  isValidated?: boolean;
  /**
   * When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
   * @maxItems 4
   */
  addressLine?: string[];
  /**
   * City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
   * @minLength 0
   * @maxLength 40
   */
  cityName?: string;
  /**
   * Post Office Code number.
   * @minLength 0
   * @maxLength 15
   */
  postalCode?: string;
  /**
   * Post Office City Extension Code number. City Extension mainly used for UK addresses.
   * @minLength 0
   * @maxLength 20
   */
  cityExtension?: string;
  /**
   * County or District Name (e.g., Fairfax). This is read only.
   * @minLength 0
   * @maxLength 20
   */
  county?: string;
  /**
   * State or Province name (e.g., Texas).
   * @minLength 0
   * @maxLength 20
   */
  state?: string;
  /** Country name (e.g., Ireland). */
  country?: CountryNameType;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
  /**
   * Defines the type of address (e.g. home, business, other).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /** Describes the type code */
  typeDescription?: string;
  /** When true, indicates a primary information. */
  primaryInd?: boolean;
  /** Indicates whether to update the reservations or not. If true and the address is primary, then all associated active reservations will be updated with the new primary address. */
  updateReservations?: boolean;
  /**
   * The postal barcode for the address.
   * @minLength 0
   * @maxLength 100
   */
  barCode?: string;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** Code for a country or a nationality. */
export interface CountryNameType {
  /**
   * Used for Character Strings, length 0 to 200.
   * @minLength 0
   * @maxLength 200
   */
  value?: string;
  /**
   * Code for a country or a nationality.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
}

/** Accounts Receivabales Account details type charged for batched posting. */
export interface ARAccountShortInfoType {
  /**
   * Name of the AR Account.
   * @minLength 0
   * @maxLength 200
   */
  accountName?: string;
  /** The unique ID for the Account. */
  accountId?: UniqueIDType;
  /**
   * The Account Number for the Account.
   * @minLength 0
   * @maxLength 20
   */
  accountNo?: string;
  /** The status of the account. */
  status?: ARAccountStatusType;
}

/** Type for the Account Status. Status can be restricted and a message/description added to the Account. */
export interface ARAccountStatusType {
  /**
   * The Restriction Code added on the Account. This is available when the functionality for adding restriction codes is ON.
   * @minLength 0
   * @maxLength 20
   */
  restriction?: string;
  /**
   * User defined status message on the Account.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /** Flag to indicate if the Account is restricted. */
  restricted?: boolean;
}

/**
 * List of Transaction codes info.
 * @maxItems 4000
 */
export type TrxCodesInfoType = TrxInfoType[];

/** Transaction codes info. */
export interface TrxInfoType {
  /**
   * Transaction codes info.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /**
   * Category of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionGroup?: string;
  /**
   * Sub category of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionSubGroup?: string;
  /**
   * Unique Universal product code of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  universalProductCode?: string;
  /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
  routingInstructionsId?: number;
  /**
   * The List of Articles defined for this transaction code, when using the Articles functionality.
   * @maxItems 4000
   */
  articles?: ArticleInfoType[];
  /**
   * Contains service type for transaction code.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /**
   * Unique identifier for the Transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /**
   * Hotel context of the Transaction code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Print receipt flag that tells whether the transaction receipt is to be printed or not. This is based on the transaction code. */
  printTrxReceipt?: boolean;
}

/** Information regarding an article. */
export interface ArticleInfoType {
  /**
   * Description of the article.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /**
   * Transaction code to which the article belongs.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /** Default price of the article. */
  price?: CurrencyAmountType;
  /** Post it information of the article. */
  postIt?: ArticlePostItType;
  /**
   * Unique Universal product code of the article.
   * @minLength 0
   * @maxLength 20
   */
  universalProductCode?: string;
  /**
   * Hotel code to which the article belongs.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Unique code of the article.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Indicates whether the article is inactive or not. */
  inactive?: boolean;
  /** Display Order sequence. */
  orderSequence?: number;
}

/** Post it information of an article. */
export interface ArticlePostItType {
  /** Indicates whether the article is available for post it. */
  availableForPostIt?: boolean;
  /** Color indicator which is only configurable if article is available for post it. */
  color?: ColorType;
}

/** Color configuration type. This color configuration provides a visual category of entities. */
export enum ColorType {
  Red = 'Red',
  DarkRed = 'DarkRed',
  Green = 'Green',
  DarkGreen = 'DarkGreen',
  LightGreen = 'LightGreen',
  Orange = 'Orange',
  White = 'White',
  Yellow = 'Yellow',
  DarkYellow = 'DarkYellow',
  Purple = 'Purple',
  Brown = 'Brown',
  Gray = 'Gray',
  Aqua = 'Aqua',
  Chocolate = 'Chocolate',
  Blue = 'Blue',
  LightBlue = 'LightBlue',
  DarkBlue = 'DarkBlue',
  Cyan = 'Cyan',
  DarkCyan = 'DarkCyan',
  Magenta = 'Magenta',
  DarkMagenta = 'DarkMagenta',
  Black = 'Black',
}

export type Links = InstanceLink[];

/** Metadata describing link description objects that MAY appear in the JSON instance representation. */
export interface InstanceLink {
  /** URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the "templated" property must be set to true. */
  href: string;
  /** Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile. */
  rel: string;
  /**
   * Boolean flag that specifies that "href" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.
   * @default false
   */
  templated?: boolean;
  /** HTTP method for requesting the target of the link. */
  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'OPTIONS' | 'HEAD';
  /** Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource.. */
  targetSchema?: string;
  /** The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply. */
  operationId: string;
  /** Exact copy of the "summary" field on the linked operation. */
  title?: string;
}

/**
 * Used in conjunction with the Success element to define a business error.
 * @maxItems 4000
 */
export type WarningsType = WarningType[];

/** Used when a message has been successfully processed to report any warnings or business errors that occurred. */
export interface WarningType {
  /** Property Value */
  value?: string;
  /**
   * An abbreviated version of the error in textual format.
   * @maxLength 2000
   */
  shortText?: string;
  /**
   * If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * If present, this URL refers to an online description of the error that occurred.
   * @maxLength 2000
   */
  docURL?: string;
  /**
   * If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.
   * @maxLength 2000
   */
  status?: string;
  /**
   * If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].
   * @maxLength 2000
   */
  tag?: string;
  /**
   * If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.
   * @maxLength 2000
   */
  recordId?: string;
  /**
   * The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
  /**
   * Reference Place Holder used as an index for this warning.
   * @minLength 1
   * @maxLength 8
   */
  rph?: string;
}

/**
 * Error Detail
 * Complex type that contains error details for a REST call.
 */
export interface ExceptionDetailType {
  /** Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML). */
  type: string;
  /** Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization. */
  title: string;
  /** HTTP status code for this occurrence of the problem, set by the origin server. */
  status?: number;
  /** Human-readable description specific to this occurrence of the problem. */
  detail?: string;
  /** Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced. */
  instance?: string;
  /** Application error code, which is different from HTTP error code. */
  'o:errorCode'?: string;
  /** Path to the problem at the resource or property level. */
  'o:errorPath'?: string;
  /** Details of the error message, consisting of a hierarchical tree structure. */
  'o:errorDetails'?: ErrorInstance[];
  links?: Links;
}

/**
 * Error Instance Details
 * Complex type that contains error instance details for a REST call.
 */
export interface ErrorInstance {
  /** Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML). */
  type: string;
  /** Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization. */
  title: string;
  /** HTTP status code for this occurrence of the problem, set by the origin server. */
  status?: number;
  /** Human-readable description specific to this occurrence of the problem. */
  detail?: string;
  /** Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced. */
  instance?: string;
  /** Application error code, which is different from HTTP error code. */
  'o:errorCode'?: string;
  /** Path to the problem at the resource or property level. */
  'o:errorPath'?: string;
}

/** Request to close cashier's shift. */
export interface CashierClosure {
  /** Criteria for closing cashier. */
  criteria?: CashierClosureType;
  /** The lock handle of the cashier lock. Cashier needs to be locked before this operation can be invoke. */
  cashierLockHandle?: CashierLockHandle;
  /** Unique ID of the hotel */
  hotelId?: CodeType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Cashier Shift Totals and Per Hotel amounts group by currency code */
export interface CashierClosureType {
  /** Cashier ID and Closure No */
  cashierInfo?: CashierClosureNoType;
  /**
   * Currency Total Amounts for Cashier Shift.
   * @maxItems 4000
   */
  summaryCurrencyAmountList?: CashierClosureCurrencyAmountType[];
  /**
   * Currency Hotels Amounts for Cashier Shift.
   * @maxItems 4000
   */
  hotelCurrencyAmountList?: HotelCashierClosureCurrencyAmountType[];
}

/** Type used in cashier closure to specify a cashier's shift. */
export interface CashierClosureNoType {
  /**
   * Cashier closure shift drop location code.
   * @minLength 0
   * @maxLength 20
   */
  shiftDropLocationCode?: string;
  /**
   * Cashier closure shift drop others payment method type bag number.
   * @minLength 0
   * @maxLength 15
   */
  bagNumberForOthers?: string;
  /**
   * Cashier closure shift drop cash payment method type bag number.
   * @minLength 0
   * @maxLength 15
   */
  bagNumberForCash?: string;
  /** The Cashier ID of the Cashier. */
  cashierId?: CashierId;
  /** The Cashier Shift Number. */
  closureNo?: number;
}

/** The Cashier ID of the Cashier who is currently processing the transaction(s). */
export type CashierId = number;

/** Cashier Shift Currency Amount type - cash ,check ,credit and others elements. */
export interface CashierClosureCurrencyAmountType {
  /** Cash amounts for the currency. */
  cash?: CashierClosureAmountType;
  /** Check amounts for the currency. */
  check?: CashierClosureAmountType;
  /** Credit card amounts for the currency. */
  creditCard?: CashierClosureAmountType;
  /** Other amounts for the currency. */
  others?: CashierClosureAmountType;
  /**
   * The Currency Code.
   * @minLength 3
   * @maxLength 3
   */
  currencyCode?: string;
}

/** Cashier Opening Balance and Shift Amounts type. */
export interface CashierClosureAmountType {
  /** Cashier shift amounts type. */
  openingBalance?: number;
  /** Receviced amount. */
  received?: number;
  /** Paid Out amount. */
  paidOut?: number;
  /** Expected Cashier shift amount. */
  expectedShiftBalance?: number;
  /** Actual Cashier shift amount. */
  actualShiftBalance?: number;
}

/** Cashier Shift amounts for each Hotel group by currency code */
export interface HotelCashierClosureCurrencyAmountType {
  /**
   * Hotel Cash and Check Balances group by Currency Code.
   * @maxItems 4000
   */
  currencyAmounts?: CashierClosureCurrencyAmountType[];
  /**
   * Hotel Code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Hotel local currency code.
   * @minLength 3
   * @maxLength 3
   */
  hotelCurrencyCode?: string;
}

/** The Cashier Lock Handle to pass along with operation which required cashier to be locked. */
export type CashierLockHandle = number;

/**
 * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
 * @minLength 0
 * @maxLength 20
 */
export type CodeType = string;

/** Existing Operations Responses will eventually be modified to be extended from this type. */
export interface Status {
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
  links?: Links;
}

/** Response for the Cashier Lock request. */
export interface AcquiredCashierLock {
  /** This contains the lock information for the cashier. */
  acquiredCashierLock?: OperaRecordLock;
  /** This will contain information about the cashier lock that is currently held by another user. */
  existingCashierLock?: OperaRecordLock;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** This type contains information about a record lock. */
export interface OperaRecordLock {
  /** This is the identifier of the lock. This will be null when the requesting user does not own the lock. */
  lockHandle?: number;
  /** This is the record type of the locked record. */
  recordType?: OperaLockRecordType;
  /** This is the id of the locked record. */
  recordId?: string;
  /** This is the user name of the current owner of the locked record. */
  createdBy?: string;
  /**
   * This is the time when the record was locked.
   * @format date
   * @maxLength 8
   */
  createdOn?: string;
  /** This is the validity of the lock in seconds. */
  timeToLive?: number;
  /**
   * This is the estimated expiry time of the lock.
   * @format date
   * @maxLength 8
   */
  expiresOn?: string;
  /** Notification flag to specify if the lock is based on an Internal Opera9 lock versus an External lock. */
  internal?: boolean;
}

export enum OperaLockRecordType {
  Reservation = 'Reservation',
  Cashier = 'Cashier',
}

/** Response for the fetch cashier's shift transactions. */
export interface CashierTransactionsDetails {
  /** Cashier shift transactions group by transaction code and currency. */
  cashierTransactionsInfo?: CashierTransactionsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Cashier Shift Totals and Per Hotel transactions group by transaction code */
export interface CashierTransactionsType {
  /** Cashier ID and Closure No */
  cashierInfo?: CashierClosureNoType;
  /**
   * Summary of all transactions during Cashier Shift.
   * @maxItems 4000
   */
  summaryTransactionList?: CashierTransactionType[];
  /**
   * Hotel's transactions during Cashier Shift.
   * @maxItems 4000
   */
  hotelTransactionList?: HotelCashierTransactionType[];
  /** Transaction codes information which are in response folio. */
  trxCodesInfo?: TrxCodesInfoType;
}

/** Cashier Shift Transaction Type. */
export interface CashierTransactionType {
  /**
   * Transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /**
   * Transaction codes description which will be populated for summary elements only.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /** Transaction amount and currency. */
  amount?: CurrencyAmountType;
  /** Number of same transactions during a shift. */
  trxCount?: number;
}

/** Cashier Shift amounts for each Hotel group by currency code */
export interface HotelCashierTransactionType {
  /**
   * Hotel's transaction in cashier shift.
   * @maxItems 4000
   */
  transactions?: CashierTransactionType[];
  /**
   * Hotel Code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
}

/** Response for fetching the Complimentary Posting Journal. */
export interface CompAccountingJournal {
  /** Complimentary Journal entries of the response. */
  journalPostings?: FinancialPostingsType;
  /** Evaluated total page count based on the requested max fetch count. */
  totalPages?: number;
  /** Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned. */
  offset?: number;
  /** Indicates maximum number of records a Web Service should return. */
  limit?: number;
  /** Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response. */
  hasMore?: boolean;
  /** Total number of rows queried */
  totalResults?: number;
  /** Total number of rows returned */
  count?: number;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Collection of Reservations and their information. */
export interface FinancialPostingsType {
  /** Details of the transaction(Posting). */
  postings?: DetailPostingsType;
  /** Set of Transaction Codes configured in this time span. */
  transactionCodes?: TrxCodesInfoType;
  /** Indicates the Total Sum of Journal Debits. */
  totalDebit?: CurrencyAmountType;
  /** Indicates the Total Sum of Journal Credits. */
  totalCredit?: CurrencyAmountType;
  /** Indicates the Total Sum of Journal entries in a page. */
  overallTotal?: CurrencyAmountType;
  /** Indicates the Total Sum of all Journal entries in all pages. */
  totalForAllPages?: CurrencyAmountType;
  /** Indicates the number of journal entries. */
  totalEntriesCount?: number;
}

/** PostFBA Reimbursement/Settlement operation posts reimbursement/settlement against the selected certificate records. */
export interface FbaReimbursementCriteria {
  /** Information regarding reconciliation certificate posting. */
  certificateReconciliationTypes?: CertificateReconciliationTypes;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of CertificateReconciliationType criteria
 * @maxItems 4000
 */
export type CertificateReconciliationTypes = CertificateReconciliationType[];

/** FBA ( Flexible Benefits Awards ) related fields. */
export interface CertificateReconciliationType {
  /** Possible FBA statuses. */
  status?: FBAStatusType;
  /** Award's FBA monetary values. */
  monetaryValue?: number;
  /** Award's FBA amount. */
  amount?: number;
  /** Award's FBA posted amount. */
  postedAmount?: number;
  /** Award's FBA reimbursed amount. */
  reimbursedAmount?: number;
  /**
   * Date and time of the FBA posting.
   * @format date
   * @maxLength 8
   */
  postingDateTime?: string;
  /**
   * Business date of the FBA posting.
   * @format date
   * @maxLength 8
   */
  postingBusinessDate?: string;
  /**
   * Date and time of the FBA settlement.
   * @format date
   * @maxLength 8
   */
  settlementDateTime?: string;
  /**
   * Business date of the FBA settlement.
   * @format date
   * @maxLength 8
   */
  settlementBusinessDate?: string;
  /**
   * Date and time of the FBA reimbursement.
   * @format date
   * @maxLength 8
   */
  reimbursementDateTime?: string;
  /**
   * Business date of the FBA reimbursement.
   * @format date
   * @maxLength 8
   */
  reimbursementBusinessDate?: string;
  /**
   * Business date of the FBA bill generation.
   * @format date
   * @maxLength 8
   */
  fbaBillGenDate?: string;
  /**
   * The code specifying a monetary unit. Use ISO 4217, three alpha code.
   * @minLength 0
   * @maxLength 20
   */
  currencyCode?: string;
  /**
   * The symbol for the currency, e.g, for currencyCode USD the symbol is $.
   * @minLength 0
   * @maxLength 10
   */
  currencySymbol?: string;
  /** Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85). */
  decimalPlaces?: number;
  /** Indicates if this certificate is a Flexible Benefit Award certificate. */
  flexibleBenefitAward?: boolean;
  /** Indicates whether FBA has been posted. */
  posted?: boolean;
  /** Indicates whether FBA has been settled. */
  settled?: boolean;
  /** Indicates whether FBA has been reimbursed. */
  reimbursed?: boolean;
  /** Marks if the certificate is eligible for resettlement */
  resettleAllowed?: boolean;
  /** Marks if the certificate is eligible for reimbursement. */
  reimburseAllowed?: boolean;
  /** Indicates whether the certificate is Orphan or not. */
  orphanCertificate?: boolean;
  /**
   * Hotel context for the selected certificate.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation name id to which the the certificate belongs to. */
  reservationId?: ReservationId;
  /** Possible FBA statuses. */
  fBAStatus?: FBAStatusType;
  /**
   * The number for the given certificate.
   * @minLength 0
   * @maxLength 20
   */
  certificateNumber?: string;
}

/** Flexible benefit award has been reimbursed. */
export enum FBAStatusType {
  Ordered = 'Ordered',
  Attached = 'Attached',
  Posted = 'Posted',
  Settled = 'Settled',
  Reimbursed = 'Reimbursed',
}

/** Operation to calculate foreign currency exchange. */
export interface ForeignCurrencyCriteria {
  /** A set of currencies that need to be converted. */
  exchange?: ExchangeRateCalculationType[];
  /** Flag to add exchange commission in order to recalculate payment amount in billing. */
  addExchangeCommission?: boolean;
  /** Flag to include exchange information text in response. */
  includeExchangeInformation?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Currency conversion calculation type. */
export interface ExchangeRateCalculationType {
  /**
   * Property code where the currency is being converted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Amount and code of currency that is being converted from. */
  fromCurrencyAmount?: CurrencyAmountType;
  /**
   * Date on which exchange rate was obtained.
   * @format date
   * @maxLength 8
   */
  exchangeDate?: string;
  /** Buy or Sell for calculation. */
  sell?: boolean;
  /** Exchange references. */
  exchangeReference?: string;
  /** Type for exchange calculation. */
  exchangeType?: CurrencyExchangeType;
  /** Amount and code of currency that is being converted to. */
  toCurrencyAmount?: CurrencyAmountType;
  /**
   * Date on which the exchange is to take place.
   * @format date
   * @maxLength 8
   */
  date?: string;
  /** Buy commission for the foreign currency. */
  buyCommission?: number;
  /** Amount by which the exchange was rounded. */
  roundingAmount?: number;
  /** Pure calculated amount. */
  calculatedAmount?: number;
  /** Exchange Rate. */
  exchangeRate?: number;
  /** Exchange rate against Euro. */
  euroExchangeRate?: number;
  /** Amount in Euro for the exchange. */
  euroAmount?: number;
  /** Tax amount which is applicable for this transaction, when using the Exchange Service Tax functionality. */
  serviceTax?: CurrencyAmountType;
  /**
   * Exchange Information - text presentation of the exchange operation including formula, buy rate, etc.
   * @minLength 0
   * @maxLength 2000
   */
  exchangeInformation?: string;
  /** Detailed information about exchange rate calculation service tax. */
  exchangeRateCalculationTax?: ExchangeRateCalculationTaxType;
}

/** E-certificate conversion. */
export enum CurrencyExchangeType {
  Cash = 'Cash',
  Settlement = 'Settlement',
  Posting = 'Posting',
  Check = 'Check',
  TACommission = 'TACommission',
  Membership = 'Membership',
  Certificate = 'Certificate',
}

/** Detailed information about exchange rate calculation service tax. */
export interface ExchangeRateCalculationTaxType {
  /** Local currency amount the configured exchange service tax Percentage to be computed against. */
  percentageAppliedOn?: CurrencyAmountType;
  /** Based Amount in local currency to be added on top of computed service tax based on Percentage. */
  baseAmount?: number;
  /** Percentage to be multiplied to Percentage Applied On to get the service tax. */
  percentage?: number;
  /** Minimum service tax in local currency to be charged */
  minServiceTax?: number;
  /** Maximum service tax in local currency to be charged. */
  maxServiceTax?: number;
  /** Collection of exchange rate calculation tax information based on Transaction Code Generate. */
  exchangeRateTransactionGenerateTaxes?: ExchangeRateTransactionGenerateTaxesType;
}

/**
 * Exchange rate calculation tax information based on Transaction Code Generate.
 * @maxItems 4000
 */
export type ExchangeRateTransactionGenerateTaxesType = ExchangeRateTransactionGenerateTaxType[];

/** Tax information based on Transaction Code Generate. */
export interface ExchangeRateTransactionGenerateTaxType {
  /**
   * Transaction Code Generate description.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /** Transaction Code Generate description. */
  description?: string;
  /** Tax amount based on Transaction Code Generate configuration. */
  taxAmount?: CurrencyAmountType;
}

/** Information regarding charges in batch result for each reservation. */
export interface CalculatedForeignCurrency {
  exchangeInfo?: ExchangeRateCalculationType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** A set of posting transactions that need to be posted with regards to exchange. */
export interface ForeignCurrencyExchange {
  foreignCurrencyExchangeList?: PostForeignCurrencyExchangeType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Currency conversion calculation type. */
export interface PostForeignCurrencyExchangeType {
  /**
   * Property code where the currency is being converted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Amount and code of currency that is being converted from. */
  fromCurrencyAmount?: CurrencyAmountType;
  /**
   * Date on which exchange rate was obtained.
   * @format date
   * @maxLength 8
   */
  exchangeDate?: string;
  /** Buy or Sell for calculation. */
  sell?: boolean;
  /** Exchange references. */
  exchangeReference?: string;
  /** Type for exchange calculation. */
  exchangeType?: CurrencyExchangeType;
  /** Reservation id */
  reservationId?: ReservationId;
  /** Profile ID of the profile to post to. */
  profileId?: ProfileId;
  /**
   * Room to which posting is to be made.
   * @minLength 0
   * @maxLength 20
   */
  room?: string;
  /**
   * Name of the guest to whom posting is done.
   * @minLength 0
   * @maxLength 80
   */
  guestName?: string;
  /**
   * Name of the passer by customer to whom posting is to be done.
   * @minLength 0
   * @maxLength 80
   */
  passerByName?: string;
  /** The Cashier who is posting. */
  cashierId?: CashierId;
}

/** Response of the posting foreign currency exchange transaction. */
export interface ForeignCurrencyExchangeTransaction {
  /** Details of posting and generated folio. */
  transaction?: ForeignCurrencyExchangeTransactionType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details about posting and generated folio on currency exchange. */
export interface ForeignCurrencyExchangeTransactionType {
  /** Details of the primary posting. */
  posting?: SummaryPostingType;
  /** Details of the generated folio. */
  folio?: FolioType;
}

/** Represents a single page in a reservation's ledger which will contain transactions and payee information. */
export interface FolioType {
  /** Payee information for the folio. */
  payeeInfo?: PayeeInfoType;
  /** Postings for the folio view. */
  postings?: SummaryPostingsType;
  /** Folio gross amount. */
  folioAmount?: CurrencyAmountType;
  /** Flag to check Folio Conversion Allowed. */
  allowConvertFolioYn?: boolean;
  /**
   * The starting value of the date range.
   * @format date
   * @maxLength 8
   */
  start?: string;
  /**
   * The ending value of the date range.
   * @format date
   * @maxLength 8
   */
  end?: string;
  /** Folio Revison number. */
  revisionNo?: number;
  /** Folio Number. */
  folioNo?: number;
  /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
  invoiceNo?: number;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /**
   * Date of Folio Generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
  folioStatus?: FolioStatusType;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Unique sequence number. Used to identify the current folio tax record. */
  folioSeqNo?: number;
}

/** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
export enum FolioStatusType {
  Deposit = 'Deposit',
  Void = 'Void',
  Ok = 'Ok',
  Zero = 'Zero',
  Compress = 'Compress',
  Converted = 'Converted',
  Internal = 'Internal',
}

/** Request for submitting batch advance folio. */
export interface BatchAdvanceFolio {
  /** Information regarding the reservations for batch advance folio processing. */
  batchAdvanceFolio?: BatchAdvanceFolioType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Contains criteria for process batch advance folio. */
export interface BatchAdvanceFolioType {
  /**
   * Property context of the reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** List of unique reservation identifiers having deposits to process. Reservations should come from the same property. */
  reservations?: Reservations;
  /** Unique cashier identifier to process the deposit transaction. */
  cashierId?: CashierId;
}

/**
 * Unique identifier for a reservation.
 * @maxItems 4000
 */
export type Reservations = ReservationId[];

/** Request to post a set of charges, payments and generate a bill for a PasserBy or for the Post-It functionality . A PasserBy is someone who is not staying at the Property. A PasserBy transaction requires a Profile in Opera for whom the the folio is being created. */
export interface ArticlesSaleCriteria {
  /** Criteria for posting the Sale. */
  criteria?: SaleCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for posting charges. */
export interface SaleCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /**
   * The payment information to be posted.
   * @maxItems 4000
   */
  payments?: PaymentCriteriaType[];
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Custom Folio Name Value Informatoin to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /**
   * Transaction service type which the Folio is being associated.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/**
 * Collection of Charges to be posted.
 * @maxItems 4000
 */
export type ChargesCriteriaType = ChargeCriteriaType[];

/** Criteria information for posting a charge. */
export interface ChargeCriteriaType {
  /**
   * Transaction Code to post.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /**
   * Article ID.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Amount to post to the folio. */
  price?: CurrencyAmountType;
  /** Quantity to post to the folio. */
  postingQuantity?: number;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  postingReference?: string;
  /**
   * User-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  postingRemark?: string;
  /**
   * Indicates the Cheque number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Apply room routing when making this posting. */
  applyRoutingInstructions?: boolean;
  /** Use the applicable package allowance when making this posting. */
  usePackageAllowance?: boolean;
  /** True indicates the Transaction Code is allowed to be posted automatically. */
  autoPosting?: boolean;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  folioWindowNo?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

export interface PaymentCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Payment method used by the payee. */
  paymentMethod?: CashieringPaymentMethodType;
  /** Amount to post to the folio. */
  postingAmount?: CurrencyAmountType;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  postingReference?: string;
  /**
   * User-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  postingRemark?: string;
  /**
   * User Defined Comments. Used for Deposit Payment postings.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available. */
  applyCCSurcharge?: boolean;
  /** The Payment Tax information for Thailand Tax functionality. The invoice number and the date will be used. */
  manualPaymentTaxInfo?: PaymentTaxType;
  /** Used for Thailand Tax Functionality.The payment tax records that can be used for a Credit Note for this reservation. */
  creditablePaymentTaxes?: PaymentTaxesType;
  /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made. */
  terminalId?: string;
  /** Flag to allow a rebate by Credit Card */
  overrideInsufficientCC?: boolean;
  /** Amount of change given to guest. */
  changeDueAmount?: CurrencyAmountType;
  /** Comp redemption information used to post as payment. */
  compRedemptions?: CompRedemptionsType;
  /** Flag to override account receivable credit limit */
  overrideARCreditLimit?: boolean;
  /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
  applyCurrencyTaxes?: boolean;
  /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
  vATOffset?: boolean;
  /** Payment action to know from where the payment has been made. */
  action?: PostPaymentActionType;
  /** Prepaid Card redemption information used to post as payment. */
  prepaidCardRedemptions?: PrepaidCardRedemptionsType;
  folioWindowNo?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

export interface CashieringPaymentMethodType {
  /** Information on a credit card for the customer. */
  paymentCard?: ResPaymentCardType;
  /** A monetary value expressed with a currency code. */
  balance?: CurrencyAmountType;
  /** Configured rule for computing the amount to authorize. */
  authorizationRule?: AuthorizationRuleType;
  /** Information on an email for the customer. */
  emailFolioInfo?: {
    /** eMail deatils for the profile. */
    email?: EmailType;
    emailFolio?: boolean;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @minLength 0
     * @maxLength 80
     */
    id?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @minLength 0
     * @maxLength 40
     */
    type?: string;
  };
  /**
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
  /**
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  folioView?: number;
  /** Authorization approval record. */
  authorizationApproval?: AuthorizationInfoType;
  /**
   * Track2 data for the card which would be sent to the CC vendor as part of the authorization.
   * @minLength 0
   * @maxLength 200
   */
  track2Data?: string;
}

export interface AuthorizationInfoType {
  /** Approved amount. */
  approvalAmount?: CurrencyAmountType;
  /**
   * The approval code authenticates the authorization.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /** Unique Authorization Sequence for the authorization and settlement. */
  originalAuthSequence?: number;
  /**
   * Vendor transaction id for the authorization.
   * @minLength 0
   * @maxLength 20
   */
  vendorTranId?: string;
}

/** Information regarding payments made which have Payment Tax. */
export interface PaymentTaxType {
  /**
   * The Tax Invoice for this payment.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** The Type of Payment transaction. */
  paymentType?: PaymentTax;
  /** The payment amount/ */
  amount?: CurrencyAmountType;
  /** The amount that is taxable. */
  taxableAmount?: CurrencyAmountType;
  /** Documentation goes here */
  nonTaxableAmount?: CurrencyAmountType;
  /** The amount that is not taxable. */
  availableCredit?: CurrencyAmountType;
  /**
   * The Payment Invoice date
   * @format date
   * @maxLength 8
   */
  paymentDate?: string;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date of the Payment.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code of the Payment.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  folioWindowNo?: number;
}

/** The types of Payment Tax transactions. */
export enum PaymentTax {
  Deposit = 'Deposit',
  FrontOffice = 'FrontOffice',
  CreditNote = 'CreditNote',
  CityLedger = 'CityLedger',
  AccountsReceivables = 'AccountsReceivables',
  NonVat = 'NonVat',
}

/**
 * Payment Tax record.
 * @maxItems 4000
 */
export type PaymentTaxesType = PaymentTaxType[];

/**
 * Information regarding Complimentary Bucket Redemption object.
 * @maxItems 4000
 */
export type CompRedemptionsType = RedemptionType[];

/** Redemption information. */
export interface RedemptionType {
  /** The amount to redeem when posting a payment. */
  amount?: CurrencyAmountType;
  /**
   * The associated redemption code.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * Additional information regarding the redemption.
   * @minLength 0
   * @maxLength 2000
   */
  supplement?: string;
  /**
   * Description of the Complimentary Bucket Redemption.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /**
   * Transaction code of the Complimentary Bucket Redemption.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /** Available Amount of the Complimentary Bucket Redemption. */
  availableAmount?: CurrencyAmountType;
  /** Transaction Number of the Complimentary Bucket Redemption. */
  transactionNo?: number;
  /**
   * Approval Code of the Complimentary Bucket Redemption.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
}

/** Advance Payment Action. */
export enum PostPaymentActionType {
  Billing = 'Billing',
  Settlefolio = 'Settlefolio',
  Deposit = 'Deposit',
  Compredemption = 'Compredemption',
  Prepaidcardredemption = 'Prepaidcardredemption',
  Advancepayment = 'Advancepayment',
}

/**
 * A prepaid redemption info object to be used for posting a payment.
 * @maxItems 1000
 */
export type PrepaidCardRedemptionsType = PrepaidCardRedemptionType[];

/** Redemption information. */
export interface PrepaidCardRedemptionType {
  /**
   * Prepaid card number.
   * @minLength 0
   * @maxLength 80
   */
  cardNo?: string;
  /**
   * Prepaid card number.
   * @minLength 0
   * @maxLength 80
   */
  pin?: string;
  /** The unique ID of the Interface. */
  interfaceId?: UniqueIDType;
  /** The amount to redeem when posting a payment. */
  amount?: CurrencyAmountType;
  /**
   * The associated redemption transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /**
   * Additional information regarding the redemption.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
}

/** Generate Fiscal Folio Criteria type to be used for fiscal folio generation */
export interface FiscalServiceType {
  /**
   * Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected.
   * @minLength 0
   * @maxLength 40
   */
  fiscalTerminal?: string;
  /**
   * Fiscal Invoicing Currency code to be used by the Fiscal Service.
   * @minLength 0
   * @maxLength 20
   */
  invoiceCurrencyCode?: string;
  /** Defines the action of the generate folio process. */
  instructions?: FiscalFolioInstruction;
  /** Folio Type , Queue name , Fiscal Flag to be used in folio generation This is a country requirement. */
  folioQueueName?: FolioQueueType;
  /** Fiscal Folio sequence ID stored in queue table. */
  folioSeqId?: UniqueIDType;
}

/** Action to generate Offline folio when no reponse is received from fiscal service. */
export enum FiscalFolioInstruction {
  Retry = 'Retry',
  New = 'New',
  Void = 'Void',
  Offline = 'Offline',
}

/** List of charges that will be posted against the transaction code based from the test criteria. */
export interface FolioQueueType {
  /**
   * Folio Type to be assigned to generated folio. This is a country requirement.
   * @minLength 0
   * @maxLength 100
   */
  folioType?: string;
  /**
   * Folio Queue name.
   * @minLength 0
   * @maxLength 2000
   */
  queueName?: string;
  /** Fiscal folio flag to call fiscal folio web service after folio generation. */
  generateFiscalFolio?: boolean;
}

/** Name value details collected before Folio Settlement */
export interface NameValueHeaderDetailType {
  /** Name Value Header Information */
  nameValueHeader?: NameValueBaseSearchType;
  /** Name Value Detail Information */
  nameValueDetails?: NameValueDetailType;
}

/** Contains name value information search criteria. */
export interface NameValueBaseSearchType {
  /**
   * Specifies the hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Contains model name i.e. Reservation, Profile, Folio or FinTrx. */
  moduleName?: NameValueModuleType;
  /** Contains name value type value i.e. AFTER_SETTLEMENT, BEFORE_SETTLEMENT, RESERVATION, etc. */
  nameValueType?: NameValueTypeType;
  /** Indicates configuration sequence number. */
  sequence?: UniqueIDType;
  /** Custom Name value Config Name. */
  configName?: CustomNameValueConfigType;
}

export enum NameValueModuleType {
  Reservation = 'Reservation',
  Folio = 'Folio',
  Profile = 'Profile',
  Fintrix = 'Fintrix',
}

export enum NameValueTypeType {
  ReservationOptions = 'ReservationOptions',
  AfterSettlement = 'AfterSettlement',
  BeforeSettlement = 'BeforeSettlement',
  AfterPayment = 'AfterPayment',
  ProfileOptions = 'ProfileOptions',
}

/** Italian Lottery Number. */
export enum CustomNameValueConfigType {
  ItalianFattura = 'ItalianFattura',
  Folio = 'Folio',
  FinancialTransaction = 'FinancialTransaction',
  TaiwanInvoice = 'TaiwanInvoice',
  SaudiCustomerType = 'SaudiCustomerType',
  ItalianLotteryNumber = 'ItalianLotteryNumber',
}

/** Detailed information returned during name value search. */
export interface NameValueDetailType {
  /** Name Value List. */
  nameValues?: NameValuesType;
}

/**
 * List of name value pairs.
 * @maxItems 4000
 */
export type NameValuesType = NameValueType[];

/** Contains name value pair. */
export interface NameValueType {
  /**
   * Contains unique key which represents for record field.
   * @minLength 0
   * @maxLength 100
   */
  name?: string;
  /**
   * Contains value for the record/column.
   * @minLength 0
   * @maxLength 4000
   */
  value?: string;
  /**
   * Contains format string for values.
   * @minLength 0
   * @maxLength 100
   */
  formatString?: string;
  /** Contains data type for values. */
  dataType?: NameValueDataTypeType;
  /** Contains Origin information. */
  origin?: NameValueOriginType;
  /** Contains value(s) to identify the reports to include the collected information in e.g. PFH=Print Folio Header, PFD=Print Folio Detail. */
  usageInstruction?: CodeListType;
}

export enum NameValueDataTypeType {
  String = 'String',
  Number = 'Number',
  Date = 'Date',
  Datetime = 'Datetime',
  Time = 'Time',
  Integer = 'Integer',
}

/** Contains origin details. */
export interface NameValueOriginType {
  /** Contains origin i.e. Reseravtion, Profile, Folio or FinTrx. */
  originName?: NameValueModuleType;
  /**
   * Contains destination column for Origin.
   * @minLength 0
   * @maxLength 200
   */
  destination?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** @maxItems 4000 */
export type CodeListType = string[];

/** Details of the folio created. */
export interface ArticlesSale {
  folioWindowDetails?: FolioWindowType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** A folio window view which holds the set of folios for a reservation. */
export interface FolioWindowType {
  /** Revenue amount of the window. */
  revenue?: CurrencyAmountType;
  /** Payment amount of the window. */
  payment?: CurrencyAmountType;
  /** Running balance of the window. */
  balance?: CurrencyAmountType;
  /** Revenue debit amount of the window. */
  debitRevenue?: CurrencyAmountType;
  /** Payment debit amount of the window. */
  debitPayment?: CurrencyAmountType;
  /** Running debit balance of the window. */
  debitBalance?: CurrencyAmountType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: FolioWindowExchangeAmounts;
  /** Defined method of payment for this window. */
  paymentMethod?: ReservationPaymentMethodType;
  /** The window's configured payee information. */
  payeeInfo?: PayeeInfoType;
  /** Defined comp accounting configuration for this window */
  compAccountingInfo?: CompAccountingType;
  /** ID of the Stored Folio. */
  storedFolioId?: UniqueIDType;
  /**
   * Name of the Stored Folio.
   * @minLength 0
   * @maxLength 2000
   */
  storedFolioName?: string;
  /** Provides information which is used for fiscal response processing. */
  fiscalResponseType?: FiscalResponseType;
  /** Defines the action of the generate folio process. */
  fiscalFolioInstruction?: FiscalFolioInstruction;
  /** @maxItems 4000 */
  folios?: FolioType[];
  /** VAT offset amount of the window. */
  vATOffsetAmount?: CurrencyAmountType;
  /** Contains service type information associated with transaction code posted in folio window. */
  serviceTypeInfo?: TransactionServiceTypesType;
  folioWindowNo?: number;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /** Flag to notify if the current folio has any postings. */
  emptyFolio?: boolean;
  /** Flag to notify if the entire window has any postings. */
  emptyWindow?: boolean;
  /** Flag to indicate if an Official Receipt is generated for the folio window. Applicable only in the Philippines. */
  officialBIRReceiptExists?: boolean;
  /** This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold. */
  simpleFolio?: boolean;
  /** Evaluated total page count based on the requested max fetch count. */
  totalPages?: number;
  /** Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned. */
  offset?: number;
  /** Indicates maximum number of records a Web Service should return. */
  limit?: number;
  /** Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response. */
  hasMore?: boolean;
  /** Total number of rows queried */
  totalResults?: number;
  /** Total number of rows returned */
  count?: number;
}

/** Converted folio windows values for the Exchange Currency requested. */
export interface FolioWindowExchangeAmounts {
  /** The converted Folio Window Revenue Amount. */
  revenue?: CurrencyAmountType;
  /** The converted Folio Window Payment Amount. */
  payment?: CurrencyAmountType;
  /** The converted Folio Window Total Amount. */
  balance?: CurrencyAmountType;
}

/** Authorizer Information */
export interface CompAccountingType {
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  authorizerId?: UniqueIDType;
  /**
   * Application user name of the authorizer
   * @minLength 0
   * @maxLength 40
   */
  authorizerUserName?: string;
  /**
   * Full name of the authorizer.
   * @minLength 0
   * @maxLength 100
   */
  authorizerName?: string;
  /**
   * Rate code of the authorizer.
   * @minLength 0
   * @maxLength 20
   */
  authorizerRateCode?: string;
  /** Indicates whether user has the choice to have reservation inherit rate code from the authorizer. */
  inheritAuthorizerRateCode?: boolean;
  /**
   * AR Account Number of the authorizer
   * @minLength 0
   * @maxLength 20
   */
  aRNumber?: string;
  /**
   * The Comp Type for this Account. Used when using the Comp types functionality
   * @minLength 0
   * @maxLength 20
   */
  compTypeCode?: string;
  /**
   * The coupon or voucher number used by the external gaming system to track postings made to this routing.
   * @minLength 0
   * @maxLength 30
   */
  compVoucherNo?: string;
  /** Arrival date range for comp routing */
  dateRange?: DateRangeType;
  /**
   * Membership number
   * @minLength 0
   * @maxLength 100
   */
  membershipId?: string;
  /** Unique Id of membership */
  membershipIdNo?: number;
  /**
   * Name displayed on the membership card
   * @minLength 0
   * @maxLength 80
   */
  membershipNameOnCard?: string;
}

/** Date Range with Start and End dates. */
export interface DateRangeType {
  /**
   * The starting value of the date range.
   * @format date
   * @maxLength 8
   */
  start?: string;
  /**
   * The ending value of the date range.
   * @format date
   * @maxLength 8
   */
  end?: string;
}

/** Provides information which is used for fiscal response processing. */
export interface FiscalResponseType {
  /** Fiscal Folio sequence ID stored in queue table. */
  folioSeqId?: number;
  /** Flag to do the retrieval process of fiscal printing or not. */
  retryFiscalPrinting?: boolean;
}

/**
 * Details about service type postings.
 * @maxItems 4000
 */
export type TransactionServiceTypesType = TransactionServiceTypeType[];

/** Containsts service type posting information. */
export interface TransactionServiceTypeType {
  /** Contains service type code attached with transaction code. */
  serviceType?: CodeDescriptionType;
  /** Revenue amount of the service type. */
  revenue?: CurrencyAmountType;
  /** Payment amount of the service type. */
  payment?: CurrencyAmountType;
  /** Running balance of the service type. */
  balance?: CurrencyAmountType;
  /** Running total number of the service type. */
  totalPostings?: number;
}

/** This contains a generic code and description information. */
export interface CodeDescriptionType {
  /**
   * Code.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * description.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
}

/** Returns credit information of Comp Accounting Authorizers. */
export interface AuthorizersCreditInfo {
  /** Comp Accounting Authorizers credit information. */
  authorizersCreditType?: AuthorizersCreditType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of Comp Accounting Authorizers Credits
 * @maxItems 4000
 */
export type AuthorizersCreditType = AuthorizerCreditType[];

/** Authorizer Information */
export interface AuthorizerCreditType {
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  authorizerId?: UniqueIDType;
  /**
   * Application user name of the authorizer
   * @minLength 0
   * @maxLength 40
   */
  authorizerUserName?: string;
  /**
   * Full name of the authorizer.
   * @minLength 0
   * @maxLength 100
   */
  authorizerName?: string;
  /**
   * Rate code of the authorizer.
   * @minLength 0
   * @maxLength 20
   */
  authorizerRateCode?: string;
  /** Indicates whether user has the choice to have reservation inherit rate code from the authorizer. */
  inheritAuthorizerRateCode?: boolean;
  /**
   * Identifies the hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Indicates the Credit Limit of the Authorizers. */
  creditLimit?: CurrencyAmountType;
  /** Indicates the Actual Amount which has been authorized. */
  actualAmount?: CurrencyAmountType;
  /** Indicates the Comp Authorizer credit details. */
  authorizerCreditDetails?: AuthorizerCreditDetailsType;
  /**
   * Transaction Date associated with the transaction.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
}

/**
 * List of Comp Accounting Authorizers details
 * @maxItems 4000
 */
export type AuthorizerCreditDetailsType = AuthorizerCreditDetailType[];

/** Information about the Authorizer Credit detail */
export interface AuthorizerCreditDetailType {
  /** Indicates the Credit Limit of the Authorizers. */
  creditLimit?: CurrencyAmountType;
  /** Indicates the Actual Amount which has been authorized. */
  actualAmount?: CurrencyAmountType;
  /**
   * Indicates the Routing Instructions for which Authorization was done.
   * @minLength 0
   * @maxLength 2000
   */
  billingInstruction?: string;
}

/** Request type for batch auto checkout. */
export interface BatchAutoCheckoutReservation {
  /** Criteria for batch auto checkout. */
  criteria?: CheckoutReservationType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface CheckoutReservationType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique Id that references an object uniquely in the system. */
  reservationIdList?: UniqueIDListType;
  /** Event to which this process will be logged. */
  eventType?: CashieringEventType;
  checkoutInstr?: CheckoutInstructionsType;
  /** This is the email address used by the External System to email a folio. Opera will not use this as the default email address for the folio. This will be stored as a EFOLIO type email of the Guest and an applicable external folio flag will be updated on the reservation. */
  mobileCheckoutFolioEmail?: BasicEmailType;
  /** If the Property works with Open Folios and the reservation has the privileges for Post Stay Charging, this flag could be set to True which would checkout the guest without requiring the guest to settle his balances. */
  checkoutWithOpenFolio?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false. */
  mobileCheckout?: boolean;
  /** This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false. */
  autoCheckout?: boolean;
  /** Indicates Stop Checkout reservation Global Alert flag. */
  stopCheckout?: boolean;
}

/** Event being generated by a Supplemental Folio. */
export enum CashieringEventType {
  CheckOut = 'CheckOut',
  EarlyDeparture = 'EarlyDeparture',
  AdvanceBill = 'AdvanceBill',
  InterimBill = 'InterimBill',
  PasserBy = 'PasserBy',
  PostIt = 'PostIt',
  CreditBill = 'CreditBill',
  Deposit = 'Deposit',
  DepositRefund = 'DepositRefund',
  AutoFolio = 'AutoFolio',
  PrepaidCard = 'PrepaidCard',
  AutoSettlement = 'AutoSettlement',
  InformationFolio = 'InformationFolio',
  SupplementalFolio = 'SupplementalFolio',
}

export interface CheckoutInstructionsType {
  /**
   * Housekeeping Status to be assigned to the room after checkout.
   * @minLength 0
   * @maxLength 40
   */
  roomStatus?: string;
  /**
   * Date and time for scheduled check out which could be performed when SCHEDULED CHECKOUT is active. Room status will be assigned according to SCHEDULED CHECKOUT ROOM STATUS parameter value.
   * @format date-time
   */
  scheduleOn?: string;
  /**
   * Currency Code which the Guest preferred to use and to be stored on the reservation of the Guest.
   * @minLength 0
   * @maxLength 20
   */
  guestPreferredCurrency?: string;
  /** Dictates whether to ignore warnings before check out. */
  ignoreWarnings?: boolean;
}

/**
 * Email address
 * @minLength 0
 * @maxLength 2000
 */
export type BasicEmailType = string;

/** Response for batch auto check out. */
export interface BatchAutoCheckoutDetails {
  /** Batch process identifier. */
  processId?: StringLength40;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Used for Character Strings, length 0 to 40.
 * @minLength 0
 * @maxLength 40
 */
export type StringLength40 = string;

/** Request type for batch auto settlement. */
export interface BatchAutoSettlementCriteria {
  /** Criteria for batch auto settlement. */
  criteria?: AutoSettlementType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface AutoSettlementType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique Id that references an object uniquely in the system. */
  reservationIdList?: UniqueIDListType;
  /** Event to which this process will be logged. */
  eventType?: CashieringEventType;
  /** Payment methods to be settled. */
  paymentMethods?: PaymentMethodsSearchType;
  /**
   * Folio windows to do auto auto settlement.
   * @maxItems 8
   */
  folioWindowsToSettle?: string[];
  /**
   * Folio windows to transfer.
   * @maxItems 8
   */
  folioWindowsToTransfer?: string[];
  /** This is related to reservation search.If the Reservation ID list is empty then this criteria filter will be applied to the reservation. */
  reservationCriteria?: AutoFolioSettlementCriteriaType;
  /** Dictates whether to include negative postings for auto settlement. */
  includeCreditCardBalance?: boolean;
  /** Indicates the minimum window balance to do auto settlement. */
  minimumWindowBalance?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/**
 * Defines the payment method to search reservations.
 * @maxItems 4000
 */
export type PaymentMethodsSearchType = PaymentMethodSearchType[];

/** Reservation Payment method search criteria for searching a reservation. */
export interface PaymentMethodSearchType {
  /**
   * Payment Method to search the reservation.
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
}

export interface AutoFolioSettlementCriteriaType {
  /** Comma-delimited list of Folio Settlement Type codes. */
  folioSettlementTypes?: string;
  /** Use the Number of Days For Settlement, defined for the Reservation. */
  defaultDays?: boolean;
  /**
   * Days since the last auto folio settlement.
   * @min 1
   * @max 365
   */
  daysSinceLastAutoSettled?: number;
  /**
   * Date since the last auto folio settlement.
   * @format date
   * @maxLength 8
   */
  dateSinceLastAutoSettled?: string;
}

/** Request for submitting batch deposit for reservations. */
export interface BatchDeposit {
  /** Information regarding the reservations for batch deposit processing. */
  batchDeposit?: BatchDepositType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Contains criteria for batch deposit for reservations. */
export interface BatchDepositType {
  /**
   * Property context of the reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** List of unique reservation identifiers having deposits to process. Reservations should come from the same property. */
  reservations?: Reservations;
  /** Unique cashier identifier to process the deposit transaction. */
  cashierId?: CashierId;
}

/** Response for bed transaction info */
export interface BedTaxInfo {
  /** Criteria for bed transaction info. */
  bedTaxInfoTypes?: BedTaxInfoTypes;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of Bed Tax info.
 * @maxItems 4000
 */
export type BedTaxInfoTypes = BedTaxInfoType[];

/** Bed Trx Info type */
export interface BedTaxInfoType {
  /**
   * Property associated with bed tax
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Tax Registration Number */
  taxRegistrationNo?: number;
  /**
   * Arrival Date with time of the reservation
   * @format date
   * @maxLength 8
   */
  taxArrivaldate?: string;
  /**
   * Arrival Carrier code of the mode of transportation (Airline No. or Railway No., etc.)
   * @minLength 0
   * @maxLength 20
   */
  arrivalCarrierCode?: string;
  /**
   * Departure Date with time of the reservation
   * @format date
   * @maxLength 8
   */
  taxDepartureDate?: string;
  /**
   * Departure Carrier code of the mode of transportation (Airline No. or Railway No., etc.)
   * @minLength 0
   * @maxLength 20
   */
  departureCarrierCode?: string;
  /**
   * Guest name associated with the transaction.
   * @minLength 0
   * @maxLength 200
   */
  guestName?: string;
  /** Reservation name id. */
  reservationNameId?: UniqueIDType;
  /** Guest Name id. */
  guestNameId?: UniqueIDType;
  /**
   * Arrival Date of the reservation
   * @format date
   * @maxLength 8
   */
  arrival?: string;
  /**
   * Departure Date with time of the reservation
   * @format date
   * @maxLength 8
   */
  departure?: string;
  /**
   * Visa Number
   * @minLength 0
   * @maxLength 40
   */
  visaNumber?: string;
  /**
   * Issue date of the Visa
   * @format date
   * @maxLength 8
   */
  visaIssueDate?: string;
  /**
   * Expiration date of visa
   * @format date
   * @maxLength 8
   */
  visaExpirationDate?: string;
  /** Total number of tax stays at the property */
  taxNoOfStays?: number;
  /**
   * Profession of the guest
   * @minLength 0
   * @maxLength 80
   */
  profession?: string;
  /**
   * Passport number
   * @minLength 0
   * @maxLength 80
   */
  passPortStr?: string;
  /**
   * Passport number
   * @minLength 0
   * @maxLength 40
   */
  passport?: string;
  /**
   * Nationality of the guest
   * @minLength 0
   * @maxLength 20
   */
  nationality?: string;
  /** Age of the guest */
  guestAge?: number;
  /**
   * Country of the guest
   * @minLength 0
   * @maxLength 20
   */
  country?: string;
  /**
   * User-defined remark.
   * @minLength 0
   * @maxLength 200
   */
  remark?: string;
}

/** Request type for change bed transaction info */
export interface BedTaxCriteria {
  /** bed transaction info. */
  bedTaxInfoType?: BedTaxInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to edit a billing charge information. */
export interface PutBillingCharges {
  /** Criteria for the charge information to be edited. */
  criteria?: BillingChargesType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for the charge information list to be edited. */
export interface BillingChargesType {
  /**
   * Request to edit a billing charge information
   * @maxItems 2000
   */
  billingCharges?: BillingChargeType[];
  /**
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
}

export interface BillingChargeType {
  /** Transaction number of the posting being corrected. */
  transactionNo?: number;
  /** Corrected charge price. */
  price?: CurrencyAmountType;
  /** Corrected posting quantity. */
  quantity?: number;
  /**
   * Corrected user-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Corrected user-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * Corrected Cheque number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * Corrected Revenue Date.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /**
   * Corrected POS covers - number of copies of receipts that got printed for that particular receipt.
   * @minLength 0
   * @maxLength 10
   */
  covers?: string;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /**
   * Approval date of the posting.
   * @format date
   * @maxLength 8
   */
  approvalDate?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Existing Operations Responses will eventually be modified to be extended from this type. */
export interface PutBillingChargesStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for credit card settlements status. */
export interface CcBatchSettlementsStatus {
  /** List of credit card transaction. */
  batchSettlementsStatus?: CCBatchSettlementsStatusType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** List of CCBatchSettlementStatusType type */
export interface CCBatchSettlementsStatusType {
  /** @maxItems 4000 */
  cCBatchSettlementsStatus?: CCBatchSettlementStatusType[];
  /**
   * Hotel Code
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Batch Id for identify status of job. */
  batchId?: string;
}

/** Provides status information for credit card settlements . */
export interface CCBatchSettlementStatusType {
  /** Status of credit card settlements. */
  settlementStatus?: string;
  /** List of selected settlements id. */
  settlementId?: UniqueIDType;
  /**
   * Batch Id for identify status of job.
   * @minLength 0
   * @maxLength 2000
   */
  reason?: string;
}

/** Response for the fetch Cashier Closure information. */
export interface CashierClosureDetails {
  /** Cashier shift amounts group by resort and currency. */
  cashierClosureInfo?: CashierClosureType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Returns whether a particular report is applicable or not based on payment posting type. When no postings for a particular payment type is found, that report is marked as not applicable in the closure report. */
export interface CashierClosureReportsList {
  cashierReportList?: CashierReportType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Shift drop report created when cashier closure is completed. It is an integral part of closure report and is not to be printed or accessed by itself. */
export enum CashierReportType {
  Cash = 'Cash',
  Check = 'Check',
  ForeignCurrency = 'ForeignCurrency',
  CreditCard = 'CreditCard',
  Miscellaneous = 'Miscellaneous',
  ArSettlements = 'ArSettlements',
  DepositTransfers = 'DepositTransfers',
  Shiftdrop = 'Shiftdrop',
}

/** Request to reverse a Payment Tax record for Thailand Tax requirement. */
export interface TransactionReversal {
  /** Criteria for reversing the Payment Tax Record. */
  reverseCriteria?: DeleteTransactionCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for deletion of transactions. */
export interface DeleteTransactionCriteriaType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The unique transaction number of this transaction.
   * @maxItems 4000
   */
  transactionList?: number[];
  /**
   * The reason code for the deletion.
   * @minLength 0
   * @maxLength 20
   */
  reasonCode?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response for the reverse Thailand Tax Payment Tax record request. */
export interface FolioTaxPaymentReversal {
  /** List of Postings produced by Reverse Payment Tax Request. */
  postings?: SummaryPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Operation for extending the lifetime of a lock on a cashier. */
export interface CashierLockCriteriaToExtend {
  /** The number of seconds to add to the lock's validity time. */
  additionalTimeToLive?: number;
  /** The lock handle of the record lock we are attempting to extend. */
  cashierLockHandle?: CashierLockHandle;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** This response will indicate whether or not the extension was successful. This operation may return errors when the lock being requested to be extended no longer exists. This can happen when the lock has already expired and cleaned up. */
export interface ExtendedCashierLock {
  /** This contains the updated lock information for the cashier. The time to live will contain the updated lifetime of the lock. */
  cashierLock?: OperaRecordLock;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request object to change credit card settlement information. */
export interface CcSettlementCriteria {
  /** Hotel code. */
  hotelId?: CodeType;
  /** credit card settlement. */
  creditCardSettlement?: CCBatchSettlementType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Credit card transaction detail for batch settlement */
export interface CCBatchSettlementType {
  /** CC Settlement id associated with the CC settlement transaction. */
  settlementId?: UniqueIDType;
  /** Settlement amount associated with the CC settlement transaction. */
  settlementAmount?: CurrencyAmountType;
  /**
   * Guest name associated with the CC settlement transaction.
   * @minLength 0
   * @maxLength 2000
   */
  guestName?: string;
  /**
   * Room number associated with the CC settlement transaction.
   * @minLength 0
   * @maxLength 20
   */
  roomId?: string;
  /** Window number associated with the CC settlement transaction. */
  windowNo?: number;
  /** Identifies the payment method to validate the credit card number against. */
  paymentMethod?: ReservationPaymentMethodType;
  /** Unique Id for the reservation */
  reservationId?: ReservationId;
  /**
   * The approval code authenticates the authorization.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /** Folio number of transaction */
  folioNo?: number;
  /**
   * Transaction Date of the credit card transaction.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
}

/** Request to process batch settlements */
export interface CcBatchSettlementsProcessCriteria {
  /** Selected settlements which will process */
  criteria?: CCBatchSettlementsProcessType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Type for starting settlements job process. */
export interface CCBatchSettlementsProcessType {
  /**
   * Hotel code of the reservation.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** List of selected settlements id. */
  settlementIdList?: UniqueIDListType;
  /** Batch Id for identify status of job. */
  batchId?: string;
}

/** Response object to Fetch the check details for a given posting posted through the POS. */
export interface CheckDetails {
  /** Response flag whether the instructions overlaps or not. */
  checkDetailsInfo?: StringLength32000;
  /**
   * Response of guest check Image details in encoded format.
   * @format byte
   */
  checkImageInfo?: string;
  /** Indicates the Cheque number. */
  checkNumber?: StringLength200;
  /**
   * Indicates the Cheque date.
   * @format date
   */
  checkDate?: string;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Used for Character Strings, length 0 to 32000.
 * @minLength 0
 * @maxLength 32000
 */
export type StringLength32000 = string;

/**
 * Used for Character Strings, length 0 to 200.
 * @minLength 0
 * @maxLength 200
 */
export type StringLength200 = string;

/** Request to process a guest check detail. */
export interface GuestCheckDetails {
  /** Reservation Id for which the details need to be posted. */
  reservationId?: ReservationId;
  /** Check details that needs to be posted. */
  checkDetails?: CheckDetailsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Holds check details information. */
export interface CheckDetailsType {
  /**
   * Check date of the posting.
   * @format date-time
   */
  checkDate?: string;
  /**
   * Check text of the posting.
   * @minLength 0
   * @maxLength 32000
   */
  checkText?: string;
  /**
   * Check image of the posting.
   * @format byte
   */
  checkImage?: string;
}

/** Response to the request to get financial details for a Posting Activity. This will return the before and after values for the transactions which were changed. */
export interface CashierClosureInformation {
  /** The details of the changes made during the activity. */
  cashierClosureInfo?: CashierClosureInfoTypes;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Information of the Cashier.
 * @maxItems 4000
 */
export type CashierClosureInfoTypes = CashierClosureInfoType[];

/** Cashier closure Information. */
export interface CashierClosureInfoType {
  /** Criteria for the cashier closure id and the closure number */
  cashierClosureNo?: CashierClosureNoType;
  /**
   * Property this record belongs to.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Cashier title of the cashier.
   * @minLength 0
   * @maxLength 2000
   */
  cashierTitle?: string;
  /**
   * Cashier user name.
   * @minLength 0
   * @maxLength 2000
   */
  cashierUser?: string;
  /**
   * Date and time cashier was opened.
   * @format date
   * @maxLength 8
   */
  openDate?: string;
  /**
   * Date and time cashier was closed.
   * @format date
   * @maxLength 8
   */
  closeDate?: string;
  /**
   * Business date cashier was closed.
   * @format date
   * @maxLength 8
   */
  closureBusinessDate?: string;
  /** Returns whether a particular report is applicable or not based on payment posting type. When no postings for a particular payment type is found, that report is marked as not applicable in the closure report. */
  reportsList?: CashierClosureReportsType;
}

/**
 * Information of the Cashier.
 * @maxItems 7
 */
export type CashierClosureReportsType = CashierReportType[];

/**
 * Unique Id that references an object uniquely in the system.
 * @maxItems 4000
 */
export type ReservationIdList = UniqueIDType[];

/** Response object containing comp routing instructions for a reservation . */
export interface CompRoutingInstructions {
  /** Set of Routing Instructions. */
  resvRoutingInstructions?: ResvRoutingInfoListType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * A comp routing info object
 * @maxItems 4000
 */
export type ResvRoutingInfoListType = ResvRoutingInfoType[];

/** A routing info object can either be of type Folio OR of type Room with its corresponding object. */
export interface ResvRoutingInfoType {
  /** Folio routing type. */
  folio?: {
    /** Guest details */
    guestInfo?: {
      /** Unique identifiers for the Profile for both internal and external systems. */
      profileIdList?: ProfileIdList;
    };
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Accounts Receivable.
     * @minLength 0
     * @maxLength 20
     */
    aRNumber?: string;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
    /** @maxLength 2000 */
    paymentMethod?: string;
  };
  /** Room routing type. */
  room?: {
    /**
     * Room number to route the instructions.
     * @minLength 0
     * @maxLength 20
     */
    roomId?: string;
    /** Guest unique identifier to which the instruction will be routed. */
    guestNameId?: UniqueIDType;
    /**
     * Display Name for the guest.
     * @minLength 0
     * @maxLength 80
     */
    guestDisplayName?: string;
    /** Reservation name id to which the instruction will be routed. */
    reservationNameId?: UniqueIDType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** Comp Accounting Routing Info */
  comp?: {
    /** Authorizer Information */
    compAccountingInfo?: CompAccountingType;
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
  };
  /** Comp Accounting Request routing */
  request?: {
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
  refreshFolio?: boolean;
  /** Reservation guest details. */
  reservationInfo?: ReservationInfoType;
}

/**
 * Unique Id that references an object uniquely in the system.
 * @maxItems 4000
 */
export type ProfileIdList = UniqueIDType[];

/** Routing limit can be one of the three: Credit Limit, Percetage Limit, Covers Limit */
export interface RoutingInstructionType {
  /** Duration of this instruction. */
  duration?: {
    /** Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date. */
    timeSpan?: TimeSpanType;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    /** Flag to indicate if the routing instruction is a daily instruction. */
    daily?: boolean;
  };
  /** Set of Transaction Codes configured in this time span. */
  transactionCodes?: TrxCodesInfoType;
  /** Set of Billing Instructions configured in this time span. */
  billingInstructions?: BillingInstructionsType;
  /** Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero. */
  creditLimit?: number;
  /** The routing limit percentage allowed for this routing instruction. */
  percentageLimit?: number;
  /** Number of covers for this routing instruction. */
  covers?: number;
  /** Amount of Credit used for this routing instruction. */
  limitUsed?: number;
  /** Internal Routing Link Id identifier to which limit group the instruction belongs. */
  routingLinkId?: UniqueIDType;
}

/** Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date. */
export interface TimeSpanType {
  /**
   * @format date
   * @maxLength 8
   */
  startDate?: string;
  /**
   * @format date
   * @maxLength 8
   */
  endDate?: string;
  duration?: string;
}

/**
 * Set of Billing Instruction codes.
 * @maxItems 4000
 */
export type BillingInstructionsType = BillingInstructionType[];

/** Configured Billing Instruction which represents a set of Transaction Codes. */
export interface BillingInstructionType {
  /**
   * Billing Instruction code description.
   * @minLength 0
   * @maxLength 2000
   */
  desc?: string;
  /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
  routingInstructionsId?: number;
  /**
   * Unique identifier for the Billing Instruction.
   * @minLength 0
   * @maxLength 20
   */
  billingCode?: string;
  /**
   * Hotel context of the Billing Instruction.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
}

/** Type for the details of a Comp Routing Request */
export interface CompRoutingRequestType {
  /** User who requested the Comp Routing */
  requestedBy?: UserInfoType;
  /**
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** User information of user who declined comp routing request */
  declinedBy?: UserInfoType;
  /** Comp routing status */
  status?: CompRoutingStatusType;
}

/** Opera User Information */
export interface UserInfoType {
  /** User Id of the Opera User */
  userId?: number;
  /**
   * Name of the Opera User
   * @minLength 0
   * @maxLength 40
   */
  userName?: string;
}

/** Status which indicates that the Request of Comp Routing was declined */
export enum CompRoutingStatusType {
  Request = 'Request',
  Comp = 'Comp',
  Declined = 'Declined',
}

/** The Reservation class contains the current reservation being created or altered. */
export interface ReservationInfoType {
  /** Unique identifiers for the reservation for both internal and external systems */
  reservationIdList?: ReservationIdList;
  /** Collection of room stays. */
  roomStay?: StayInfoType;
  /** Collection of guests associated with the reservation. */
  reservationGuest?: ResGuestInfoType;
  /** Collection of guests who share this reservation. */
  sharedGuests?: ResSharedGuestListType;
  /** List of attached profiles */
  attachedProfiles?: ResAttachedProfileListType;
  /** Payment method used for this reservation */
  reservationPaymentMethod?: ReservationPaymentMethodType;
  /** Collection of reservation folio windows. */
  reservationFolioWindows?: ReservationFolioWindowsType;
  /**
   * Set of reservation preferences which belongs to the Specials group.
   * @minLength 0
   * @maxLength 4000
   */
  specials?: string;
  /**
   * Last Privacy Prompt Date
   * @format date
   * @maxLength 8
   */
  lastPrivacyPromptDate?: string;
  /**
   * Color setting of the reservation.
   * @minLength 0
   * @maxLength 20
   */
  displayColor?: string;
  /** Indicators of additional information attached to the reservation */
  reservationIndicators?: IndicatorsType;
  /** Current room status */
  roomStatus?: HousekeepingRoomStatusType;
  /** Super Search matching terms. */
  searchMatches?: SearchMatchesType;
  /** Point of Sale of reservation. Identifies the entity/channel who made the reservation. */
  sourceOfSale?: SourceOfSaleType;
  /** Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is not in Waitlist status anymore. */
  waitlist?: WaitlistResType;
  /** Information about the time and duration this reservation was on Queue for Checkin. */
  queue?: ReservationQueueInformationType;
  /** Information regarding housekeeping for this reservation. */
  housekeeping?: ResHousekeepingType;
  /** Holds cashiering related information for the reservation. */
  cashiering?: ResCashieringType;
  /** This stores the code for the type of tax calculation especially with tax exemption, etc. */
  taxType?: TaxTypeType;
  /** Holds reservation deposit information. */
  deposit?: ReservationDepositType;
  /** Collection of reservation allowed actions. */
  allowedActions?: ReservationAllowedActionsType;
  /** Revenues and Balances Amount summary for the reservation. */
  revenuesAndBalances?: ResRevenueBalanceType;
  /**
   * Collection of Hotel Interfaces and rights, this is populated only when fetching interface status for rooms.
   * @maxItems 4000
   */
  hotelInterfaceStatusList?: ReservationInterfaceStatusType[];
  /**
   * Currency code preferred by guest.
   * @minLength 0
   * @maxLength 20
   */
  guestPreferredCurrency?: string;
  /** Currency code preferred by guest. */
  turndownInfo?: ReservationTurndownInfoType;
  /** Denotes the status of Room Ready, Key Ready messages. */
  mobileNotifications?: ResMobileNotificationsType;
  /** Collection of reservation communication details. */
  reservationCommunication?: ResCommunicationType;
  /** Information relating to Reservation's Advance Checked In state and Expected Time of Return */
  advanceCheckIn?: AdvanceCheckInType;
  /** This flag will determine wheather the reservation is eligible for Welcome Offer or not. */
  welcomeOffer?: boolean;
  /** Information regarding why reservation has been/was cancelled. */
  cancellationInfo?: {
    /**
     * @minLength 0
     * @maxLength 2000
     */
    description?: string;
    /**
     * @minLength 0
     * @maxLength 20
     */
    code?: string;
    /**
     * Date when reservation was last cancelled.
     * @format date
     * @maxLength 8
     */
    date?: string;
  };
  /** Number of keys created for the reservation. */
  keyCount?: number;
  /**
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * @minLength 0
   * @maxLength 80
   */
  hotelName?: string;
  /**
   * @minLength 0
   * @maxLength 20
   */
  expectedServiceTime?: string;
  /** Boolean True if this reservation is reserving rooms. False if it is only reserving services. */
  roomStayReservation?: boolean;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
  /** Indicates the status of the reservation. */
  reservationStatus?: PMSResStatusType;
  /** Indicates the status of the reservation. */
  computedReservationStatus?: PMSResStatusType;
  /** When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in. */
  walkInIndicator?: boolean;
  /** Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both. */
  accessRestriction?: ResAccessRestrictionType;
  /** If not null, reservation is considered to pay out commission to either Travel Agent, Source or both. */
  commissionPayoutTo?: CommissionPayoutToType;
  /**
   * Payment Method.
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
  /** Defines if the reservation is pre-registered or not. */
  preRegistered?: boolean;
  /** Returns true when reservation has an open folio. */
  openFolio?: boolean;
  /** Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false. */
  allowMobileCheckout?: boolean;
  /** Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device. */
  allowMobileViewFolio?: boolean;
  /** Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation. */
  optedForCommunication?: boolean;
}

/** Details on the Room Stay including Guest Counts, Time Span of this Room Stay, pointers to Res Guests, guest Memberships, Comments and Special Requests pertaining to this particular Room Stay and finally financial information related to the Room Stay, including Guarantee, Deposit and Payment and Cancellation Penalties. */
export interface StayInfoType {
  /** @format date */
  arrivalDate?: string;
  /** @format date */
  departureDate?: string;
  /** The Original Time Span covers the Room Stay dates of the original reservation. */
  originalTimeSpan?: TimeSpanType;
  /** The expected arrival, return and departure times of the guest. */
  expectedTimes?: ResExpectedTimesType;
  /** A collection of Guest Counts associated with Room Stay. */
  adultCount?: number;
  /** A collection of Child Counts associated with Room Stay. */
  childCount?: number;
  /**
   * Room class code
   * @minLength 0
   * @maxLength 20
   */
  roomClass?: string;
  /**
   * Room type code
   * @minLength 0
   * @maxLength 20
   */
  roomType?: string;
  /** True indicates room type is a component type. */
  componentRoomType?: boolean;
  /** Room Id */
  numberOfRooms?: number;
  /**
   * Room Id
   * @minLength 0
   * @maxLength 20
   */
  roomId?: string;
  /**
   * Rate plan code
   * @minLength 0
   * @maxLength 20
   */
  ratePlanCode?: string;
  /** Rate amount */
  rateAmount?: CurrencyAmountType;
  /** The Points contains the number of points used to book a particular room type. */
  points?: PointsType;
  /** Whether this rate should be suppressed from view */
  rateSuppressed?: boolean;
  /** Key information about the block for this reservation. */
  reservationBlock?: ReservationBlockType;
  /**
   * Booking channel code
   * @minLength 0
   * @maxLength 20
   */
  bookingChannelCode?: string;
  /**
   * Party code
   * @maxLength 2000
   */
  linkCode?: string;
  /** True if the rate is a fixed rate, otherwise false */
  fixedRate?: boolean;
  /** The total amount charged for the Room Stay including additional occupant amounts and fees. If TaxInclusive is set to True, then taxes are included in the total amount. */
  totalAmount?: CurrencyAmountType;
  /** The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context. */
  guarantee?: ResGuaranteeType;
  /** Promotion Codes */
  promotion?: PromotionType;
  /**
   * Market code
   * @minLength 0
   * @maxLength 20
   */
  marketCode?: string;
  /**
   * Description of Market code
   * @minLength 0
   * @maxLength 4000
   */
  marketDescription?: string;
  /**
   * Source of business
   * @minLength 0
   * @maxLength 20
   */
  sourceCode?: string;
  /**
   * Description of the source of business.
   * @minLength 0
   * @maxLength 4000
   */
  sourceCodeDescription?: string;
  /** Balance amount */
  balance?: CurrencyAmountType;
  /** Comp Balance amount */
  compBalance?: CurrencyAmountType;
  /**
   * Room type code that was charged
   * @minLength 0
   * @maxLength 20
   */
  roomTypeCharged?: string;
  /** A collection of deposit and/or payments for the Room Stay. */
  depositPayments?: CurrencyAmountType;
  /** Service Status of In House guest like DND or MUP */
  guestServiceStatus?: GuestHousekeepingServiceRequestType;
  /**
   * Indicates that this reservation is scheduled for automated check out.
   * @format date
   */
  scheduledCheckoutTime?: string;
  /** When true, indicates a room number cannot be changed. When false, indicates a room number may be changed. */
  roomNumberLocked?: boolean;
  /** True indicates as pseudo room type. This is usually used for a posting master reservation. */
  pseudoRoom?: boolean;
  /** Represents the room was assigned by AI Room Assignment. */
  assignedByAI?: boolean;
  /** Represents the room was assigned by AI Room Assignment. */
  upgradedByAI?: boolean;
}

/** Holds the Arrival and Departure Time Information */
export interface ResExpectedTimesType {
  /**
   * Arrival Time
   * @format date-time
   */
  reservationExpectedArrivalTime?: string;
  /**
   * Departure Time
   * @format date-time
   */
  reservationExpectedDepartureTime?: string;
}

/** The Redeem Points contains the number of points required to book a room type. */
export interface PointsType {
  /** Awards type for the award type rate code. */
  awardsType?: string;
  /** No of points required to book this Room Stay. */
  points?: number;
}

/** Key information about the block for a reservation. */
export interface ReservationBlockType {
  /** Collection of unique block identifiers for the reservation. */
  blockIdList?: BlockIdList;
  /**
   * The Name of the block that is attached to the reservation.
   * @minLength 0
   * @maxLength 40
   */
  blockName?: string;
  /**
   * This is the HotelCode of the Block.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
}

/**
 * Unique Id that references an object uniquely in the system.
 * @maxItems 4000
 */
export type BlockIdList = UniqueIDType[];

/** Validations type record returned after Validations are done. */
export interface ResGuaranteeType {
  /**
   * Guarantee Code.
   * @minLength 0
   * @maxLength 20
   */
  guaranteeCode?: string;
  /**
   * Guarantee Code.
   * @minLength 0
   * @maxLength 80
   */
  shortDescription?: string;
  /** Guarantee Code. */
  onHold?: boolean;
}

/** Type to specify a rate promotion. Usually attached to a reservation to indicate a specific promotion is applied to the reservation. */
export interface PromotionType {
  /**
   * Promotion code associated with the rate plan.
   * @minLength 0
   * @maxLength 20
   */
  promotionCode?: string;
  /**
   * Promotion code Name associated with the rate plan.
   * @minLength 0
   * @maxLength 20
   */
  promotionName?: string;
  /**
   * Promotion Coupon Code when promotion is setup to have a valid coupon code.
   * @minLength 0
   * @maxLength 40
   */
  couponCode?: string;
}

/** Possible values for the Guest Service Status. */
export enum GuestHousekeepingServiceRequestType {
  DoNotDisturb = 'DoNotDisturb',
  MakeUpRoom = 'MakeUpRoom',
  NoStatusSelected = 'NoStatusSelected',
}

/** Specifies Company or Travel Agent profile using IATA or Corp. No. */
export interface ResGuestInfoType {
  /** The Membership object identifying the frequent customer reward program. */
  membership?: MembershipInfoType;
  /** Salutation of honorific. (e.g., Mr. Mrs., Ms., Miss, Dr.) */
  namePrefix?: NamePrefixType;
  /** Given name, first name or names */
  givenName?: GivenNameType;
  /**
   * Alternate given name, first name or names
   * @minLength 0
   * @maxLength 40
   */
  alternateGivenName?: string;
  /**
   * The middle name of the person name
   * @minLength 0
   * @maxLength 40
   */
  middleName?: string;
  /**
   * e.g "van der", "von", "de"
   * @minLength 0
   * @maxLength 20
   */
  surnamePrefix?: string;
  /** Family name, last name. */
  surname?: SurnameType;
  /**
   * Alternate family name, last name.
   * @minLength 0
   * @maxLength 40
   */
  alternateSurname?: string;
  /**
   * Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.).
   * @minLength 0
   * @maxLength 20
   */
  nameSuffix?: string;
  /**
   * Degree or honors (e.g., Ph.D., M.D.)
   * @minLength 0
   * @maxLength 20
   */
  nameTitle?: string;
  /** Full display name */
  fullName?: string;
  /** Altername full display name */
  alternateFullName?: string;
  /** Phone number */
  phoneNumber?: PhoneNumberType;
  /** Email address */
  email?: BasicEmailType;
  /**
   * Date of birth
   * @format date
   * @maxLength 8
   */
  birthDate?: string;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
  /** Affiliation or ethnicity to a particular country. */
  nationality?: CountryNameType;
  /** The supplier's ranking of the customer (e.g., VIP, numerical ranking). */
  vip?: VIPType;
  /** Address information that is attached to the reservation guest */
  address?: AddressSearchType;
  /** Provides information about the guest's anonymization status */
  anonymization?: AnonymizationType;
  /** List of guest names that are accompanying the reservation guest */
  accompanyGuests?: ResAccompanyGuestListType;
  /** External information about the guest associated with the reservation. */
  externalInfo?: ResGuestExternalInfoType;
  /** Contains information regarding the last stay of this guest. */
  guestLastStayInfo?: GuestLastStayInfoType;
  /** Guest profile restricted reason code */
  guestRestrictedCode?: string;
  /** Guest profile restricted reason description */
  guestRestrictedReasonDesc?: string;
  /** True indicates there are restrictions associated with the current profile. */
  guestRestricted?: boolean;
  /**
   * Unique identifier of the police registration card number.
   * @minLength 0
   * @maxLength 40
   */
  registrationCardNo?: string;
  nameType?: NameTypeType;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** The Membership object identifies the frequent customer reward program. */
export interface MembershipInfoType {
  /** Membership ID (Unique ID from the memberships table). */
  membershipId?: number;
  /**
   * Indicates the ending date.
   * @format date
   */
  expireDate?: string;
  /** Name to be displayed on the membership card. */
  nameOnCard?: string;
  /** Indicates whether membership is active or inactive. */
  inactive?: boolean;
  /** Boolean indicator set to True indicates membership is a Primary Membership. */
  primaryMembership?: boolean;
  /**
   * The code or name of the membership program ('Hertz', 'AAdvantage', etc.).
   * @minLength 0
   * @maxLength 20
   */
  programCode?: string;
  /**
   * The code or name of the bonus program. BonusCode can be used to indicate the level of membership (Gold Club, Platinum member, etc.)
   * @minLength 0
   * @maxLength 20
   */
  bonusCode?: string;
  /**
   * The description of the ProgramCode.(Delta Previlige for code DP)
   * @minLength 0
   * @maxLength 2000
   */
  membershipTypeDesc?: string;
  /**
   * The description of the Bonus Code.(Platinum for code P)
   * @minLength 0
   * @maxLength 2000
   */
  membershipLevelDesc?: string;
  /**
   * The account identification number for this particular member in this particular program.
   * @minLength 0
   * @maxLength 50
   */
  accountId?: string;
  /**
   * The code or name of the membership level and indicates the level of membership (Gold Club, Platinum member, etc.). This is same as the BonusCode.
   * @minLength 0
   * @maxLength 20
   */
  membershipLevel?: string;
  /** Ranking assigned to the Player Profile by the Gaming system. */
  playerRanking?: number;
}

/**
 * Salutation of honorific. (e.g., Mr. Mrs., Ms., Miss, Dr.)
 * @minLength 0
 * @maxLength 40
 */
export type NamePrefixType = string;

/**
 * Given name, first name or names
 * @minLength 0
 * @maxLength 40
 */
export type GivenNameType = string;

/**
 * Family name, last name.
 * @minLength 0
 * @maxLength 40
 */
export type SurnameType = string;

/**
 * Phone number
 * @minLength 0
 * @maxLength 40
 */
export type PhoneNumberType = string;

/** The supplier's ranking of the customer. */
export interface VIPType {
  /**
   * VIP Code.
   * @minLength 0
   * @maxLength 20
   */
  vipCode?: string;
  /**
   * VIP Description.
   * @minLength 0
   * @maxLength 80
   */
  vipDescription?: string;
}

/** Address Details such as city, state, country, postal code etc. */
export interface AddressSearchType {
  /**
   * City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
   * @minLength 0
   * @maxLength 40
   */
  cityName?: string;
  /**
   * Post Office Code number.
   * @minLength 0
   * @maxLength 15
   */
  postalCode?: string;
  /**
   * State or Province name (e.g., Texas).
   * @minLength 0
   * @maxLength 20
   */
  state?: string;
  /** Country name (e.g., Ireland). */
  country?: CountryNameType;
  /**
   * First Line of Street Address. For profile search it matches the first Address line.
   * @minLength 0
   * @maxLength 80
   */
  streetAddress?: string;
  /** When true indicates that only profiles with city will be fetched. */
  excludeNoCity?: boolean;
}

/** Provides information about guest's anonymization status. */
export interface AnonymizationType {
  /** Status of anonymization such as Requested or Anonymized. */
  anonymizationStatus?: AnonymizationStatusType;
  /**
   * Date and Time when the guest was anonymized.
   * @format date-time
   */
  anonymizationDate?: string;
}

/** Guest has been anonymized. */
export enum AnonymizationStatusType {
  Requested = 'Requested',
  Anonymized = 'Anonymized',
}

/**
 * Collection of accompany guests
 * @maxItems 4000
 */
export type ResAccompanyGuestListType = ResAccompanyGuestInfoType[];

export interface ResAccompanyGuestInfoType {
  /** Given name, first name or names */
  firstName?: string;
  /** Family name, last name. */
  lastName?: string;
  /** String representation of the full name */
  fullName?: string;
  /**
   * Unique identifier of the police registration card number.
   * @minLength 0
   * @maxLength 40
   */
  registrationCardNo?: string;
  /** Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id. */
  profileIdList?: ProfileIdList;
}

/** Specifies Company or Travel Agent profile using IATA or Corp. No. */
export interface ResGuestExternalInfoType {
  /** Given name, first name or names */
  givenName?: GivenNameType;
  /** Family name, last name. */
  surname?: SurnameType;
}

/** Contains last stay related details of the guest. */
export interface GuestLastStayInfoType {
  /**
   * Guest's last stay date.
   * @format date
   * @maxLength 8
   */
  lastStayDate?: string;
  /**
   * Room Number where the guest stayed.
   * @minLength 0
   * @maxLength 20
   */
  lastStayRoom?: string;
  /** The Rate amount of the guest's last stay. */
  lastStayRate?: CurrencyAmountType;
  /** The total number of previous stay of the guest. */
  totalStay?: number;
}

export enum NameTypeType {
  Guest = 'Guest',
  Company = 'Company',
  Agent = 'Agent',
  Contact = 'Contact',
  Source = 'Source',
  Group = 'Group',
  Employee = 'Employee',
  Hotel = 'Hotel',
  Purge = 'Purge',
}

/**
 * Collection of shared guest reservations.
 * @maxItems 4000
 */
export type ResSharedGuestListType = ResSharedGuestInfoType[];

/** Contains information regarding the share reservation. */
export interface ResSharedGuestInfoType {
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  profileId?: ProfileId;
  /** Given name, first name or names */
  firstName?: string;
  /** Family name, last name. */
  lastName?: string;
  /** String representation of the full name */
  fullName?: string;
}

/** @maxItems 4000 */
export type ResAttachedProfileListType = ResAttachedProfileType[];

export interface ResAttachedProfileType {
  /** Attached profile name */
  name?: string;
  /** Collection of unique profile identifiers */
  profileIdList?: ProfileIdList;
  reservationProfileType?: ResProfileTypeType;
}

export enum ResProfileTypeType {
  Guest = 'Guest',
  Company = 'Company',
  Group = 'Group',
  TravelAgent = 'TravelAgent',
  Source = 'Source',
  ReservationContact = 'ReservationContact',
  BillingContact = 'BillingContact',
  Addressee = 'Addressee',
}

/**
 * Collection of reservation folio windows.
 * @maxItems 4000
 */
export type ReservationFolioWindowsType = ReservationFolioWindowType[];

/** Folio window view which holds the set of folios for a reservation. */
export interface ReservationFolioWindowType {
  /** The window's configured payee information. */
  payeeInfo?: PayeeInfoType;
  /** Running balance of the window. */
  balance?: CurrencyAmountType;
  /**
   * Payment Method Type
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
  folioWindowNo?: number;
}

/**
 * Collection of lamp indicators.
 * @maxItems 4000
 */
export type IndicatorsType = IndicatorType[];

/** Lamp indicator Type. */
export interface IndicatorType {
  /**
   * Name of the indicator.
   * @minLength 0
   * @maxLength 80
   */
  indicatorName?: string;
  /** Indicates number of occurrences of the indicator. */
  count?: number;
}

/** Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService. */
export enum HousekeepingRoomStatusType {
  Clean = 'Clean',
  Dirty = 'Dirty',
  Pickup = 'Pickup',
  Inspected = 'Inspected',
  OutOfOrder = 'OutOfOrder',
  OutOfService = 'OutOfService',
}

/**
 * List of Generic Name-Value-Pair Parameters used for super search matches.
 * @maxItems 4000
 */
export type SearchMatchesType = SearchMatchType[];

/** Search match indicating attribute and the matching value. */
export interface SearchMatchType {
  /**
   * Search match attribute.
   * @minLength 0
   * @maxLength 2000
   */
  attribute?: string;
  /**
   * Search match value.
   * @minLength 0
   * @maxLength 2000
   */
  value?: string;
}

/** Point of Sale of reservation. Identifies the entity/channel who made the reservation. */
export interface SourceOfSaleType {
  /**
   * Type of entity/channel who made the reservation..
   * @minLength 0
   * @maxLength 40
   */
  sourceType?: string;
  /**
   * The entity/channel who made the reservation.
   * @minLength 0
   * @maxLength 20
   */
  sourceCode?: string;
}

/** Information regarding why reservation is being /has been waitlisted. */
export interface WaitlistResType {
  /**
   * Waitlist Reason Description.
   * @minLength 0
   * @maxLength 2000
   */
  reasonDescription?: string;
  /**
   * Waitlist priority Description.
   * @minLength 0
   * @maxLength 2000
   */
  priorityDescription?: string;
  /**
   * Description why the reservation is being /has been waitlisted.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /**
   * Waitlist Reason Code.
   * @minLength 0
   * @maxLength 20
   */
  reasonCode?: string;
  /**
   * Waitlist Priority Code.
   * @minLength 0
   * @maxLength 20
   */
  priorityCode?: string;
  /**
   * Guest telephone number.
   * @minLength 0
   * @maxLength 40
   */
  telephone?: string;
}

/** Information regarding the Date, Duration and Priority of the reservation on Queue for Check in. */
export interface ReservationQueueInformationType {
  /** Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date. */
  timeSpan?: {
    /**
     * @format date
     * @maxLength 8
     */
    startDate?: string;
    /**
     * @format date
     * @maxLength 8
     */
    endDate?: string;
    duration?: string;
    /** The total duration, in seconds, the reservation is on Queue. */
    durationInSeconds?: number;
  };
  /** Information for the message sent to the user */
  guestTextInfo?: QueueTextInfoType;
  /** The Queue Priority given to this reservation. */
  priority?: number;
  /** The average time, in seconds, a reservation was on queue prior to Check-In. */
  averageQueueTimeToCheckIn?: number;
  /** The average time, in seconds, of the reservations currently in queue. */
  averageQueueTimeCurrentReservations?: number;
  /**
   * The Business date on which the reservation was due to arrive and is currently placed on Queue for Check In.
   * @format date
   * @maxLength 8
   */
  queueDate?: string;
}

/** Information regarding the message sent to guest. */
export interface QueueTextInfoType {
  /**
   * Time the text was last sent to the user.
   * @format date-time
   */
  sentTime?: string;
  /**
   * User name of the user who sent message.
   * @minLength 0
   * @maxLength 40
   */
  sentBy?: string;
}

/** Holds housekeeping turndown service information for the room. */
export interface ResHousekeepingType {
  /** Turndown instructions for the room. */
  instructions?: string;
  /** The facility task applicable for the current day. This will be information only and not used for any updates. */
  facilityTaskInfo?: FacilityTaskType;
  /** Indicates if a linen change is necessary. */
  linenChange?: boolean;
  /** Indicates whether guest wants turndown facility or not. */
  turndownRequested?: boolean;
  /**
   * This is the Turndown room service time.
   * @format date
   * @maxLength 8
   */
  serviceTime?: string;
  /** Expected Start Time for housekeeping task(s). */
  expectedServiceTime?: string;
  /** Current room status. Current room status is populated only if room is assigned to the reservation and reservation is due in or in house. */
  roomStatus?: HousekeepingRoomStatusType;
}

/** Information regarding facility task on a reservation. */
export interface FacilityTaskType {
  /** The Task Code. */
  task?: HousekeepingTaskCodeType;
  /** Supplies associated with the task. */
  supplies?: FacilityCodesType;
  /**
   * The Date on which the task is applicable.
   * @format date
   * @maxLength 8
   */
  date?: string;
}

/** Information related to a Task Code. Task Codes are used to generate task sheets in Rooms Management. */
export interface HousekeepingTaskCodeType {
  /**
   * Description of the Task Code.
   * @minLength 0
   * @maxLength 80
   */
  description?: string;
  /**
   * Instructions for this Task Code.
   * @minLength 0
   * @maxLength 2000
   */
  instructions?: string;
  /** Indicates if this task code is the default departure task for Facility Tasks. This requires */
  facilityDepartureTask?: boolean;
  /** Indicates if a linen change is necessary. */
  linenChange?: boolean;
  /**
   * Property where this task code is configured.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The Code for the task.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /** Ordering sequence for display. */
  sequence?: number;
}

/**
 * List of the facility codes.
 * @maxItems 4000
 */
export type FacilityCodesType = FacilityCodeType[];

/** Facility Housekeeping Code, its description and quantity. */
export interface FacilityCodeType {
  /**
   * Facility Code.
   * @minLength 0
   * @maxLength 80
   */
  description?: string;
  /** Signifies the quantity. */
  quantity?: number;
  /**
   * Facility code value.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
}

/** Cashiering Information for the reservation. */
export interface ResCashieringType {
  /** Revenues and Balances Amount summary for the reservation. */
  revenuesAndBalances?: ResRevenueBalanceType;
  /** Billing privileges set on the reservation. */
  billingPrivileges?: BillingPrivilegesType;
  /** This stores the code for the type of tax calculation especially with tax exemption, etc. */
  taxType?: ReservationTaxTypeInfo;
  /** This stores the information for Bed Tax Reporting. Mainly used in Maldives. */
  bedTaxReporting?: BedTaxReportingType;
  /** Additional text fields to display on the folio. */
  folioTexts?: FolioTextsType;
  /** Information regarding periodic folios set on the reservation. */
  periodicFolio?: ResPeriodicFolioType;
  /** Information regarding comp accounting on the reservation. */
  compAccounting?: ResCompAccountingType;
  /** Information regarding the selected preconfigured routing instruction on the reservation. */
  reservationPreConfiguredRoutingInstruction?: ResPreConfiguredRoutingInstrType;
  /** The guest from whom payment has to be recovered (direct guest). */
  financiallyResponsible?: boolean;
  /** In case of Appartment style billing indicates whether a prorated amount should be used for an Apartment Style Billing rate. */
  proratedBilling?: boolean;
  /**
   * Date of the last Room And Tax posting. Used primarily to know the date in case of Advance Billing.
   * @format date
   * @maxLength 8
   */
  lastRoomAndTaxPostedDate?: string;
  /** This attribute is to verify if reverse check-in is allowed for the reservation. */
  reverseCheckInAllowed?: boolean;
  /** This attribute is to verify if reverse advance check-in is allowed for the reservation. */
  reverseAdvanceCheckInAllowed?: boolean;
  /** Specifies whether reservation has a financial transaction associated with it. */
  transactionsPosted?: boolean;
}

/** Revenue and Balance Amount summary for the reservation. */
export interface ResRevenueBalanceType {
  /** Total Fixed Charges on the reservation. */
  totalFixedCharge?: CurrencyAmountType;
  /** Total payment received for the reservation. */
  totalPayment?: CurrencyAmountType;
  /** Room Revenue generated by the reservation. */
  roomRevenue?: CurrencyAmountType;
  /** Food and Beverage Revenue generated by the reservation. */
  foodAndBevRevenue?: CurrencyAmountType;
  /** Other Revenue generated by the reservation. */
  otherRevenue?: CurrencyAmountType;
  /** Total Non Revenue posted on the reservation. */
  nonRevenue?: CurrencyAmountType;
  /** Total Revenue generated by the reservation. */
  totalRevenue?: CurrencyAmountType;
  /** Balance amount on the reservation. */
  balance?: CurrencyAmountType;
  /** Comp Balance amount */
  compBalance?: CurrencyAmountType;
}

/** This stores the information for Bed Tax Reporting. Mainly used in Maldives. */
export interface BillingPrivilegesType {
  /** Flag used by interface program during check in. */
  postingRestriction?: boolean;
  /** Indicates if the reservation has charging privileges before arrival. */
  preStayCharging?: boolean;
  /** Indicates if the reservation has charging privileges after checkout. */
  postStayCharging?: boolean;
  /**
   * Date when folio was closed. This works with PostStayCharging flag.
   * @format date
   * @maxLength 8
   */
  folioCloseDate?: string;
  /** Indicates if the guest is scheduled for automatic check out. */
  scheduledCheckout?: boolean;
  /**
   * Time of automatic check out if guest is schedule for automatic check out.
   * @format date
   * @maxLength 8
   */
  scheduledCheckoutTime?: string;
  /** If Direct bill is authorized this will hold User ID who authorized it. */
  directBillAuthorized?: boolean;
  /** Indicates if the guest can do video checkout */
  videoCheckout?: boolean;
  /** Indicated if a new reservation should be created and automatically checked in whenever the room is checked out. Available for pseudo room types only. */
  allowAutoCheckin?: boolean;
  /** Indicates if the is a candidate for auto folio settlement. */
  autoSettlement?: boolean;
  /**
   * The folio settlement type for auto folio settlement.
   * @minLength 0
   * @maxLength 40
   */
  autoSettlementType?: string;
  /** The interval of days between each auto folio settlement. */
  autoSettlementFreq?: number;
  /** Indicates if the reservation will be included in the Automatic Credit Limit Overages process and also be listed in the Credit Limit Overages screen results. */
  creditLimitAutoPay?: boolean;
}

/** Provides information about the Tax Type. */
export interface ReservationTaxTypeInfo {
  /**
   * Code of the Hotel.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Code of the Tax Type.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * Description of the Tax Type.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /** A boolean flag for Collecting Agent Tax */
  collectingAgentTax?: boolean;
  /** Print auto adjust information for this tax type on the tax exempt report. */
  printAutoAdjust?: boolean;
  /** Number of days after which the guest will be tax exempt. Only used for tax exempt report. */
  reportExemptDays?: number;
  /**
   * Tax percentage. Only used for tax exempt report.
   * @min 0
   * @max 100
   */
  reportTaxPercentage?: number;
  /** Minimun Length of Stay. */
  minimumLengthOfStay?: number;
  /**
   * Tax exempt number on the profile.
   * @minLength 0
   * @maxLength 20
   */
  taxExemptNo?: string;
}

/** This stores the information for Bed Tax Reporting. Mainly used in Maldives. */
export interface BedTaxReportingType {
  /** Tax Registration Number for Maldives Bed Tax Reporting. */
  taxRegistrationNo?: number;
  /**
   * Visa number used for Maldives Bed Tax Reporting
   * @minLength 0
   * @maxLength 40
   */
  visaNumber?: string;
  /**
   * Visa Issue Date used for Maldives Bed Tax Reporting.
   * @format date
   * @maxLength 8
   */
  visaIssueDate?: string;
  /**
   * Visa Expiration Date used for Maldives Bed Tax Reporting
   * @format date
   * @maxLength 8
   */
  visaExpiryDate?: string;
  /** Number of days for which the Maldives tax is applicable. */
  taxableDays?: number;
}

/**
 * This stores the description for the type of tax calculation especially with tax exemption, etc.
 * @maxItems 2
 */
export type FolioTextsType = {
  /**
   * Additional text field to display on the folio.
   * @minLength 0
   * @maxLength 50
   */
  text?: string;
  /** Row number of the additional text. */
  row?: number;
}[];

/** Information regarding periodic folios set on the reservation. */
export interface ResPeriodicFolioType {
  /**
   * Latest date when a direct bill settlement was automatically done using the "Direct Bill Batch Folios" option.
   * @format date
   * @maxLength 8
   */
  lastSettlementDate?: string;
  /**
   * Latest date when a folio was printed using the "Periodic Batch Folios" option
   * @format date
   * @maxLength 8
   */
  lastFolioDate?: string;
  /** Frequency in number of days when folios should be printed for this reservation. */
  frequency?: number;
}

/** Information regarding comp accounting on the reservation. */
export interface ResCompAccountingType {
  /**
   * Code used to identify the casino comp type and ranking of a guest.
   * @minLength 0
   * @maxLength 20
   */
  compType?: string;
  /**
   * ID of the employee who will act as the host for this guest.
   * @minLength 0
   * @maxLength 40
   */
  authorizer?: string;
  /**
   * Indicates if the Comp Billing/posting Exist
   * @minLength 0
   * @maxLength 5
   */
  compPostings?: string;
}

/** Instruction to attach Pre-Configured Routing Instructions to a Reservation. */
export interface ResPreConfiguredRoutingInstrType {
  /** The authorizer information for Promotion Code with attached Complimentary Routing */
  authorizerInfo?: AuthorizerInfoType;
  /**
   * Rate Code with attached Routing Instruction.
   * @minLength 0
   * @maxLength 20
   */
  ratePlanCode?: string;
  /** Profile Type with attached Routing Instruction. */
  profileType?: ResProfileTypeType;
  /**
   * Promotion Code with attached Complimentary Routing.
   * @minLength 0
   * @maxLength 20
   */
  promotionCode?: string;
}

/** Authorizer Information */
export interface AuthorizerInfoType {
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  authorizerId?: UniqueIDType;
  /**
   * Application user name of the authorizer
   * @minLength 0
   * @maxLength 40
   */
  authorizerUserName?: string;
  /**
   * Full name of the authorizer.
   * @minLength 0
   * @maxLength 100
   */
  authorizerName?: string;
  /**
   * Rate code of the authorizer.
   * @minLength 0
   * @maxLength 20
   */
  authorizerRateCode?: string;
  /** Indicates whether user has the choice to have reservation inherit rate code from the authorizer. */
  inheritAuthorizerRateCode?: boolean;
}

/** Provides information about the Tax Type. */
export interface TaxTypeType {
  /**
   * Code of the Hotel.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Code of the Tax Type.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * Description of the Tax Type.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /** A boolean flag for Collecting Agent Tax */
  collectingAgentTax?: boolean;
  /** Print auto adjust information for this tax type on the tax exempt report. */
  printAutoAdjust?: boolean;
  /** Number of days after which the guest will be tax exempt. Only used for tax exempt report. */
  reportExemptDays?: number;
  /**
   * Tax percentage. Only used for tax exempt report.
   * @min 0
   * @max 100
   */
  reportTaxPercentage?: number;
  /** Minimun Length of Stay. */
  minimumLengthOfStay?: number;
}

/** Reservation Deposit Type. */
export interface ReservationDepositType {
  /** Deposit Amount Required. */
  amountRequired?: number;
  /** Deposit Amount Paid. */
  amountPaid?: number;
  /** Deposit Amount Owed. */
  amountOwed?: number;
  /**
   * Deposit Due Date.
   * @format date
   * @maxLength 8
   */
  dueDate?: string;
  /**
   * Deposit Posting Date.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /** Resolves whether reservation has paid deposit. */
  hasPaid?: boolean;
  /** Resolves whether reservation has outstanding deposit. */
  hasOutstanding?: boolean;
}

/**
 * Allowed action.
 * @maxItems 11
 */
export type ReservationAllowedActionsType = ReservationAllowedActionType[];

/** Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation. */
export enum ReservationAllowedActionType {
  Cancel = 'Cancel',
  Move = 'Move',
  PreCharge = 'PreCharge',
  PostCharge = 'PostCharge',
  FacilitySchedule = 'FacilitySchedule',
  Upsell = 'Upsell',
  PreCheckIn = 'PreCheckIn',
  PostToNoShowCancel = 'PostToNoShowCancel',
  NoShow = 'NoShow',
  NameChange = 'NameChange',
  Discount = 'Discount',
  HouseKeeping = 'HouseKeeping',
  EnrollToPrimaryMembership = 'EnrollToPrimaryMembership',
  EnrollInProgress = 'EnrollInProgress',
}

/** Hotel Interface Type for a reservation and status of the various services */
export interface ReservationInterfaceStatusType {
  /**
   * Identifier for the room extension
   * @minLength 0
   * @maxLength 20
   */
  roomExtension?: string;
  /** Hotel interface information for the reservation */
  hotelInterface?: HotelInterfaceType;
  /**
   * Contains a list of status/rights for the various services under this interface
   * @maxItems 4000
   */
  interfaceRights?: InterfaceRightsStatusType[];
}

export interface HotelInterfaceType {
  /** Unique DB internal number of a Hotel Interface record. */
  interfaceId?: UniqueIDType;
  /**
   * Hotel Code
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Name of the Hotel Interface
   * @minLength 0
   * @maxLength 40
   */
  interfaceName?: string;
  /** Three letter code for each interface that identifies the interface. */
  interfaceType?: HotelInterfaceTypeType;
  /**
   * Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
   * @minLength 0
   * @maxLength 20
   */
  logo?: string;
  /**
   * Unique machine name of the running IFC.
   * @minLength 0
   * @maxLength 80
   */
  machineName?: string;
  /** The current status of the IFC. */
  status?: HotelInterfaceStatusType;
  /** Indicator if the Hotel Interface is active or not. This is different from the Interface Status, which is either STOPPED or RUNNING. */
  activeFlag?: boolean;
}

/** XML Posting Interface */
export enum HotelInterfaceTypeType {
  Bms = 'Bms',
  Cas = 'Cas',
  Ccw = 'Ccw',
  Dls = 'Dls',
  Eft = 'Eft',
  Exp = 'Exp',
  Mak = 'Mak',
  Mbs = 'Mbs',
  Msc = 'Msc',
  Pbx = 'Pbx',
  Pos = 'Pos',
  Svs = 'Svs',
  Tik = 'Tik',
  Vid = 'Vid',
  Vms = 'Vms',
  Www = 'Www',
  Xml = 'Xml',
}

/** Status of the Hotel Interface either STOPPED or RUNNING. */
export enum HotelInterfaceStatusType {
  Stopped = 'Stopped',
  Running = 'Running',
  Waiting = 'Waiting',
  StopInitiated = 'StopInitiated',
  StartInitiated = 'StartInitiated',
  RebootInitiated = 'RebootInitiated',
  Other = 'Other',
}

export interface InterfaceRightsStatusType {
  /** Internal code for each allowed right of a Hotel Interface record. */
  right?: number;
  /**
   * User defined code for an Interface Right.
   * @minLength 0
   * @maxLength 5
   */
  statusCode?: string;
  /**
   * User defined description for an Interface Right.
   * @minLength 0
   * @maxLength 80
   */
  description?: string;
  /**
   * Category code of this interface right.
   * @minLength 0
   * @maxLength 1
   */
  category?: string;
}

/** Turndown information for a reservation */
export interface ReservationTurndownInfoType {
  /** Indicates if turndown is allowed or not */
  allowed?: boolean;
  /** Indicates turndown status, values could be required, not required, completed */
  status?: TurndownStatusType;
}

/** Simple type for turndown status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Required, Not Required and Completed. */
export enum TurndownStatusType {
  Required = 'Required',
  NotRequired = 'NotRequired',
  Compeleted = 'Compeleted',
}

/** Contains the status of Room Ready and Key Ready messages. */
export interface ResMobileNotificationsType {
  /** Denotes the status of Room Ready message. It can have one of the values:PENDING, COMPLETED or FAILED */
  roomReady?: CommunicationStatusType;
  /** Denotes the status of Key Ready message. It can have one of the values:PENDING, COMPLETED or FAILED */
  keyReady?: CommunicationStatusType;
  /** Indicates if the Mobile checkout message is received. */
  checkoutMessageReceived?: boolean;
  /** Indicates if user action is required. The action could be for sending Room Ready or Key Ready Notification. It could also be for initiating Checkout */
  requiresAction?: boolean;
  /** Error message when Mobile Notification has failed. */
  errorMessage?: string;
}

/** Enum to denote the Status of Readiness messages sent to Guest Devices. */
export enum CommunicationStatusType {
  Pending = 'Pending',
  Completed = 'Completed',
  Failed = 'Failed',
  Sent = 'Sent',
  Received = 'Received',
  Cancelled = 'Cancelled',
  PendingAvailability = 'PendingAvailability',
}

/** Communication details for a reservation. */
export interface ResCommunicationType {
  /** List of Telephone Number Information */
  telephones?: {
    /**
     * Collection of Detailed information on telephone/fax for the customer.
     * @maxItems 4000
     */
    telephoneInfo?: TelephoneInfoType[];
    /** Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response. */
    hasMore?: boolean;
    /** Total number of rows queried */
    totalResults?: number;
    /** Total number of rows returned */
    count?: number;
  };
  /** List of email address for the customer. */
  emails?: {
    /**
     * Collection of Detailed information on an eMail address for the customer.
     * @maxItems 4000
     */
    emailInfo?: EmailInfoType[];
    /** Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response. */
    hasMore?: boolean;
    /** Total number of rows queried */
    totalResults?: number;
    /** Total number of rows returned */
    count?: number;
  };
}

/** Information on a telephone number for the customer. */
export interface TelephoneInfoType {
  /** Phone details for the profile. */
  telephone?: TelephoneType;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** Information on a telephone number for the customer. */
export interface TelephoneType {
  /**
   * Indicates type of technology associated with this telephone number, such as Voice, Data, Fax, Pager, Mobile, TTY, etc.
   * @minLength 0
   * @maxLength 20
   */
  phoneTechType?: string;
  /**
   * Describes the type of telephone number, in the context of its general use (e.g. Home, Business, Emergency Contact, Travel Arranger, Day, Evening).
   * @minLength 0
   * @maxLength 20
   */
  phoneUseType?: string;
  /**
   * Description of the PhoneUseType code
   * @minLength 0
   * @maxLength 2000
   */
  phoneUseTypeDescription?: string;
  /**
   * Telephone number assigned to a single location.
   * @minLength 0
   * @maxLength 40
   */
  phoneNumber?: string;
  /**
   * Extension to reach a specific party at the phone number.
   * @minLength 0
   * @maxLength 20
   */
  extension?: string;
  /** When true, indicates a primary information. */
  primaryInd?: boolean;
  /** Display Order sequence. */
  orderSequence?: number;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** Information on an email for the customer. */
export interface EmailInfoType {
  /** eMail deatils for the profile. */
  email?: EmailType;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** Information relating to Reservation's Advance Checked In state and Expected Time of Return */
export interface AdvanceCheckInType {
  /** Indicates if the reservation is marked as Advance Checked In */
  advanceCheckedIn?: boolean;
  /**
   * Expected Return Time
   * @format date-time
   */
  expectedReturnTime?: string;
  /**
   * ETR Comments
   * @minLength 0
   * @maxLength 2000
   */
  eTRComments?: string;
}

/** This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment. */
export enum PMSResStatusType {
  Reserved = 'Reserved',
  Requested = 'Requested',
  NoShow = 'NoShow',
  Cancelled = 'Cancelled',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Waitlisted = 'Waitlisted',
  DueIn = 'DueIn',
  DueOut = 'DueOut',
  Walkin = 'Walkin',
  PendingCheckout = 'PendingCheckout',
}

/** Indicates any Updates/Changes on the reservation as well as Reservation Cancellation are not allowed. */
export enum ResAccessRestrictionType {
  Change = 'Change',
  Cancel = 'Cancel',
  ChangeOrCancel = 'ChangeOrCancel',
}

export enum CommissionPayoutToType {
  TravelAgent = 'TravelAgent',
  Source = 'Source',
  TravelAgentSource = 'TravelAgentSource',
  None = 'None',
}

/** Response object for fetch comp authorizers operation. */
export interface CompTrxAuthorizers {
  /** List of authorizers eligible to perform the transfer. */
  authorizerInfo?: AuthorizerInfoType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to post a Credit Folio for an existing Folio. Credit Bill Functionality parameter is required. */
export interface CreditBillCriteria {
  /** Criteria for creating the Credit Folio. This should include all charges and payments for the Credit Folio. */
  criteria?: CreditBillCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for posting the Credit Bill. Includes charges and payments. */
export interface CreditBillCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /**
   * The payment information to be posted.
   * @maxItems 4000
   */
  payments?: PaymentCriteriaType[];
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Custom Folio Name Value Informatoin to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /**
   * Transaction service type which the Folio is being associated.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Original Folio details. This is the folio for which a Credit Bill is required. */
  originalFolio?: FolioType;
  /** Flag can be used when a Credit Bill is to be created for full set of transactions in the Original Bill. */
  fullCredit?: boolean;
}

/** Response for the request to create a Credit Folio. */
export interface PostedCreditBill {
  /** Information regarding the new Credit Folio created. */
  folioWindow?: FolioWindowType[];
  /** Deposit payment information of the payment which was posted. */
  payments?: DetailPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response to the request to check if a Folio is valid for Credit Bill. */
export interface ValidatedCreditBill {
  /** Contains Folio Details including payee information and the reservation which it's attached to. */
  folio?: {
    /**
     * Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected.
     * @maxLength 2000
     */
    fiscalTerminalId?: string;
    /** Payee information for the folio. */
    payeeInfo?: PayeeInfoType;
    /** Folio gross amount. */
    folioAmount?: CurrencyAmountType;
    /** Flag to check Folio Conversion Allowed. */
    allowConvertFolioYn?: boolean;
    /** Flag to check Folio generated from Acoount Receivables. */
    accountReceivablesFolio?: boolean;
    /** Bill Payment transaction Number. */
    paymentTrxNo?: number;
    /** ReservationID to which this record applies. */
    reservationInfo?: {
      /** ReservationID to which this record applies. */
      reservationId?: number;
      /**
       * Room Number to which this record applies.
       * @minLength 0
       * @maxLength 20
       */
      room?: string;
      /** Guest Name ID */
      nameId?: UniqueIDType;
      /**
       * Guest Name
       * @minLength 0
       * @maxLength 200
       */
      guestName?: string;
      /**
       * Guest Alternate Last and First Name
       * @minLength 0
       * @maxLength 200
       */
      altName?: string;
    };
    /** Number for Post-It transactions. */
    postItNo?: number;
    /** Bill Number. */
    associatedBills?: string[];
    /** Account Code. */
    accountCode?: number;
    /** Payment Posting for the folio. */
    payment?: SummaryPostingType;
    /** Addressee Information for the Folio. This is available when the Addressee functionality is used and and Addressee is attached to the folio. */
    addresseeInfo?: ProfileInfoType;
    /** Exchange Rate information selected to be used by the Fiscal Service. */
    fiscalInvoicingCurrencyInfo?: ExchangeRateInfoType;
    /** Indicates if this folio is linked to an anonymized Guest/Payee/Addressee. */
    anonymizedFolio?: boolean;
    /**
     * The starting value of the date range.
     * @format date
     */
    start?: string;
    /**
     * The ending value of the date range.
     * @format date
     */
    end?: string;
    /** Folio Revision number. */
    revisionNo?: number;
    folioWindowNo?: number;
    /**
     * Bill Number returned by the Fiscal Printer.
     * @minLength 0
     * @maxLength 40
     */
    fiscalFolioNo?: string;
    /** Folio Number. */
    folioNo?: number;
    /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
    invoiceNo?: number;
    /**
     * The Fiscal Bill number of this posting
     * @minLength 0
     * @maxLength 40
     */
    fiscalBillNo?: string;
    /**
     * The name of the Folio Type used for the Folio Number sequence.
     * @minLength 0
     * @maxLength 100
     */
    folioTypeName?: string;
    /**
     * Internal window ID which is unique to the reservation. This ID can only be used for reference.
     * @minLength 0
     * @maxLength 20
     */
    internalFolioWindowID?: string;
    /**
     * Date of Folio Generation.
     * @format date
     */
    folioDate?: string;
    /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
    folioStatus?: FolioStatusType;
    /**
     * Folio Queue name.
     * @minLength 0
     * @maxLength 2000
     */
    queueName?: string;
    /** Fiscal folio flag to call fiscal Information folio web service. */
    generateFiscalFolio?: boolean;
    /** If the Property checks on the gross amount of the Original Folio,then this will be the remaining amount on the Original Folio that can be credited. */
    creditableAmount?: CurrencyAmountType;
    /** A flag which indicates whether credit folio has been generated. */
    creditBillGenerated?: boolean;
    /** A flag which indicates whether selected folio has deposit transfer or not. */
    hasDepositTransfer?: boolean;
  };
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Provides information about attached profiles to the block. */
export interface ProfileInfoType {
  /** Opera ID for the profile attached to the block. */
  profileId?: UniqueIDType;
  /**
   * Name for the profile attached to the block.
   * @minLength 0
   * @maxLength 200
   */
  name?: string;
  /**
   * City for the profile attached to the block.
   * @minLength 0
   * @maxLength 80
   */
  city?: string;
  /**
   * Phone for the profile attached to the block.
   * @minLength 0
   * @maxLength 80
   */
  phone?: string;
  /**
   * Defines the type of Linked profiles for a block.
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
}

/** Exchange rate information of a currency. */
export interface ExchangeRateInfoType {
  /** Description of exchange rate. */
  exchangeRate?: number;
  /**
   * Description of currency Code.
   * @minLength 0
   * @maxLength 20
   */
  currencyCode?: string;
}

/** Response for Fetch Credit Limit Overage Payments request */
export interface CreditLimitOveragePaymentsInfo {
  /** List of reservations matching the search criteria. */
  reservationOveragePayments?: ReservationOveragePaymentsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** List of Reservation details for payment that has a folio window balance equal or higher to the credit limit set for the credit card payment method of that folio window. */
export interface ReservationOveragePaymentsType {
  /**
   * Reservation details to initiate the Credit Limit Overage process
   * @maxItems 4000
   */
  reservationOveragePayment?: ReservationOveragePaymentType[];
  /**
   * Identifies the hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Details of the reservation with the folio balance equal or higher to the credit limit */
export interface ReservationOveragePaymentType {
  /** Reservation id of the reservation */
  reservationId?: ReservationId;
  /**
   * Guest name of the listed reservation.
   * @minLength 0
   * @maxLength 2000
   */
  guestName?: string;
  /**
   * Room number on the reservation.
   * @minLength 0
   * @maxLength 20
   */
  roomId?: string;
  /** Window number associated where the balance is equal or higher to the credit limit on the method of payment. */
  windowNo?: number;
  /** Identifies the credit card type. */
  cardType?: CardTypeType;
  /**
   * Identifies the user defined credit card type if credit card type from a defined list is not provided.
   * @minLength 0
   * @maxLength 2
   */
  userDefinedCardType?: string;
  /**
   * Credit Card number / token (mask based on PCI compliance).
   * @minLength 0
   * @maxLength 80
   */
  creditCardNo?: string;
  /**
   * Expiration date of the credit card (mask based on PCI compliance)
   * @minLength 0
   * @maxLength 20
   */
  cardExpirationDate?: string;
  /** credit card id */
  creditCardId?: UniqueIDType;
  /** Credit Limit set for the credit card payment method. */
  creditCardLimit?: CurrencyAmountType;
  /** Amount that will be charge to the payment method in the folio window. */
  balance?: CurrencyAmountType;
  /**
   * Defines the unique identifier for this payment method.
   * @minLength 0
   * @maxLength 20
   */
  paymentMethod?: string;
}

/** Request to start the Credit Limit Overage process for the reservations with a folio window balance equal or higher to the credit limit set for the credit card payment method of that folio window. */
export interface CreditLimitOveragePayments {
  /** Criteria for submitting the payments request for a reservation to start the Credit Limit Overage process. */
  criteria?: ReservationOveragePaymentsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for Submit Credit Limit Overage Payments request */
export interface CreditLimitOveragePaymentsDetails {
  /** Batch process identifier. */
  processId?: StringLength40;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to register the vault HTTP transaction. */
export interface VaultTransaction {
  httpTransactionMessage?: VaultHTTPTransactionMessageType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface VaultHTTPTransactionMessageType {
  /**
   * The hotel context of the transaction.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The HTTP request entity content. The needs to use escape characters.
   * @minLength 0
   * @maxLength 4000
   */
  escapedRequestContent?: string;
  /**
   * The HTTP response entity content. The needs to use escape characters.
   * @minLength 0
   * @maxLength 4000
   */
  escapedResponseContent?: string;
  /** Request and response time of the vault communication. */
  hTTPTransactionDuration?: DateRangeType;
  /** Vault error. */
  hTTPError?: ErrorType;
  /** Authorization approval record. */
  authorizationApproval?: {
    /** Profile Id corresponding to the guest name. */
    profileId?: ProfileId;
    /** Unique Id that references an object uniquely in the system. */
    reservationIdList?: ReservationIdList;
    /** Approved amount. */
    approvalAmount?: CurrencyAmountType;
    /** The payment record which the authorization approved. */
    authorizedPaymentRecord?: ReservationPaymentMethodType;
    /**
     * The approval code authenticates the authorization.
     * @minLength 0
     * @maxLength 20
     */
    approvalCode?: string;
    /** Unique Authorization Sequence for the authorization and settlement. */
    originalAuthSequence?: number;
    cardSwiped?: boolean;
    /** Source of the authorization. */
    sourceOfAuthorization?: CardAuthorizationTransactionType;
  };
  type?: VaultHTTPTransactionType;
}

/** Standard way to indicate that an error occurred during the processing of an OpenTravel message. If the message successfully processes, but there are business errors, those errors should be passed in the warning element. */
export interface ErrorType {
  /** Property Value */
  value?: string;
  /** An abbreviated version of the error in textual format. */
  shortText?: string;
  /**
   * If present, this refers to a table of coded values exchanged between applications to identify errors or warnings. Refer to OpenTravel Code List Error Codes (ERR).
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /** If present, this URL refers to an online description of the error that occurred. */
  docURL?: string;
  /** If present, recommended values are those enumerated in the OTA_ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration. */
  status?: string;
  /** If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing]. */
  tag?: string;
  /** If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction. */
  recordId?: string;
  /**
   * The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown". Refer to OpenTravel Code List Error Warning Type (EWT).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
  /** An XPath expression that selects all the nodes whose data caused this error. Further, this expression should have an additional contraint which contains the data of the node. This will provide the offending data back to systems that cannot maintain the original message. */
  nodeList?: string;
}

/** Currently supported transaction type categories used for credit card authorization. */
export enum CardAuthorizationTransactionType {
  Additional = 'Additional',
  ArPayment = 'ArPayment',
  Batch = 'Batch',
  BatchDeposit = 'BatchDeposit',
  BatchDepositRefund = 'BatchDepositRefund',
  Billing = 'Billing',
  CheckIn = 'CheckIn',
  CheckInManualAuth = 'CheckInManualAuth',
  Deposit = 'Deposit',
  EndOfDay = 'EndOfDay',
  EndOfDayDeposit = 'EndOfDayDeposit',
  Manual = 'Manual',
  Other = 'Other',
  PasserBy = 'PasserBy',
  PostIt = 'PostIt',
  PreCheckIn = 'PreCheckIn',
  Refund = 'Refund',
  Scheduled = 'Scheduled',
}

export enum VaultHTTPTransactionType {
  CCUniqueID = 'CCUniqueID',
  CCNumber = 'CCNumber',
  FolioAuthorization = 'FolioAuthorization',
}

/** Response to the request to fetch Credit Card Surcharge information for a Credit Card Payment. */
export interface CcSurchargeDetails {
  /** Surcharge information for the Credit Card Payment. */
  info?: CCSurchargeAmountType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Information regarding the Surcharge amount which will be applied to a payment. */
export interface CCSurchargeAmountType {
  /**
   * Property where the payment is being posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The total Surcharge amount which is to be applied to this payment. */
  surchargeAmount?: CurrencyAmountType;
  /** Details on the Surcharge configuration. The percentage and a threshold amount in case it is defined. */
  surchargeInfo?: CCSurchargeInfoType;
  /** Payment method used for the payment. */
  paymentMethod?: CashieringPaymentMethodType;
}

/** Credit Card Surcharge Information type. Information regarding surcharge which can be applied to a Credit Card payment. */
export interface CCSurchargeInfoType {
  /**
   * The percentage on the payment amount which will be the Surcharge.
   * @min 0
   * @max 100
   */
  percentage?: number;
  /** The threshold payment amount above which the Surcharge will be applied. */
  threshold?: CurrencyAmountType;
  /**
   * The Payment Transaction Code for which the Surcharge Applies.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
}

/** Deposit Posting Information for a reservation. Contains all deposit payments made for a reservation. */
export interface ReservationDepositFolios {
  /** Collection of Reservations and their Deposit Information. Includes a list of all deposit payments and folios(if applicable). */
  reservationDepositFoliosInfo?: ReservationDepositFoliosInfoType;
  /** Transaction codes information which are in response folio. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Detailed information of a reservation and its deposit payment posting information.
 * @maxItems 4000
 */
export type ReservationDepositFoliosInfoType = ReservationDepositFolioInfoType[];

/** Detailed information of a reservation and its deposit payment posting information. */
export interface ReservationDepositFolioInfoType {
  /** Total Deposit Amount which is due for this reservation. */
  totalAmountDue?: CurrencyAmountType;
  /** Reservation guest details. */
  reservationInfo?: ReservationInfoType;
  /** Window count will be hotel based configurable. */
  deposits?: DepositPostingsType;
  /** Total Deposit Amount that can be transferred to another Reservation. */
  totalAmountTransferrable?: CurrencyAmountType;
  /** Projected revenue for the reservation. */
  projectedRevenue?: ProjectedRevenueType;
  /** Summary information for the Deposit and Cancellation Policies on the reservation. */
  policySummaryInfo?: ReservationPolicySummaryType;
  /** The Reservation's Deposit Status Type. This can indicate if the Reservation is only allowed to create Folios for Deposits or Receipts for Deposits or by Default Any. Used when Deposit Folio Functionality is ON. */
  depositType?: DepositType;
  /** The Reservation's Deposit Status Type. When preference is set to �Check In,� the deposit is transferred when the guest checks in. When the preference is set to �Last Night Stay,� then the deposit is transferred during the last nights� night audit. For example, if the departure date for a reservation is July 14th, then the deposit would be posted during the night audit for July 13th. */
  depositMaturityType?: DepositMaturityType;
}

/**
 * A List of Deposit Payments.
 * @maxItems 4000
 */
export type DepositPostingsType = DepositPostingType[];

/** Posting details. */
export interface DepositPostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /** Deposit Policy information if this payment was applied to a deposit policy. */
  depositPolicy?: ResDepositPolicyType;
  /**
   * User defined comments for the deposit.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Defined method of payment for this transaction. */
  paymentMethod?: ReservationPaymentMethodType;
  /** Information regarding receipt of the posted deposit */
  receiptSummaryInfo?: ReceiptSummaryType;
  /** The Folio number of this posting, if there was a Folio already generated. */
  folioNo?: number;
  /** Indicates if the deposit was transferred either to a reservation or from a reservation. */
  transferred?: boolean;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
}

/** A deposit policy attached with the reservation. */
export interface ResDepositPolicyType {
  /** Type of reservation. */
  revenueType?: DepositCancelRevenueType;
  /** Reservation deposit policy details. */
  policy?: DepositPolicyType;
  /**
   * Comments attached with a deposit.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Total amount paid against the reservation deposit. */
  amountPaid?: CurrencyAmountType;
  /** Total amount due against the reservation deposit. */
  amountDue?: CurrencyAmountType;
  /** Unique ID of the Reservation Policy. */
  policyId?: UniqueIDType;
}

/** The type to indicate what revenue is to be used for calculating deposit/cancellation amounts. */
export enum DepositCancelRevenueType {
  Rooms = 'Rooms',
  Catering = 'Catering',
  All = 'All',
}

/** Used to define the deposit policy, guarantees policy, and/or accepted forms of payment. */
export interface DepositPolicyType {
  /** Payment expressed as a fixed amount, or a percentage of/or room nights. */
  amountPercent?: PolicyAmountPercentType;
  /** Payment deadline, absolute or relative. */
  deadline?: PolicyDeadlineType;
  /**
   * Text description of the Payment in a given language.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /** Receipt number associated with the deposit policy */
  depositReceiptNo?: number;
  /**
   * Transaction Date associated with the deposit policy
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /** Flag to indicate if deposit policy is reversed */
  depositReqReversed?: boolean;
  /**
   * Formatted Text Rule of the deposit policy.
   * @minLength 0
   * @maxLength 2000
   */
  formattedRule?: string;
  /** Defines if the deposit amount is calculated based on Room Charges, Catering Charges or both */
  typeOfCharges?: DepositCancelRevenueType;
  /**
   * Deposit Policy Code
   * @minLength 0
   * @maxLength 20
   */
  policyCode?: string;
  /** Flag to indicate if the cancellation policy is manual. */
  manual?: boolean;
}

/** Defines the percentage basis for calculating the fee amount or the amount. */
export interface PolicyAmountPercentType {
  /** Provides the basis for how the amount of the guarantee is calculated. */
  basisType?: PolicyBasisTypeType;
  /** The number of nights of the hotel stay that are used to calculate the fee amount. */
  nights?: number;
  /**
   * The percentage used to calculate the amount.
   * @min 0
   * @max 100
   */
  percent?: number;
  /** A monetary amount. */
  amount?: number;
  /**
   * Provides a currency code to reflect the currency in which an amount may be expressed.
   * @minLength 3
   * @maxLength 3
   */
  currencyCode?: string;
}

/** Full Amount. */
export enum PolicyBasisTypeType {
  FlatAmount = 'FlatAmount',
  Percentage = 'Percentage',
  Nights = 'Nights',
  NightPercentage = 'NightPercentage',
  FullAmount = 'FullAmount',
}

/** Cancellation deadline, absolute or relative. */
export interface PolicyDeadlineType {
  /**
   * Defines the absolute deadline. Either this or the offset attributes may be used.
   * @format date-time
   */
  absoluteDeadline?: string;
  /** The number of days before arrival that allows cancellation without penalties. */
  offsetFromArrival?: number;
  /**
   * Time on offset day the cancellation penalties applies.
   * @format date-time
   */
  offsetDropTime?: string;
  /** The number of days after booking deposit must be paid. */
  offsetFromBookingDate?: number;
}

/** Contains Receipt Details. */
export interface ReceiptSummaryType {
  /** Payee information for the Receipt. */
  payeeInfo?: PayeeInfoType;
  /** Receipt gross amount. */
  receiptAmount?: CurrencyAmountType;
  /**
   * Custom Number.
   * @maxItems 5
   */
  customNumbers?: string[];
  /**
   * The starting value of the date range.
   * @format date
   * @maxLength 8
   */
  start?: string;
  /**
   * The ending value of the date range.
   * @format date
   * @maxLength 8
   */
  end?: string;
  /** Receipt Number. */
  receiptNo?: number;
  /**
   * Receipt Type Description.
   * @minLength 0
   * @maxLength 4000
   */
  receiptTypeDescription?: string;
  /**
   * Transaction Number.
   * @minLength 0
   * @maxLength 20
   */
  transactionNo?: string;
  /** Receipt Type. */
  receiptType?: ReceiptType;
  /**
   * Tax Invoice Number of the Receipt.
   * @minLength 0
   * @maxLength 40
   */
  taxInvoice?: string;
}

/** This contains the receipt type. */
export enum ReceiptType {
  Payment = 'Payment',
  Deposit = 'Deposit',
  Paidout = 'Paidout',
  Transaction = 'Transaction',
  CheckExchange = 'CheckExchange',
  CurrencyExchangeCheck = 'CurrencyExchangeCheck',
  CurrencyExchangeCash = 'CurrencyExchangeCash',
  DepositRequest = 'DepositRequest',
  DepositRefundReceipt = 'DepositRefundReceipt',
  Acknowledgement = 'Acknowledgement',
}

/** Information about projected catering and room revenue for the reservation. */
export interface ProjectedRevenueType {
  /** Projected room revenue for the reservation */
  projectedRoomRevenue?: CurrencyAmountType;
  /** Projected catering revenue for the reservation. */
  projectedCateringRevenue?: CurrencyAmountType;
  /** Number of room nights for the reservation. */
  roomNights?: number;
}

/** A collection of reservation deposit and cancellation policies. */
export interface ReservationPolicySummaryType {
  /** A collection of reservation cancellation policies.. */
  cancellationPolicies?: ResCancellationPoliciesType;
  /** A collection of reservation deposit policies. */
  depositPolicies?: ResDepositPoliciesType;
  /** A list of Ids for reservation. */
  reservationIdList?: UniqueIDListType;
  /** Name identifier for the reservation. */
  name?: string;
}

/**
 * A list of reservation cancellation policies.
 * @maxItems 4000
 */
export type ResCancellationPoliciesType = ResCancellationPolicyType[];

/** A cancellation policy attached with the reservation. */
export interface ResCancellationPolicyType {
  /** Type of reservation. */
  revenueType?: DepositCancelRevenueType;
  /** Cancellation policy details. */
  policy?: ResCancelPenaltyType;
  /**
   * The percentage amount due for reservation cancellation.
   * @min 0
   * @max 100
   */
  percentageDue?: number;
  /**
   * Comments attached with the reservation cancellation.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Unique ID of the Reservation Policy. */
  policyId?: UniqueIDType;
}

/** The CancelPenalty class defines the cancellation policy of the hotel facility. */
export interface ResCancelPenaltyType {
  /** Cancellation deadline, absolute or relative. */
  deadline?: PolicyDeadlineType;
  /** Cancellation fee expressed as a fixed amount, or percentage of/or room nights. */
  amountPercent?: PolicyAmountPercentType;
  /**
   * Text description of the Penalty in a given language.
   * @minLength 0
   * @maxLength 2000
   */
  penaltyDescription?: string;
  /** Indicates deadline offset unit type. */
  offsetUnit?: OffsetUnitType;
  /**
   * Formatted Text Rule of the Cancellation Penalty.
   * @minLength 0
   * @maxLength 2000
   */
  formattedRule?: string;
  /**
   * Policy Code.
   * @minLength 0
   * @maxLength 20
   */
  policyCode?: string;
  /** Flag to indicate if the cancellation policy is manual. */
  manual?: boolean;
  /** Indicates if the amount is refundable if booking is canceled. */
  nonRefundable?: boolean;
  /** Indicator if Cancellation Penalty is currently applicable or not. */
  effective?: boolean;
}

/** Indicates deadline offset unit type. */
export enum OffsetUnitType {
  Year = 'Year',
  Month = 'Month',
  Day = 'Day',
  Hour = 'Hour',
}

/**
 * A list of deposit policies attached with the reservation.
 * @maxItems 4000
 */
export type ResDepositPoliciesType = ResDepositPolicyType[];

/** Enumeration Type of Deposit. */
export enum DepositType {
  Folios = 'Folios',
  Receipts = 'Receipts',
  None = 'None',
}

/** The deposit is transferred when the guest checks in. */
export enum DepositMaturityType {
  CheckIn = 'CheckIn',
  LastNightStay = 'LastNightStay',
  LastDayAdvanceDeposit = 'LastDayAdvanceDeposit',
  None = 'None',
}

/** Response for the fetch transaction details request. Detail information regarding the folio transaction will be returned */
export interface DepositFolioTransactionDetails {
  /** The details regarding the transaction(Posting). */
  transactions?: DepositDetailPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of Deposit Postings with details.
 * @maxItems 4000
 */
export type DepositDetailPostingsType = DepositDetailPostingType[];

/** Posting information of the transaction . */
export interface DepositDetailPostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /** Deposit Policy information if this payment was applied to a deposit policy. */
  depositPolicy?: ResDepositPolicyType;
  /**
   * User defined comments for the deposit.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Defined method of payment for this transaction. */
  paymentMethod?: ReservationPaymentMethodType;
  /** Information regarding receipt of the posted deposit */
  receiptSummaryInfo?: ReceiptSummaryType;
  /** The Folio number of this posting, if there was a Folio already generated. */
  folioNo?: number;
  /** Indicates if the deposit was transferred either to a reservation or from a reservation. */
  transferred?: boolean;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /** SubPostings for the posting. */
  subPostings?: SummaryPostingsType;
  /** Currency exchange information if the posting was made using a currency different from the default currency. */
  currencyExchangeInfo?: TransactionCurrencyExchangeInfoType;
  miscellaneousInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    createDateTime?: string;
    paidOut?: boolean;
  };
  /** Internal Unique id for the Folio Window. */
  internalFolioWindowID?: string;
}

/** Request to validate a Deposit Folio for a reservation. */
export interface DepositFolioValidateCriteria {
  /** Criteria for validating if a Deposit Folio can be created for a reservation. Deposit Folio functionality should be active. */
  criteria?: DepositFolioValidateCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for posting a Deposit Folio. */
export interface DepositFolioValidateCriteriaType {
  /**
   * Property where the reservation exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation for which the Deposit Folio is required. */
  reservationId?: ReservationId;
  /** Profile Id of the Payee for this Deposit Folio. */
  profileId?: ProfileId;
  /** The deposit policy ID for which the Deposit Folio is being created. */
  depositPolicyId?: UniqueIDType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Information regarding the Deposit Policy if a Deposit Folio is going to be created for this policy. */
export interface DepositedFolioValidate {
  policyInfoList?: ResDepositPolicyType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to post a deposit payment to a reservation. */
export interface DepositPayment {
  /** Criteria for the deposit payment information to be posted. */
  criteria?: DepositPaymentCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for posting a deposit payment to a reservation. */
export interface DepositPaymentCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Payment method used by the payee. */
  paymentMethod?: CashieringPaymentMethodType;
  /** Amount to post to the folio. */
  postingAmount?: CurrencyAmountType;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  postingReference?: string;
  /**
   * User-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  postingRemark?: string;
  /**
   * User Defined Comments. Used for Deposit Payment postings.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available. */
  applyCCSurcharge?: boolean;
  /** The Payment Tax information for Thailand Tax functionality. The invoice number and the date will be used. */
  manualPaymentTaxInfo?: PaymentTaxType;
  /** Used for Thailand Tax Functionality.The payment tax records that can be used for a Credit Note for this reservation. */
  creditablePaymentTaxes?: PaymentTaxesType;
  /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made. */
  terminalId?: string;
  /** Flag to allow a rebate by Credit Card */
  overrideInsufficientCC?: boolean;
  /** Amount of change given to guest. */
  changeDueAmount?: CurrencyAmountType;
  /** Comp redemption information used to post as payment. */
  compRedemptions?: CompRedemptionsType;
  /** Flag to override account receivable credit limit */
  overrideARCreditLimit?: boolean;
  /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
  applyCurrencyTaxes?: boolean;
  /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
  vATOffset?: boolean;
  /** Payment action to know from where the payment has been made. */
  action?: PostPaymentActionType;
  /** Prepaid Card redemption information used to post as payment. */
  prepaidCardRedemptions?: PrepaidCardRedemptionsType;
  folioWindowNo?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /**
   * New guarantee code associated with reservation.
   * @minLength 0
   * @maxLength 20
   */
  guaranteeCode?: string;
  /** The deposit policy ID. */
  depositPolicyId?: UniqueIDType;
  /** The Payee ID for the deposit. Used for some country requirements. */
  profileId?: ProfileId;
  /** Transaction number of the payment being deposited. */
  associatedTrxNo?: number;
  /** Flag to indicate if the Inventory check has to be overridden when the guarantee code of the reservation is changed. */
  overrideInventoryCheck?: boolean;
  /** Flag to indicate if the payment method on the reservation, for Window 1, is to be updated with the payment method used for this deposit. */
  updateReservationPaymentMethod?: boolean;
  /** Receipt Type. */
  receiptType?: ReceiptType;
}

/** Response for the post deposit payment request. */
export interface DepositedPayment {
  /** Deposit payment information of the payment which was posted. */
  deposits?: DepositPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for fetching the Posting Journal. */
export interface FinancialPostings {
  /** Journal entries of the response. */
  journalPostings?: FinancialPostingsType;
  /** Evaluated total page count based on the requested max fetch count. */
  totalPages?: number;
  /** Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned. */
  offset?: number;
  /** Indicates maximum number of records a Web Service should return. */
  limit?: number;
  /** Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response. */
  hasMore?: boolean;
  /** Total number of rows queried */
  totalResults?: number;
  /** Total number of rows returned */
  count?: number;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to generate an Initial/Zero invoice from Fiscal Terminals screen. */
export interface FiscalFolioCriteria {
  /** Criteria for the creation of fiscal invoice. */
  criteria?: FiscalFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for calling fiscal folio service for the generation of invoices */
export interface FiscalFolioCriteriaType {
  /**
   * Property where the folio is being generated.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Type of fiscal folio operation. */
  folioCommand?: FolioCommandType;
  /**
   * Effective date to run fiscal command.
   * @format date
   * @maxLength 8
   */
  effectiveDate?: string;
  /** Folio details. */
  folios?: FiscalInvoiceSummaryType;
}

export enum FolioCommandType {
  Invoice = 'Invoice',
  Info = 'Info',
  ResendInvoice = 'ResendInvoice',
  Cancellation = 'Cancellation',
  EodReset = 'EodReset',
  XReport = 'XReport',
  SendFiscalInvoice = 'SendFiscalInvoice',
  ZeroInvoice = 'ZeroInvoice',
  EndOfPeriod = 'EndOfPeriod',
  ZeroInvoiceWithReceipt = 'ZeroInvoiceWithReceipt',
  FiscalUpdate = 'FiscalUpdate',
  CheckOut = 'CheckOut',
}

/** Contains information required for the generation of fiscal invoice. */
export interface FiscalInvoiceSummaryType {
  /**
   * @minLength 0
   * @maxLength 50
   */
  fiscalTerminalId?: string;
  /**
   * @minLength 0
   * @maxLength 1
   */
  transactionType?: string;
  /** Folio Number. */
  folioNo?: number;
  /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
  invoiceNo?: number;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /**
   * Date of Folio Generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
  folioStatus?: FolioStatusType;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Unique sequence number. Used to identify the current folio tax record. */
  folioSeqNo?: number;
  /**
   * Folio Queue name
   * @minLength 0
   * @maxLength 2000
   */
  queueName?: string;
  /** Fiscal folio flag to call fiscal Information folio web service. */
  generateFiscalFolio?: boolean;
}

/** Response after generating a commands from Fiscal Terminals screen. */
export interface FiscalCommandsResponseInfo {
  /** Command information returned from the Fiscal service. */
  fiscalResponseInfo?: FiscalResponseInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Invoice information returned from the fiscal service. */
export interface FiscalResponseInfoType {
  /** Fiscal terminal invoice number returned from fiscal service. */
  invoiceNo?: number;
  /** Uniquely identifies data sent from FLIP. */
  fiscalResponseId?: number;
}

/** Fiscal Folio Activity information */
export interface FolioActivityDetailsType {
  /**
   * Details of Fiscal Folio Activity made.
   * @maxItems 4000
   */
  folioActivityDetailInfo?: FolioActivityDetailType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details of Fiscal Folio Activity made. */
export interface FolioActivityDetailType {
  /** Fiscal Bill Number returned from Fiscal Program. */
  fiscalBillNo?: string;
  /** Bill Number. */
  billNo?: string;
  /** Folio Type. */
  folioType?: string;
  /** Queue Name. */
  queueName?: string;
  /** Bill Generation Date. */
  billGenerationDate?: string;
  /** Return Status from Fiscal Program Application (Fiscal Printer). */
  status?: string;
  /** Fiscal folio status for the partner system. */
  partnerFiscalFolioStatus?: string;
  /** Number of fiscal response attempts made for the folio */
  responseAttemptNo?: number;
  /** Return Message from Fiscal Printing Program. */
  messageText?: string;
}

/** Fiscal Folio Activity Details Information */
export interface FolioActivityResponseDetailType {
  /**
   * Details of response for the Fiscal Folio Activity made.
   * @maxItems 4000
   */
  folioActivityResponseDetailsInfo?: FolioActivityResponseDetailsType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details of response for the Fiscal Folio Activity made. */
export interface FolioActivityResponseDetailsType {
  /**
   * Business Date.
   * @format date
   * @maxLength 8
   */
  businessDate?: string;
  /** Type of the response, possible values: ERROR, WARNING, RESPONSE. */
  responseType?: string;
  /** Name of the response element. */
  responseName?: string;
  /** Value of the response element. */
  responseValue?: string;
  /** Number of fiscal response attempt made for the folio */
  responseAttemptNo?: number;
}

/** Request to generate fiscal Information folio. */
export interface FiscalInfoFolioCriteria {
  /** Criteria for generating fiscal folio information. */
  criteria?: FiscalInfoFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for calling fiscal Info type folio service */
export interface FiscalInfoFolioCriteriaType {
  /**
   * Property where the Folio History exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Type of fiscal folio operation. */
  folioCommand?: FolioCommandType;
  /** Folio History details. */
  folios?: FolioSummaryType;
}

/** Contains Folio Details including payee information and the reservation which it's attached to. */
export interface FolioSummaryType {
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /** Payee information for the folio. */
  payeeInfo?: PayeeInfoType;
  /** Folio gross amount. */
  folioAmount?: CurrencyAmountType;
  /** Flag to check Folio Conversion Allowed. */
  allowConvertFolioYn?: boolean;
  /** Flag to check Folio generated from Acoount Receivables. */
  accountReceivablesFolio?: boolean;
  /** Flag to indicate if an Official Receipt is generated for the folio window. Applicable only in the Philippines. */
  officialBIRReceiptExists?: boolean;
  /** Bill Payment transaction Number. */
  paymentTrxNo?: number;
  /** ReservationID to which this record applies. */
  reservationInfo?: {
    /** ReservationID to which this record applies. */
    reservationId?: number;
    /**
     * Room Number to which this record applies.
     * @minLength 0
     * @maxLength 20
     */
    room?: string;
    /** Guest Name ID */
    nameId?: UniqueIDType;
    /**
     * Guest Name
     * @minLength 0
     * @maxLength 200
     */
    guestName?: string;
    /**
     * Guest Alternate Last and First Name
     * @minLength 0
     * @maxLength 200
     */
    altName?: string;
  };
  /** Number for Post-It transactions. */
  postItNo?: number;
  /**
   * Bill Number.
   * @maxItems 4000
   */
  associatedBills?: string[];
  /** Account Code. */
  accountCode?: number;
  /** Payment Posting for the folio. */
  payment?: SummaryPostingType;
  /** Addressee Information for the Folio. This is available when the Addressee functionality is used and and Addressee is attached to the folio. */
  addresseeInfo?: ProfileInfoType;
  /** Exchange Rate information selected to be used by the Fiscal Service. */
  fiscalInvoicingCurrencyInfo?: ExchangeRateInfoType;
  /** Indicates if this folio is linked to an anonymized Guest/Payee/Addressee. */
  anonymizedFolio?: boolean;
  /**
   * Custom Number.
   * @maxItems 5
   */
  customNumbers?: string[];
  /** Opera Fiscal Folio Status for the Folio. */
  operaFiscalFolioStatus?: string;
  /** Stores the fiscal folio status for the partner system. */
  partnerFiscalFolioStatus?: string;
  /**
   * Contains service type for transaction code.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /**
   * The starting value of the date range.
   * @format date
   * @maxLength 8
   */
  start?: string;
  /**
   * The ending value of the date range.
   * @format date
   * @maxLength 8
   */
  end?: string;
  /** Folio Revision number. */
  revisionNo?: number;
  folioWindowNo?: number;
  /**
   * Bill Number returned by the Fiscal Printer.
   * @minLength 0
   * @maxLength 40
   */
  fiscalFolioNo?: string;
  /** Folio Number. */
  folioNo?: number;
  /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
  invoiceNo?: number;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /**
   * Date of Folio Generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
  folioStatus?: FolioStatusType;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Unique sequence number. Used to identify the current folio tax record. */
  folioSeqNo?: number;
  /**
   * Folio Queue name.
   * @minLength 0
   * @maxLength 2000
   */
  queueName?: string;
  /** Fiscal folio flag to call fiscal Information folio web service. */
  generateFiscalFolio?: boolean;
}

/** Existing Operations Responses will eventually be modified to be extended from this type. */
export interface FiscalInformationFolio {
  /**
   * Provides information which is used for fiscal response processing.
   * @maxItems 4000
   */
  fiscalResponseList?: FiscalResponseType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Check if it will call fiscal or not. */
export interface FiscalCallStatus {
  /** Flag which contains if its valid or not. */
  isValid?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to convert folio from a Non Fiscal Folio type to a Fiscal Folio Type. Functionality is used in Italy and is only available when the country mode is set to Italy. */
export interface ConvertFolioCriteria {
  /** Criteria to Convert a Folio from a Non Fiscal Type to a Fiscal Type. */
  criteria?: ConvertFolioType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for Converting Folio. */
export interface ConvertFolioType {
  /**
   * Hotel code where this folio was generated at.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Folio number of the Folio which is going to be converted. */
  folioNo?: number;
  /**
   * Folio Type of the folio(Example: Ricevuta, Fattura).
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Date of folio generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response to the request to Convert Folio. Includes the new converted folio information. */
export interface ConvertFolioDetails {
  /** Converted Folio Information. */
  folio?: FolioType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for the fetch Folio History. */
export interface FolioHistoryResponse {
  /** List of Folio History. */
  folioHistory?: FoliosType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Folio History details.
 * @maxItems 4000
 */
export type FoliosType = FolioSummaryType[];

/** Response to the request to fetch the Folio Printers applicable for a Folio, based on the */
export interface FolioPrinters {
  /** List of Printers which are applicable for this Folio. */
  printers?: FolioPrintersType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** List of Folio Printers. */
export interface FolioPrintersType {
  /**
   * Name of the Folio Type.
   * @minLength 0
   * @maxLength 200
   */
  folioTypeName?: string;
  /**
   * Folio Printer Information.
   * @maxItems 4000
   */
  printer?: FolioPrinterType[];
}

/** Information about a Printer which can be used to print a Folio. */
export interface FolioPrinterType {
  /**
   * Description of the Printer
   * @minLength 0
   * @maxLength 2000
   */
  printerName?: string;
  /**
   * The Printer Device name.
   * @minLength 0
   * @maxLength 200
   */
  device?: string;
  /**
   * The Folio Type for which this printer is being used.
   * @minLength 0
   * @maxLength 2000
   */
  folioType?: string;
  /**
   * Folio Queue name for which this printer is being used.
   * @minLength 0
   * @maxLength 2000
   */
  folioQueueName?: string;
}

/** Response for the fetch Folio Type Information. */
export interface FolioTypeNameInfo {
  /** Information regarding the Folio Type. */
  details?: FolioTypeNameInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details of a Folio Type configuration. */
export interface FolioTypeNameInfoType {
  /**
   * Property where the Folio Type exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The Folio Type.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * The report name which should be used as the Folio for printing.
   * @minLength 0
   * @maxLength 100
   */
  folioReportName?: string;
  /** The internal report ID of the Folio report which is to be used. */
  folioReportModuleId?: UniqueIDType;
  /**
   * The Language Code for which the folio is effective.
   * @minLength 0
   * @maxLength 20
   */
  folioLanguageCode?: string;
}

/** Information regarding the Folio Types. */
export interface FolioTypesInfo {
  folioInfo?: FolioTypesInfoType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Folio Types details. */
export interface FolioTypesInfoType {
  /**
   * Folio Type.
   * @minLength 0
   * @maxLength 20
   */
  folioType?: string;
  /** Fiscal Folio indicator. */
  fiscal?: boolean;
  /** Indicates folio to be use for compress bills. */
  compress?: boolean;
  /** Indicates folio type can be used for Credit bills. */
  credit?: boolean;
  /** Adding this flag at folio type level would decide to send fiscal folio (generate payload) or not. */
  sendFiscalFolio?: boolean;
}

/** The request object to process fiscal retry functionality. */
export interface ProcessFiscalRetry {
  /** Criteria to call the fiscal service again. */
  criteria?: FiscalRetryType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Generate Fiscal Folio Retry Criteria type to be used for fiscal folio generation */
export interface FiscalRetryType {
  /**
   * Hotel where the transaction belongs.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Fiscal Folio sequence ID stored in queue table. */
  folioSeqId?: number;
  /** Different modes to perform void folio. */
  voidFolioModes?: VoidFolioModes;
  /** Defines the action of the retrival process. */
  fiscalFolioInstruction?: FiscalFolioInstruction;
}

/** Different modes to perform void folio. */
export enum VoidFolioModes {
  Invoice = 'Invoice',
  InfoFolio = 'InfoFolio',
  CreditFolio = 'CreditFolio',
  DepositFolio = 'DepositFolio',
  PostIt = 'PostIt',
  PasserBy = 'PasserBy',
  VoidFolio = 'VoidFolio',
  SupplementalFolio = 'SupplementalFolio',
  SendFiscalFolio = 'SendFiscalFolio',
  ResendFolio = 'ResendFolio',
}

/** The response object to send back the fiscal service response to opera. */
export interface ProcessFiscalRetryStatus {
  /** Fiscal Folio sequence ID stored in queue table. */
  folioSeqId?: number;
  /** Indicating if it is last trial for fiscal printing. */
  isLastRetry?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response type for Complimentary Bucket Redemptions retrieval. */
export interface CompRedemptions {
  /** Collection of Complimentary Bucket Redemptions. */
  compRedemptions?: CompRedemptionsType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to post a set of charges, payments and generate a bill for a PasserBy or for the Post-It functionality . A PasserBy is someone who is not staying at the Property. A PasserBy transaction requires a Profile in Opera for whom the the folio is being created. */
export interface PasserBySalesCriteria {
  /** Criteria for posting the Sale. */
  criteria?: PasserByCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for posting charges. */
export interface PasserByCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /**
   * The payment information to be posted.
   * @maxItems 4000
   */
  payments?: PaymentCriteriaType[];
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Custom Folio Name Value Informatoin to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /**
   * Transaction service type which the Folio is being associated.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** The Profile ID of the PasserBy. If the sale is not a Post-It Sale, then a Profile ID is required. */
  profileId?: ProfileId;
}

/** Details of the folio created. */
export interface PasserBySale {
  folioWindowDetails?: FolioWindowType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to validate and change Payee Tax Number. */
export interface PayeeTaxNumber {
  /** Criteria to validate and change Payee Tax Number. */
  criteria?: ChangePayeeTaxNumberCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria to validate and change payee tax number. */
export interface ChangePayeeTaxNumberCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Opera name id of the payee. */
  payeeId?: UniqueIDType;
  /**
   * Payee Tax Number.
   * @minLength 0
   * @maxLength 40
   */
  taxNumber?: string;
  /** Flag to ignore warnings while updating a payee folio tax number. */
  ignoreWarnings?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request to attach an existing Deposit Policy on a reservation towards an existing deposit payment on the same reservation. */
export interface AttachPolicyApplyCriteria {
  /** Criteria for applying a policy to an existing deposit payment. */
  criteria?: PolicyApplyCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for Attaching or Detaching a Deposit Policy towards a Deposit payment. */
export interface PolicyApplyCriteriaType {
  /**
   * Property where the deposit exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Deposit Policy Id of the policy which would be attached to the payment. */
  policyId?: UniqueIDType;
  /** The transaction number of the payment to which the Deposit policy is being attached or detached. */
  transactionNo?: number;
}

/** Response object to fetch daily summary charges from Opera which are posted in Opera by external system. */
export interface PostingSummaryList {
  /** List of Summary of total postings in Opera. */
  postingSummaries?: PostingSummaryListType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Summary of the postings by external system.
 * @maxItems 4000
 */
export type PostingSummaryListType = PostingSummaryType[];

/** summary of the postings by external system. */
export interface PostingSummaryType {
  /** Total count of postings. */
  totalPostings?: number;
  /** Total Amount Posted. */
  totalAmount?: CurrencyAmountType;
  /** Total count of checks posted. */
  totalCheckCount?: number;
}

/** Request type for prepaid card creation/reload/redeem/removal process */
export interface PrepaidCardCriteria {
  /** Criteria for creation/reload/redeem/removal of prepaid cards. */
  criteria?: PrepaidCardCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Holds fixed charge information. */
export interface PrepaidCardCriteriaType {
  /**
   * Hotel context for the Reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The unique ID of the reservation to which this record applies. */
  reservationId?: ReservationId;
  /**
   * Family name, last name or Company Name.
   * @minLength 0
   * @maxLength 80
   */
  name?: string;
  /**
   * Given name, first name or names.
   * @minLength 0
   * @maxLength 80
   */
  firstName?: string;
  /** Card / Account holder name ID */
  profileId?: ProfileId;
  /**
   * Prepaid card / account number.
   * @minLength 0
   * @maxLength 80
   */
  cardNo?: string;
  /**
   * Masked Prepaid card / account number.
   * @minLength 0
   * @maxLength 80
   */
  cardNumberMasked?: string;
  /** Prepaid Card Amount. */
  amount?: CurrencyAmountType;
  /**
   * Prepaid card pin code.
   * @minLength 0
   * @maxLength 10
   */
  pinCode?: string;
  /** The unique ID for the Interface. */
  interfaceId?: UniqueIDType;
  /** Prepaid Card details from vendor. */
  cardDetails?: PrepaidCardDetailsType;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
  /** Indicates a gift card type. */
  giftCard?: boolean;
  postChargeToRoom?: boolean;
  /** Criteria type for posting charges. */
  saleCriteria?: SaleCriteriaType;
  vendorInterfaceID?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Prepaid Card Details. */
export interface PrepaidCardDetailsType {
  /**
   * Holds fixed charge detail.
   * @format date
   * @maxLength 8
   */
  initialLoadDate?: string;
  /**
   * Holds fixed charge detail.
   * @format date
   * @maxLength 8
   */
  activateDate?: string;
  /** Holds fixed charge detail. */
  initialCreditTotal?: CurrencyAmountType;
  /** Holds fixed charge detail. */
  creditTotal?: CurrencyAmountType;
  /** Holds fixed charge detail. */
  debitTotal?: CurrencyAmountType;
  /** Holds fixed charge detail. */
  reservedTotal?: CurrencyAmountType;
  /** Holds fixed charge detail. */
  balanceTotal?: CurrencyAmountType;
  /**
   * Holds fixed charge detail.
   * @format date
   * @maxLength 8
   */
  validUntilDate?: string;
  /**
   * Holds fixed charge detail.
   * @format date
   * @maxLength 8
   */
  expiredDate?: string;
  /**
   * Holds fixed charge detail.
   * @maxItems 4000
   */
  transactions?: PrepaidCardTransactionType[];
}

/** Prepaid Card transaction. */
export interface PrepaidCardTransactionType {
  /** Transaction type enumeration. */
  transactionType?: PrepaidCardTrxTypeType;
  /**
   * Transaction number of the Prepaid card transaction.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /** Transaction number of the Prepaid card transaction. */
  transactionNo?: number;
  /** Prepaid Card Amount. */
  amount?: CurrencyAmountType;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** Reload transaction. */
export enum PrepaidCardTrxTypeType {
  Activate = 'Activate',
  Cancel = 'Cancel',
  Cashout = 'Cashout',
  Inquiry = 'Inquiry',
  Issue = 'Issue',
  Redeem = 'Redeem',
  Reload = 'Reload',
}

/** Request type for activate prepaid card. */
export interface ActivatePrepaidCard {
  /** Prepaid card criteria type used to perform manage operation on the card. */
  criteria?: {
    /**
     * Hotel code.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /**
     * Prepaid card number.
     * @minLength 0
     * @maxLength 80
     */
    cardNo?: string;
    /** The unique ID for the Interface. */
    interfaceId?: UniqueIDType;
    /** The guest name id associated to the card. */
    profileId?: UniqueIDType;
    /** The reservation name id where the transaction is associated. */
    reservationId?: UniqueIDType;
    /**
     * PIN code associated for the prepaid card.
     * @minLength 0
     * @maxLength 80
     */
    pin?: string;
    /** Prepaid card transaction amount. */
    amount?: CurrencyAmountType;
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
    /** Indicate that charges will be posted to the room. */
    postChargeToRoom?: boolean;
    /** Represent the sale criteria. */
    saleCriteria?: SaleCriteriaType;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface ActivatePrepaidCardStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type for cancel prepaid card transaction. */
export interface CancelPrepaidCardTransaction {
  /** Prepaid card criteria type used to perform manage operation on the card. */
  criteria?: {
    /**
     * Hotel code.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /**
     * Prepaid card number.
     * @minLength 0
     * @maxLength 80
     */
    cardNo?: string;
    /** The unique ID for the Interface. */
    interfaceId?: UniqueIDType;
    /** The guest name id associated to the card. */
    profileId?: UniqueIDType;
    /** The reservation name id where the transaction is associated. */
    reservationId?: UniqueIDType;
    /**
     * PIN code associated for the prepaid card.
     * @minLength 0
     * @maxLength 80
     */
    pin?: string;
    /** Prepaid card transaction amount. */
    amount?: CurrencyAmountType;
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
    /** The vendor transaction number associated with prepaid card transaction. */
    vendorTransactionNo?: StringLength100;
    /** The opera transaction number associated with prepaid card transaction. */
    transactionNo?: number;
    /** The transaction type of a given transaction. */
    transactionTye?: PrepaidCardTrxTypeType;
    /** Indicate that charges will be posted to the room. */
    postChargeToRoom?: boolean;
    /** Represent the sale criteria. */
    saleCriteria?: SaleCriteriaType;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Used for Character Strings, length 0 to 100.
 * @minLength 0
 * @maxLength 100
 */
export type StringLength100 = string;

export interface CancelPrepaidCardTransactionStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type for cashout prepaid card. */
export interface CashOutPrepaidCard {
  /** Prepaid card criteria type used to perform manage operation on the card. */
  criteria?: {
    /**
     * Hotel code.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /**
     * Prepaid card number.
     * @minLength 0
     * @maxLength 80
     */
    cardNo?: string;
    /** The unique ID for the Interface. */
    interfaceId?: UniqueIDType;
    /** The guest name id associated to the card. */
    profileId?: UniqueIDType;
    /** The reservation name id where the transaction is associated. */
    reservationId?: UniqueIDType;
    /**
     * PIN code associated for the prepaid card.
     * @minLength 0
     * @maxLength 80
     */
    pin?: string;
    /** Prepaid card transaction amount. */
    amount?: CurrencyAmountType;
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
    /** Indicate that charges will be posted to the room. */
    postChargeToRoom?: boolean;
    /** Represent the sale criteria. */
    saleCriteria?: SaleCriteriaType;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface CashOutPrepaidCardStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type for reload prepaid card. */
export interface ReloadPrepaidCard {
  /** Prepaid card criteria type used to perform manage operation on the card. */
  criteria?: {
    /**
     * Hotel code.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /**
     * Prepaid card number.
     * @minLength 0
     * @maxLength 80
     */
    cardNo?: string;
    /** The unique ID for the Interface. */
    interfaceId?: UniqueIDType;
    /** The guest name id associated to the card. */
    profileId?: UniqueIDType;
    /** The reservation name id where the transaction is associated. */
    reservationId?: UniqueIDType;
    /**
     * PIN code associated for the prepaid card.
     * @minLength 0
     * @maxLength 80
     */
    pin?: string;
    /** Prepaid card transaction amount. */
    amount?: CurrencyAmountType;
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
    /** Indicate that charges will be posted to the room. */
    postChargeToRoom?: boolean;
    /** Represent the sale criteria. */
    saleCriteria?: SaleCriteriaType;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface ReloadPrepaidCardStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request for a credit card authorization. An authorization request will be sent to the Credit Card Vendor as part of this request. */
export interface CcAuthorizationCriteria {
  /** Criteria for the credit card authorization. */
  criteria?: CCAuthorizationCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Contains the credit card criteria for authorization. */
export interface CCAuthorizationCriteriaType {
  /**
   * Identifies the hotel code to authorize a credit card amount for.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Identifies the reservation to authorize a credit card amount for. */
  reservationId?: UniqueIDType;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  profileId?: ProfileId;
  /** The amount to authorize. */
  amount?: CurrencyAmountType;
  /** The folio window where this authorization is applied. */
  folioView?: number;
  /** Details of the payment card to which the authorization is to be applied. If this card does not exist on the reservation, it will not be added to the reservation. */
  payment?: CashieringPaymentMethodType;
  /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected. */
  terminalId?: string;
  /** The incidental part of the amount to authorize. */
  incidentalAmount?: CurrencyAmountType;
  /** Flag to indicate if the approval amount should be calculated before authorization. If this is true and if the amount is 0 the approval amount will be calculated based on the rules. */
  evaluateApprovalAmount?: boolean;
  /** Source of the authorization. */
  sourceOfAuthorization?: CardAuthorizationTransactionType;
  /** Update the card details on the reservations for Chip and Pin Authorizations. */
  updateReservation?: boolean;
  /**
   * Session Id registered in the WebSocket component for asynchronous Credit Card handling.
   * @minLength 0
   * @maxLength 100
   */
  ccRequestId?: string;
}

/** Response to the credit card authorization request. */
export interface AuthorizationInfo {
  /** Information regarding the authorization done. */
  authInfo?: AuthorizationInfoType;
  /** Details of the payment card to which the authorization was applied. The payment details would be returned in the case of Chip and Pin cards. For non chip and pin cards, only the authorization will be returned. */
  payment?: CashieringPaymentMethodType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response to the fetch authorization instructions. Based on the criteria requested, the response can contain information required to send a credit card authorization to the Vendor. */
export interface CcAuthorizationInstructions {
  /** Contains the details to use for a credit card authorization. */
  details?: CCAuthorizationInstructionType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Contains the details to use for a credit card authorization. */
export interface CCAuthorizationInstructionType {
  /** The current amount to authorize as part of this transaction. */
  currentApprovalAmount?: CurrencyAmountType;
  /** The total amount authorized(including the current amount). */
  totalApprovalAmount?: CurrencyAmountType;
  /** The incidental amount. */
  incidentalAmount?: CurrencyAmountType;
  /** Indicates the Credit Card EFT payment method authorization rules setup. */
  authorizationSetup?: {
    /** Indicates if authorization at Check In is allowed for this payment method. False will indicate that no authorization will be done at Check In for this payment method. */
    checkIn?: boolean;
    /** Indicates if authorization during the stay of the guest is allowed for this payment method. False will indicate that no authorization will be done during the stay and prior to settlements for this payment method. The settlement request will be sent without an authorization request. */
    stay?: boolean;
    /** Indicates if authorization at Deposit is allowed for this payment method. False will indicate that no authorization will be done at the time of deposit payments, for this payment method. The settlement request will be sent without an authorization request. */
    deposit?: boolean;
    /** Indicates if this payment method is setup as a PayOnly, which does not require authorization to be done prior to settlement. The special settlement handling will take care of both Authorization and Settlement together. */
    payOnly?: boolean;
  };
  /** Reservation Details required for the authorization. The details returned are Hotel Code, Reservation Id, Guest Name, Arrival Date, Departure Date, Create Date,Room , Reservation Balance and Payment Information. */
  reservationDetail?: ReservationInfoType;
  paymentMethodInfo?: ReservationPaymentMethodType;
  /**
   * Unique sequence for this authorization.
   * @minLength 0
   * @maxLength 200
   */
  sequenceNumber?: string;
  /**
   * Transaction type of the authorization(INIT or SUPP).
   * @minLength 0
   * @maxLength 40
   */
  transactionType?: string;
  /** Unique Authorization Sequence for the authorization and settlement. */
  originalAuthSequence?: number;
  /**
   * Usage type used.
   * @minLength 0
   * @maxLength 20
   */
  usageType?: string;
  /**
   * Vendor transaction id for the authorization.
   * @minLength 0
   * @maxLength 20
   */
  vendorTranId?: string;
  /** Flag to indicate if initial authorization required. */
  initialAuthorizationRequired?: boolean;
  /**
   * The current date of the Property.
   * @format date
   * @maxLength 8
   */
  businessDate?: string;
}

/** Response for the fetch Receipt History. */
export interface ReceiptHistoryResponse {
  /** List of Receipt History. */
  receiptHistory?: ReceiptsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Receipt History details.
 * @maxItems 4000
 */
export type ReceiptsType = ReceiptSummaryType[];

/** Request to check if a Rate Code can be posted to the room manually. This will check if the Rate Code is valid, if the Products(Packages) which are defined as part of the Rate Code can be posted or reversed. */
export interface PostRateCodeCriteria {
  /** Information on the Rate Code and reservation where it should be posted. */
  criteria?: PostRateCodeCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for posting a Rate Code amount to a guest folio. */
export interface PostRateCodeCriteriaType {
  /**
   * Hotel context for the Reservation.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation e */
  reservationId?: ReservationId;
  /**
   * The Rate Code which is to be posted on the Guest Folio.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /** Price of the Rate Code. */
  price?: CurrencyAmountType;
  /** Posting quantity. */
  quantity?: number;
  /** Holds the guest counts(adults or children) for posting the Rate Code to the reservation. */
  guestCounts?: GuestCountsType;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /** Number of nights to post the Rate Code for. Used for Comp Accounting. */
  nights?: number;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /**
   * Adjustment code to be used for the manual posting of rate code.
   * @minLength 0
   * @maxLength 20
   */
  adjustmentCode?: string;
  /**
   * Revenue Date or the business date of the posting.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The linked transaction number for this Posting of Rate Code. */
  parentTrxNo?: number;
  /** Flag to indicate if Products(Packages) which are part of the Rate Code should be posted as part of this operation. If products are not required, the entire amount will be posted towards the room element of the Rate Code. */
  postProducts?: boolean;
  folioWindowNo?: number;
  /** The Cashier who is posting. */
  cashierId?: CashierId;
}

/** A collection of GuestCount by age group. */
export interface GuestCountsType {
  /** Defines Children's Ages. Number of children ages mentioned may mot match with children counts. */
  childAges?: ChildAgesType;
  /** Defines children counts with Age Qualifying Group(Child Bucket#1) classification. */
  childBuckets?: ChildBucketsType;
  /** Defines the number of Adults. */
  adults?: number;
  /** Defines the number of Children. */
  children?: number;
}

/**
 * Age of a child in years.
 * @maxItems 4000
 */
export type ChildAgesType = ChildAgeType[];

/** Defines Child's Age. */
export interface ChildAgeType {
  /** Age of a child in years. */
  age?: number;
}

/** Defines children counts with Age Qualifying Group(Child Bucket) classification. */
export interface ChildBucketsType {
  /** Number of children classified under the first Age Qualifying Group(Child Bucket#1). */
  bucket1Count?: number;
  /** Number of children classified under the second Age Qualifying Group(Child Bucket#2). */
  bucket2Count?: number;
  /** Number of children classified under the third Age Qualifying Group(Child Bucket#3). */
  bucket3Count?: number;
  /** Number of children classified under the fourth Age Qualifying Group(Child Bucket#4). */
  bucket4Count?: number;
  /** Number of children classified under the fifth Age Qualifying Group(Child Bucket#5). */
  bucket5Count?: number;
}

/** Response for the operation that posts a Rate Code amount on the reservation. */
export interface PostedRateCode {
  /** The postings which were made as part of the operation. */
  postings?: SummaryPostingsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for the request to check if a Rate Code can be posted to a reservation . */
export interface CheckedRateCode {
  /** Includes flags to indicate if Products(Packages) are included in the Rate Code and if Products(Packages) can be posted or reversed. */
  checks?: PostRateCodeCheckType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** The response type for Checks done before Posting a Rate Code amount to a reservation. */
export interface PostRateCodeCheckType {
  /** Indicates that the Rate Code has Products(Packages) for the user to determine if they should be posted. */
  rateCodeHasProducts?: boolean;
  /** Indicates that the Products(Packages) which are included in the Rate Code cannot be posted as part of this transaction. This could be the case where the reservation is an Open Folio or has Post Stay. */
  canPostProducts?: boolean;
  /** Indicates that the Products(Packages) which are included in the Rate Code cannot be reversed as part of this transaction. This could be the case when the reservation has consumed the allowance already and is now trying to reverse the Rate Code by using a negative quantity. */
  canReverseProducts?: boolean;
}

/** Operation to post billing charge to list of reservations. */
export interface BillingChargesInBatchCriteria {
  /** Information regarding the Rate Code and reservation to which the rate amount should be posted. */
  criteria?: PostBillingChargesInBatchCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for posting charges. */
export interface PostBillingChargesInBatchCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /** Unique identifier for a reservation. */
  reservations?: Reservations;
}

/** Operation response to post billing charge with list of reservations. */
export interface PostedBillingChargesInBatch {
  /**
   * Information regarding charges in batch result for each reservation.
   * @maxItems 4000
   */
  reservationBatchChargeInfoList?: ReservationChargesInBatchInfoType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Result of charges in batch for each reservation. */
export interface ReservationChargesInBatchInfoType {
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /**
   * Arrival date of the reservation.
   * @format date-time
   */
  arrivalDate?: string;
  /**
   * Departure date of the reservation.
   * @format date-time
   */
  departureDate?: string;
  /**
   * Guest name associated to the reservation.
   * @minLength 0
   * @maxLength 200
   */
  guestName?: string;
  /**
   * Room number associated to the reservation.
   * @minLength 0
   * @maxLength 20
   */
  roomId?: string;
  /** Indicator that tells whether posting is allowed for the reservation */
  postingAllowed?: boolean;
  /** Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors. */
  success?: SuccessType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
  /** An error that occurred during the processing of a message. */
  errors?: ErrorsType;
}

/** Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors. */
export type SuccessType = object;

/**
 * An error that occurred during the processing of a message.
 * @maxItems 99
 */
export type ErrorsType = ErrorType[];

/** Response for credit card settlements. */
export interface CcBatchSettlements {
  /** List of credit card transaction. */
  batchSettlements?: CCBatchSettlementsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of Settlement transaction details for credit card transaction.
 * @maxItems 4000
 */
export type CCBatchSettlementsType = CCBatchSettlementType[];

/** Response object containing additional tax information. */
export interface AdditionalTaxesDetails {
  /** Tax amount to be adjusted. */
  taxAmountInfo?: TaxAmountInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Tax amount to be adjusted for the guest */
export interface TaxAmountInfoType {
  /** Amount to be adjusted for the guest. */
  amount?: CurrencyAmountType;
}

/** Response for the advance payment balance. */
export interface AdvancePaymentBalance {
  /** Advance payment balance. */
  paymentBalance?: CurrencyAmountType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to post the Room Charges for a reservation in advance. This request posts the Room Charges for a reservation for tonight or for many nights starting from the last posted night. This can also be used to verify if the reservation has already been charged for the full stay. Setting the Verify flag will return details regarding the last Room Charge posted date and if there are any available dates for which the room charges can be posted in advance. Room Charges cannot be posted for dates prior to the business date of the resort. To make the actual posting, the verification flag should be false. */
export interface AdvanceRoomCharges {
  /** Criteria for creating the advance folio. Includes information regarding the reservation(s) for which the advance bill is to be generated and the nights for which the postings have to be created. */
  criteria?: AdvanceRoomChargesCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Type to set the criteria for generation of advance folios. This will post the room and tax transactions for the nights requested. */
export interface AdvanceRoomChargesCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id for which the advance bill will be generated. */
  reservationIdList?: ReservationIdList;
  /** Indicates if the posting of room charges have to be done for the entire stay. */
  postForEntireStay?: boolean;
  /**
   * Indicates the last date until which the Advance Room Charges have to be posted.
   * @format date
   * @maxLength 8
   */
  endDateToCharge?: string;
  /** Flag to indicate if only a verification is required. This checks if advance bills have been generated for this reservation and returns the last date in the response. Setting this flag to true, will return the information for the below elements in the response: AvailablePostingDates, GeneratedForEntireStay, LastRoomAndTaxPostedDate and the Reservation Information. No posting will be done. In order for the actual posting to occur this flag should be false. */
  verifyOnly?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response for the generate advance folio request. Post Advance Room Charges Request can return the below error codes : FOF00065 - Reservation ID or Resort was not supplied. FOF00147 - Reservation is currently not In-House. FOF00148 - Date range requested is not valid. FOF00149 - Advance Room Charges Posting was not completed successfully as there was an Error during posting. FOF00150 - Room Charges have already been posted for the requested dates. FOF00151 - Advance Room Charges could not be completed {the error message if any}. */
export interface AdvanceRoomChargesReservationInfo {
  /** Reservation id for which the advance bill information is requested. */
  reservationInfo?: AdvanceRoomChargesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface AdvanceRoomChargesInfoType {
  /** The Time Span for which the Advance Room Charges can be done. */
  availablePostingDates?: TimeSpanType;
  /** Reservation id for which the advance bill information is requested. */
  reservation?: ReservationInfoType;
  /** Indicates if the advance folio has been generated for the entire stay. */
  generatedForEntireStay?: boolean;
  /**
   * Indicates the date of the stay until which the advance bill has been generated .
   * @format date
   * @maxLength 8
   */
  lastRoomAndTaxPostedDate?: string;
}

/** Response with the fetched alerts, includes global alerts. */
export interface AlertNotices {
  /** The Alert information returned as per the request. */
  alerts?: AlertsType;
  /** List of Notes for the Guest related to the reservation. */
  comments?: CommentInfoType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of alerts.
 * @maxItems 4000
 */
export type AlertsType = AlertType[];

export interface AlertType {
  /**
   * Code identifying the type of alert.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /** Indicate whether the alert is a global that is automatically and dynamically attached to all reservations that meet the alert criteria. */
  global?: boolean;
  /** The Area where the alert will be attached and shown. */
  area?: AlertAreaType;
  /** The alert message. */
  description?: string;
  /** Notify by showing the alert on the screen */
  screenNotification?: boolean;
  /** Notify by sending the message to the printer. */
  printerNotification?: boolean;
  /** Printer used to print the alert notification. */
  printerName?: string;
  /** The module id of the report. This is used to printer the alert. */
  reportId?: UniqueIDType;
  /** Report name of the report type. */
  reportName?: string;
  /**
   * Report description. Mainly used for as a parameter for printing the alerts.
   * @minLength 0
   * @maxLength 1000
   */
  reportDescription?: string;
  /** Contains information regarding the guest. */
  guestInfo?: AlertGuestInfoType;
  /** Collections of user defined fields. */
  userDefinedFields?: UserDefinedFieldsType;
  /** Contains information regarding welcome offer. */
  welcomeOffer?: WelcomeOfferType;
  /** Indicates the Reservation Stop Check In/Check Out Global Alert. */
  stopCheckInCheckOut?: boolean;
  /** URL that identifies the location associated with the record identified by the UniqueID. */
  url?: string;
  /**
   * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
   * @minLength 0
   * @maxLength 80
   */
  instance?: string;
  /**
   * Used to identify the source of the identifier (e.g., IATA, ABTA).
   * @minLength 0
   * @maxLength 80
   */
  idContext?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /** Additional identifying value assigned by the creating system. */
  idExtension?: number;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

export enum AlertAreaType {
  CheckIn = 'CheckIn',
  CheckOut = 'CheckOut',
  Reservation = 'Reservation',
  Billing = 'Billing',
  InHouse = 'InHouse',
}

export interface AlertGuestInfoType {
  /**
   * Guest Name.
   * @minLength 0
   * @maxLength 200
   */
  guestName?: string;
  /** Membership information of the guest. */
  membership?: MembershipType;
  /** VIP status of the guest. */
  vipStatus?: VIPStatusType;
  /**
   * Hotel code of the last stay location of the guest.
   * @minLength 0
   * @maxLength 20
   */
  lastHotelCode?: string;
  /**
   * Last stay date at the property.
   * @format date
   * @maxLength 8
   */
  lastStayDate?: string;
  /** Holds total number of days that the guest have stayed in the property. */
  totalStay?: number;
  /** Additional alert information regarding the membership of the guest. */
  comments?: string;
  /** Additional alert information regarding the guest. */
  preference?: string;
  /** Additional mandatory alert information regarding the guest preferences. */
  preference2?: string;
  /** Holds the language preferred by the guest. */
  guestPreferredLanguage?: LanguageType;
  /** Holds total number of days that the guest have stayed in the properties for the same brand. */
  totalBrandStay?: number;
  /**
   * Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
   * @format date
   * @maxLength 8
   */
  birthDate?: string;
  /** Indicates the date of birth as masked. */
  birthDateMasked?: string;
}

/** Detailed information of the memberships. */
export interface MembershipType {
  /** Additional comments regarding to the membership. */
  comment?: ParagraphType;
  /** Card Number of the membership. */
  newMembershipNumber?: string;
  /** Name to be displayed on the membership card. */
  nameOnCard?: string;
  /** Description of the membership program. */
  programDescription?: string;
  /** Indicates the membership level. */
  membershipLevel?: string;
  /**
   * Indicates the membership level description.
   * @minLength 0
   * @maxLength 200
   */
  membershipLevelDescription?: string;
  /** Indicates the membership class. */
  membershipClass?: string;
  /** Earning preference to the membership. */
  earningPreference?: MembershipEarningPreferenceType;
  /** Indicates whether membership is active or inactive. */
  inactive?: boolean;
  /** benefits for the membership. */
  benefits?: BenefitsType;
  /** Defines the degree of participation for this membership in the tier management portion of the program. */
  tierAdministration?: TierAdministrationType;
  /** Defines how downgrading will be handled for this membership. */
  downgrade?: DowngradeType;
  /** The status of issuing new membership card to the member. */
  reIssueNewCard?: CardReIssueType;
  /** True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false. */
  excludeFromBatch?: boolean;
  /**
   * Indicates Upgrade information which includes member's next tier level, requirements for the next upgrade.
   * @minLength 0
   * @maxLength 32000
   */
  upgradeDescription?: string;
  /**
   * Indicates information regarding the member's possible downgrades.
   * @minLength 0
   * @maxLength 32000
   */
  downgradeDescription?: string;
  /** Value Rating Type Description for this membership. */
  rating?: string;
  /**
   * Indicates how the guest enrolled in the program.
   * @minLength 0
   * @maxLength 20
   */
  membershipEnrollmentCode?: string;
  /**
   * Indicates where the guest is in the membership enrollment process.
   * @minLength 0
   * @maxLength 20
   */
  memberStatus?: string;
  /** Profile MemberShip Points. */
  currentPoints?: number;
  /**
   * Label used to refer to points for this membership type
   * @minLength 0
   * @maxLength 20
   */
  pointsLabel?: string;
  /**
   * Source from where the enrollment is done.
   * @minLength 0
   * @maxLength 20
   */
  enrollmentSource?: string;
  /**
   * Resort/CRO where enrollment is done.
   * @minLength 0
   * @maxLength 20
   */
  enrollmentResort?: string;
  /** Preferred Card. */
  preferredCard?: boolean;
  /** Card Number of the membership. */
  membershipId?: string;
  /** Type of membership. */
  membershipType?: string;
  /**
   * Indicator if Membership is a Primary Membership.
   * @minLength 0
   * @maxLength 1
   */
  primaryMembershipYn?: string;
  /** Boolean indicator set to True implies membership is a Primary Membership. */
  primaryMembership?: boolean;
  /** Membership ID Number. */
  membershipIdNo?: number;
  /** Ranking assigned to the Player Profile by the Gaming system. */
  playerRanking?: number;
  /** Indicates how the award points for this membership type will be managed. */
  centralSetup?: boolean;
  /**
   * Indicates when the member signed up for the loyalty program.
   * @format date
   * @maxLength 8
   */
  signupDate?: string;
  /**
   * Indicates the starting date.
   * @format date
   * @maxLength 8
   */
  effectiveDate?: string;
  /**
   * Indicates the ending date.
   * @format date
   * @maxLength 8
   */
  expireDate?: string;
  /** When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14). */
  expireDateExclusiveIndicator?: boolean;
  /** Display Order sequence. */
  orderSequence?: number;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** An indication of a new paragraph for a sub-section of a formatted text message. */
export interface ParagraphType {
  /** Formatted text content. */
  text?: FormattedTextTextType;
  /** An image for this paragraph. */
  image?: string;
  /** A URL for this paragraph. */
  url?: string;
}

/** Provides text and indicates whether it is formatted or not. */
export interface FormattedTextTextType {
  /** Property Value */
  value?: string;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
}

/** The earning preference of a membership, it depends on the type of property. eg. when the property is a airline it should be Miles, other than Points. */
export enum MembershipEarningPreferenceType {
  Points = 'Points',
  Miles = 'Miles',
}

/**
 * Basic information about membership benefit.
 * @maxItems 4000
 */
export type BenefitsType = BenefitType[];

/** Basic information about membership benefit. */
export interface BenefitType {
  /**
   * Benefit code associated with a membership.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * Processing message for membership benefit.
   * @minLength 0
   * @maxLength 4000
   */
  message?: string;
  /** Indicates whether membership benefit is active or inactive. */
  inactive?: boolean;
}

/** Do not upgrade membership. The membership may be downgraded. */
export enum TierAdministrationType {
  Disabled = 'Disabled',
  NoUpgrade = 'NoUpgrade',
}

/** Do not downgrade membership when the next downgrade process runs. When the downgrade process runs, the membership will be automatically set to Grace. */
export enum DowngradeType {
  Grace = 'Grace',
  Never = 'Never',
  Period = 'Period',
}

/** Request to re issue a new card. */
export enum CardReIssueType {
  Pending = 'Pending',
  NotApplicable = 'NotApplicable',
  Requested = 'Requested',
}

/** VIP status of the customer. */
export interface VIPStatusType {
  /**
   * Used for Character Strings, length 0 to 2000.
   * @minLength 0
   * @maxLength 2000
   */
  value?: string;
  /**
   * VIP status of the customer.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
}

/**
 * @minLength 0
 * @maxLength 40
 */
export type LanguageType = string;

/** A common type used to hold user defined fields(UDFs). This type should be used to handle UDFs on RReservation, Profiles, etc. */
export interface UserDefinedFieldsType {
  /** Collection of user defined fields of Character/String Type. */
  characterUDFs?: CharacterUDFsType;
  /** Collection of user defined fields of Numeric Type. */
  numericUDFs?: NumericUDFsType;
  /** Collection of user defined fields of Date Type. */
  dateUDFs?: DateUDFsType;
}

/**
 * Used to hold collection of user defined fields of Character/String Type.
 * @maxItems 4000
 */
export type CharacterUDFsType = CharacterUDFType[];

/** Used to hold user defined field of Character/String Type. */
export interface CharacterUDFType {
  /**
   * Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
   * @minLength 0
   * @maxLength 20
   */
  name?: string;
  /**
   * Value of user defined field.
   * @minLength 0
   * @maxLength 2000
   */
  value?: string;
  /**
   * Label of user defined field used by vendors or customers.
   * @minLength 0
   * @maxLength 2000
   */
  alternateName?: string;
}

/**
 * Used to hold collection of user defined fields of Numeric Type.
 * @maxItems 4000
 */
export type NumericUDFsType = NumericUDFType[];

/** Used to hold user defined field of Numeric Type. It is highly recommended to use UDFN01, UDFN02,...UDFN40 (Total 40) as Numeric UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required. */
export interface NumericUDFType {
  /**
   * Name of user defined field.
   * @minLength 0
   * @maxLength 20
   */
  name?: string;
  /** Value of user defined field. */
  value?: number;
  /**
   * Label of user defined field used by vendors or customers.
   * @minLength 0
   * @maxLength 2000
   */
  alternateName?: string;
}

/**
 * Used to hold collection of user defined fields of Date Type.
 * @maxItems 4000
 */
export type DateUDFsType = DateUDFType[];

/** Used to hold user defined field of Date Type. */
export interface DateUDFType {
  /**
   * Used to hold user defined field of Date Type. It is highly recommended to use UDFD01, UDFD02,...UDFN20 (Total 20) as Date UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
   * @minLength 0
   * @maxLength 20
   */
  name?: string;
  /**
   * Value of user defined field.
   * @format date
   * @maxLength 8
   */
  value?: string;
  /**
   * Label of user defined field used by vendors or customers.
   * @minLength 0
   * @maxLength 2000
   */
  alternateName?: string;
}

export interface WelcomeOfferType {
  /**
   * Determines the status of the welcome offer.
   * @minLength 0
   * @maxLength 20
   */
  status?: string;
  /** Determines the welcome offer option selected while availing the welcome offer. */
  type?: WelcomeOfferOptionsType;
}

/** None of the Welcome Offer option is selected. */
export enum WelcomeOfferOptionsType {
  BonusPoints = 'BonusPoints',
  Ecoupons = 'Ecoupons',
  Items = 'Items',
  PostIt = 'PostIt',
  NotSelected = 'NotSelected',
}

/** Comment related to the profile/reservation. */
export interface CommentInfoType {
  /** Comment details for the comment. It will be empty in case of delete comment. */
  comment?: CommentType;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /**
   * A reference to the type of object defined by the UniqueID element.
   * @minLength 0
   * @maxLength 40
   */
  type?: string;
}

/** An indication of a new paragraph for a sub-section of a formatted text message. */
export interface CommentType {
  /** Formatted text content. */
  text?: FormattedTextTextType;
  /** An image for this paragraph. */
  image?: string;
  /** A URL for this paragraph. */
  url?: string;
  /**
   * Specifies Comment's Title.
   * @minLength 0
   * @maxLength 4000
   */
  commentTitle?: string;
  /**
   * Notification Location associated with the Note.
   * @minLength 0
   * @maxLength 20
   */
  notificationLocation?: string;
  /**
   * Specifies type of the comment.
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * Comment type Description.
   * @minLength 0
   * @maxLength 200
   */
  typeDescription?: string;
  /** When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer. */
  internal?: boolean;
  /** When true, the comment may be confidential. */
  confidential?: boolean;
  /** When true, the note internal could be modified. */
  overrideInternal?: boolean;
  /** When true, the note title will be populated from the note type description and couldn't be modified. */
  protectDescription?: boolean;
  /**
   * If specified comment belongs to the Hotel, otherwise it is a global comment.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Specifies type of action described in the comments.
   * @minLength 0
   * @maxLength 20
   */
  actionType?: string;
  /**
   * Indicates at which date an action described in the comment must be taken.
   * @format date
   * @maxLength 8
   */
  actionDate?: string;
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
}

/** The result element containing a history list of credit card authorizations for a particular reservation, filtered by the requested criteria. */
export interface AuthorizationHistory {
  /** The collection of credit card history records. */
  folioHistory?: AuthorizationHistoryType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Information on a single credit card authorization transaction. */
export interface AuthorizationHistoryType {
  /**
   * The corresponding business date for this record.
   * @format date
   * @maxLength 8
   */
  businessDate?: string;
  /** Currently supported transaction type categories used for credit card authorization. */
  transactionType?: CardAuthorizationTransactionType;
  /** Amount sent for authorization for this transaction. */
  approvalAmount?: CurrencyAmountType;
  /** Payment Card information that was sent for authorization */
  cardPaymentInformation?: {
    /** Information on a credit card for the customer. */
    paymentCard?: ResPaymentCardType;
    /** A monetary value expressed with a currency code. */
    balance?: CurrencyAmountType;
    /** Configured rule for computing the amount to authorize. */
    authorizationRule?: AuthorizationRuleType;
    /** Information on an email for the customer. */
    emailFolioInfo?: {
      /** eMail deatils for the profile. */
      email?: EmailType;
      emailFolio?: boolean;
      /**
       * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
       * @minLength 0
       * @maxLength 80
       */
      id?: string;
      /**
       * A reference to the type of object defined by the UniqueID element.
       * @minLength 0
       * @maxLength 40
       */
      type?: string;
    };
    /**
     * @minLength 0
     * @maxLength 20
     */
    paymentMethod?: string;
    /**
     * @minLength 0
     * @maxLength 2000
     */
    description?: string;
    folioView?: number;
  };
  /** Contains he authorization status indicator - either Successful for Failed. */
  status?: {
    /** An indicator that the authorization was successful. */
    successful?: {
      /**
       * Approval code sent by the credit card company on a successful authorization.
       * @minLength 0
       * @maxLength 20
       */
      approvalCode?: string;
    };
    /** An indicator that the authorization failed. */
    failed?: {
      /**
       * The reason for the authorization failure.
       * @minLength 0
       * @maxLength 2000
       */
      reason?: string;
    };
  };
  /**
   * Time stamp of the creation.
   * @format date-time
   */
  createDateTime?: string;
  /**
   * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
   * @minLength 0
   * @maxLength 200
   */
  creatorId?: string;
  /**
   * Time stamp of last modification.
   * @format date-time
   */
  lastModifyDateTime?: string;
  /**
   * Identifies the last software system or person to modify a record.
   * @minLength 0
   * @maxLength 200
   */
  lastModifierId?: string;
  /**
   * Date an item will be purged from a database (e.g., from a live database to an archive).
   * @format date
   * @maxLength 8
   */
  purgeDate?: string;
  /** History type can only be either Settlement or Authorization or Payment. */
  type?: 'Settlement' | 'Authorization' | 'Payment';
}

/** Response when checking or inquiring the available options for a set of billing charges. */
export interface BillingChargesStatus {
  /** Set of consumables and the available options for each one. */
  options?: CheckPostBillingChargesOptionsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * TAvailable options for this consumable
 * @maxItems 4000
 */
export type CheckPostBillingChargesOptionsType = {
  /** Criteria information for posting a charge. */
  consumable?: ChargeCriteriaType;
  /** Determines if the package allowance is available to be consumed. */
  packageAllowance?: boolean;
  /** Room routing is applicable on the requested consumable. */
  roomRouting?: {
    /**
     * @minLength 0
     * @maxLength 20
     */
    roomId?: string;
    /** This provides name information for a person. */
    guest?: PersonNameType;
    applicable?: boolean;
  };
}[];

/** This provides name information for a person. */
export interface PersonNameType {
  /**
   * Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
   * @minLength 0
   * @maxLength 40
   */
  namePrefix?: string;
  /**
   * Given name, first name or names.
   * @minLength 0
   * @maxLength 40
   */
  givenName?: string;
  /**
   * The middle name of the person name.
   * @minLength 0
   * @maxLength 40
   */
  middleName?: string;
  /**
   * Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
   * @minLength 0
   * @maxLength 40
   */
  surname?: string;
  /**
   * Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
   * @minLength 0
   * @maxLength 40
   */
  nameSuffix?: string;
  /**
   * Degree or honors (e.g., Ph.D., M.D.)
   * @minLength 0
   * @maxLength 80
   */
  nameTitle?: string;
  /** Title Suffix. Must be populated if ADVANCED_TITLE is on. */
  nameTitleSuffix?: number;
  /** Envelope Greeting of the profile */
  envelopeGreeting?: string;
  /** Salutation of the profile */
  salutation?: string;
  /** Type of name of the individual, such as former, nickname, alternate or alias name. */
  nameType?: PersonNameTypeType;
  /**
   * Language identification.
   * @pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*
   */
  language?: string;
  /**
   * When name type is external, indicates the external system the name belongs to.
   * @minLength 0
   * @maxLength 40
   */
  externalSystem?: string;
}

/** Person's name in an external system. */
export enum PersonNameTypeType {
  Primary = 'Primary',
  Alternate = 'Alternate',
  Incognito = 'Incognito',
  External = 'External',
  Phonetic = 'Phonetic',
}

/** Request to post a charge on a reservation's folio. */
export interface BillingCharges {
  /** Criteria for the charge information to be posted. */
  criteria?: BillingChargesCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for posting charges. */
export interface BillingChargesCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Flag to indicate it is part of a PostIt Sale. */
  postIt?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Flag to indicate that current posting is a Welcome Offer Posting. */
  welcomeOfferPosting?: boolean;
}

/** Response notifying if the posting of a charge to a reservation was successful. */
export interface BillingChargesDetails {
  /** List of Postings produced by Billing Charge Request. */
  postings?: SummaryPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request object for PostBillingCheckCharges operation. */
export interface BillingCheckChargesCriteria {
  /** Details of the check to be posted. */
  check?: PostBillingCheckChargesCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details of the check with line item charges to post to a guest folio. */
export interface PostBillingCheckChargesCriteriaType {
  /**
   * Hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Indicates the check number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * The date against which charges are posted.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /** Line items of the check. */
  items?: PostBillingCheckChargesItemsCriteriaType;
  /** Unique identifier of this check in the partner system, applicable only if the charge is originated in a partner system. */
  checkId?: UniqueIDType;
  /** Cashier Id of the Cashier. */
  cashierId?: number;
}

/**
 * Line items of the check.
 * @maxItems 4000
 */
export type PostBillingCheckChargesItemsCriteriaType = PostBillingCheckChargesItemCriteriaType[];

/** Line item of check to post. */
export interface PostBillingCheckChargesItemCriteriaType {
  /**
   * Transaction code to use for the posting.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /** Amount to post. */
  price?: CurrencyAmountType;
  /**
   * Text describing any applicable detail of the posting.
   * @minLength 0
   * @maxLength 2000
   */
  postingRemark?: string;
}

/** Checkout request can be used to verify a reservation for checkout and do an actual checkout. In case the verificationOnly attribute is sent false, the operation will perform an actual checkout. In case the verificationOnly attribute is sent true, the operation goes through the reservation in question and verifies if it's Ok to checkout, otherwise the verification status element will provide you the verification code. The verification codes are described in the documentation of verificationOnly attribute. */
export interface Reservation {
  /** Check in reservation request. */
  reservation?: CheckoutReservationType;
  /** VerificationOnly "true" validates the hotel code and reservation id supplied in the request. VerificationOnly "false" validates and then check-out the guest using the request details. Following codes might be returned during the verification: FOF00065 - The hotel code and/or reservation id is missing. FOF00066 - Reservation can't be found with the supplied hotel code and reservation id. FOF00107 - The guest's departure is not scheduled for today. Check-out not possible. FOF00109 - The guest's reservation is not in a valid status for check-out. FOF00108 - The guest has a balance. Check-out not possible. */
  verificationOnly?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to reinstate checkout reservation in order to post additional transactions, etc. */
export interface ReinstateCheckedOutReservation {
  /** Hotel code. */
  hotelId?: CodeType;
  /** Identifies the reservation to reinstate.. */
  reservationId?: ReservationId;
  /** Indicates whether interfaces should be notified. */
  notifyInterfaces?: boolean;
  /** Indicate whether user wants to reinstate even if some other guest already checked in into same room. */
  overrideFlag?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to auto settle comp folios. OPERA will reference the 'Default Comp Payment Method' setting to settle the folio if no authorizer AR account is associated with the folio. */
export interface AutoSettleCompFolios {
  /** Criteria to auto settle comp folios. */
  criteria?: AutoSettleCompFoliosCriteriaType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria to auto settle comp folios of a reservation. */
export interface AutoSettleCompFoliosCriteriaType {
  /**
   * Hotel code of the folios to be auto settled.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation Unique ID of the folios to be auto settled. */
  reservationId?: ReservationId;
  /** Event to which this process will be logged. Possible values are CheckOut, InterimBill, AdvanceBill. */
  eventType?: CashieringEventType;
  /** Numeric ID of the cashier. */
  cashierId?: number;
}

/** Response for auto settle comp folios. This includes collection of auto settled comp folios. */
export interface AutoSettleCompFoliosStatus {
  /** Collection of auto settled comp folios. */
  folios?: AutoSettleCompFoliosType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Information about comp folio that was auto settled.
 * @maxItems 4000
 */
export type AutoSettleCompFoliosType = AutoSettleCompFolioType[];

/** Information about comp folio that was auto settled. */
export interface AutoSettleCompFolioType {
  /** Unique ID of payee. */
  payeeId?: UniqueIDType;
  /**
   * Name of the payee.
   * @minLength 0
   * @maxLength 80
   */
  payeeName?: string;
  /** Comp folio window that was attempted to be auto settled. */
  folioView?: number;
  /** Folio Number. */
  folioNo?: number;
  /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
  invoiceNo?: number;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /**
   * Date of Folio Generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
  folioStatus?: FolioStatusType;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Unique sequence number. Used to identify the current folio tax record. */
  folioSeqNo?: number;
}

/** Request type of complimentary bucket redemptions posting. */
export interface PostCompRedemptions {
  /** Criteria to post complimentary bucket redemptions request. */
  criteria?: {
    /**
     * Membership number.
     * @minLength 0
     * @maxLength 100
     */
    membershipId?: string;
    /** Complimentary bucket redemptions to post as payment. */
    compRedemptions?: CompRedemptionsType;
    /** Numeric ID of the cashier. */
    cashierId?: CashierId;
    /** Folio Window. */
    folioView?: number;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type of complimentary bucket redemptions reversal. */
export interface ReverseCompRedemptions {
  /** Criteria to reverse complimentary bucket redemptions request. */
  criteria?: {
    /**
     * Membership number.
     * @minLength 0
     * @maxLength 100
     */
    membershipId?: string;
    /** Complimentary bucket redemptions to post as negative payment. */
    compRedemptions?: CompRedemptionsType;
    /** Numeric ID of the cashier. */
    cashierId?: CashierId;
    /** Folio Window. */
    folioView?: number;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request for submitting post deferred taxes for a reservation. */
export interface DeferredTaxesProcess {
  /** Contains criteria to post the deferred taxes for the given reservation. */
  criteria?: DeferredTaxesCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Contains criteria to post the deferred taxes for the given reservation. */
export interface DeferredTaxesCriteriaType {
  /**
   * Property context of the reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique identifier of a reservation. */
  reservationId?: ReservationId;
  /** Unique cashier identifier. */
  cashierId?: CashierId;
  /** Configuring this flag to be TRUE will make the postDeferredTax job to be submitted always. */
  refreshAlways?: boolean;
}

/** Response of submitting post deferred taxes for a reservation. */
export interface DeferredTaxesProcessDetails {
  /** Job process identifier. */
  processId?: StringLength40;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request object to process reservation deposit. */
export interface ReservationDepositCriteria {
  /** Criteria to process deposit reservation. */
  criteria?: ProcessReservationDepositCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria to process reservation deposit. */
export interface ProcessReservationDepositCriteriaType {
  /**
   * Hotel code of the reservation.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Deposit process type of the reservation. */
  depositProcessType?: DepositProcessType;
  /** Reservation id of the reservation */
  reservationId?: ReservationId;
  /** The Amount would be transferred to the Guest Ledger of the Psuedo Posting Room if the DepositProcessingType = Keep/Return otherwise it will be transferred to the Guest Ledger of the current reservation. */
  amount?: CurrencyAmountType;
  /**
   * The Percentage would be transferred to the Guest Ledger of the Psuedo Posting Room if the DepositProcessingType = Keep/Return otherwise it will be transferred to the Guest Ledger of the current reservation.
   * @min 0
   * @max 100
   */
  percentage?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** The Deposit is transferred to an internal account for returned deposits to be handled by the property. Users can select to keep all (not exceeding total), a portion of, or none of the deposit. */
export enum DepositProcessType {
  Keep = 'Keep',
  Return = 'Return',
  Mature = 'Mature',
}

/** Request to create a Deposit Folio for a reservation. */
export interface DepositFolioCriteria {
  /** Criteria for creating a Deposit Folio. Deposit Folio functionality should be active. */
  criteria?: DepositFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** The Deposit folio posting and payments information. */
export interface DepositFolioCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /**
   * The payment information to be posted.
   * @maxItems 4000
   */
  payments?: PaymentCriteriaType[];
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Custom Folio Name Value Informatoin to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /**
   * Transaction service type which the Folio is being associated.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Reservation for which the Deposit Folio is required. */
  reservationId?: ReservationId;
  /** Profile Id of the Payee for this Deposit Folio. */
  profileId?: ProfileId;
  /**
   * New guarantee code associated with reservation.
   * @minLength 0
   * @maxLength 20
   */
  guaranteeCode?: string;
  /** The deposit policy ID to which the Deposit Folio is being associated. */
  depositPolicyId?: UniqueIDType;
  /** Payment method to update the reservation with, if the payment did not match. */
  paymentMethod?: ReservationPaymentMethodType;
  /** This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold. */
  simpleFolio?: boolean;
  /** Flag to indicate if the Inventory check has to be overridden when the guarantee code of the reservation is changed. */
  overrideInventoryCheck?: boolean;
  /** Manual Folio Number used for deposit folio.This applies to certain country requirements. */
  manualFolioNo?: number;
}

/** Response to the request to create a Deposit Folio for a reservation. */
export interface PostedDepositFolio {
  /** Information regarding the new Deposit Folio created. */
  folioWindow?: FolioWindowType[];
  /** Deposit payment information of the payment which was posted. */
  deposits?: DepositPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response object for deposit maturity information type. */
export interface DepositMaturityDetails {
  /** Deposit Maturity Information type . */
  depositMaturityInfo?: DepositMaturityInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Deposit maturity information type. */
export interface DepositMaturityInfoType {
  /** The Reservation's Deposit Status Type. When preference is set to Check In, the deposit is transferred when the guest checks in. When the preference is set to Last Night Stay,then the deposit is transferred during the last nights night audit. For example, if the departure date for a reservation is July 14th, then the deposit would be posted during the night audit for July 13th. */
  depositMaturityType?: DepositMaturityType;
  /** Total Deposit Amount that can be transferred to another Reservation. */
  totalAmountTransferrable?: CurrencyAmountType;
  /** Total Deposit Amount which is due for this reservation. */
  totalAmountDue?: CurrencyAmountType;
}

/** Response of matured deposits. */
export interface MaturedDepositsDetails {
  /** Collection of matured deposits. */
  maturedDeposits?: MaturedDepositsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Detailed information of matured deposits.
 * @maxItems 4000
 */
export type MaturedDepositsType = MaturedDepositType[];

/** Matured Deposits detail. */
export interface MaturedDepositType {
  /** Transaction detail of matured deposits. */
  transaction?: TransactionType;
  /** Deposit amount. */
  guestCreditAmount?: CurrencyAmountType;
  /** The folio window where this authorization is applied. */
  folioView?: number;
  /** Chashier information of user */
  cashierInfo?: CashierInfoType;
  /**
   * User defined remarks of the matured deposit.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User defined reference of the matured deposit.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
}

/** Transaction type. */
export interface TransactionType {
  /** Unique transaction identifier. */
  transactionNo?: CodeDescriptionType;
  /**
   * Transaction date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Transaction code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Transaction description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
}

/** Request to post an existing deposit on a reservation to the Guest Folio for No Show or Canceled Reservations. Deposits remain in the deposit ledger until Checkin/Checkout. In the case of No Show or Canceled reservations they remain in the deposit ledger until this request is done. */
export interface DepositToGuestFolio {
  /** Criteria to move the deposit from the Deposit Ledger to the Guest Folio(Ledger). */
  criteria?: PostDepositToGuestFolioType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for transferring the Deposit Amount to the Guest Folio */
export interface PostDepositToGuestFolioType {
  /**
   * Resort for which the reservation defined.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique ID of a reservation. */
  reservationId?: ReservationId;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request to change a reservation to an Early Departure. As part of this process the reservation will be changed to a Due Out status with the departure date being the current business date. Only Inhouse reservations can be changed to Early Departure. Before changing the reservation to early departure, rate restrictions on the rate code used and any allowances consumed by the guest for today will be checked. If there is a penalty applicable this can be posted to the reservation. */
export interface EarlyDeparture {
  /** Criteria for changing a reservation to an early departure. As part of the criteria, flags can be sent to ignore any check on rate code restrictions, Tiered rate changes, post allowance consumed to guest account and post the early departure penalty if applicable, can be used to indicate the user preferences. */
  criteria?: EarlyDepartureCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for verifying or changing an Early Departure reservation. */
export interface EarlyDepartureCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id for which the early departure is to be done. */
  reservationIdList?: ReservationIdList;
  /** Indicates if Rate Restriction check should be overridden. */
  ignoreRateRestriction?: boolean;
  /** Indicates if any allowance consumed by the guest for today can be posted to the Guest Folio. If this cannot be done then the Early Departure cannot proceed. */
  postConsumedAllowanceToGuest?: boolean;
  /** Indicates if check has to be done for Rate Tiers. */
  ignoreCheckOnTieredRate?: boolean;
  /** Indicates if the early departure penalty should be posted . */
  postEarlyDeparturePenalty?: boolean;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response for Early departure verification. Contains information regarding early departure penalty amount if applicable and any errors or warnings as to why the early departure cannot be done. Possible error codes are: FOF00152: An early departure could result in a change to the room rate, due to the reduced length of stay. FOF00153: Exchange Rates not setup for {currency code} . FOF00155: The partially consumed package(s) will be charged to the guest account. FOF00156: There is a Rate Code Restriction for {restriction information}. FOF00157: The reservation status is not valid for an early departure. FOF00158: Early Departure is not required as the reservation is already in Due Out status. */
export interface EarlyDepartureInfo {
  /** Information for the Early Departure. Has details regarding the Early Departure penalty if applicable for the property and reservation. */
  earlyDepartureDetails?: EarlyDepartureInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Information regarding Early Departure for a reservation. Contains information regarding penalty, if any. */
export interface EarlyDepartureInfoType {
  /** Amount that can be charged as Early Departure Penalty */
  penaltyAmount?: CurrencyAmountType;
  /**
   * Description of the Early Departure Penalty calculation rule.
   * @minLength 0
   * @maxLength 2000
   */
  penaltyDescription?: string;
}

/** Response to the request to get staged transaction information for a Reservation */
export interface StagedTransactions {
  /** Transaction details of staged comp transactions for the requested reservation. */
  stagedCompTransactionsInfo?: StagedCompTransactionsInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Transaction ID List of staged comp transactions for the reservation.
 * @maxItems 4000
 */
export type StagedCompTransactionsInfoType = UniqueIDListType[];

/** Request to apply any final charges or payments to a reservation prior to checkout. This operation should be called prior to the guest settlement which would then reflect the balance the guest has to pay. */
export interface FinalPostings {
  /** Check out reservation request. */
  reservation?: CheckoutReservationType;
  /** This flag will allow the user to control the response performance. Response will return folio information based on the this flag. Possible values are None, Summary, Details */
  responseInstruction?: ResponseInstructionType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response types used in the Apply Final Postings request. Based on the request the folio summary , folio details or no details will be returned in the response. */
export enum ResponseInstructionType {
  None = 'None',
  Summary = 'Summary',
  Details = 'Details',
}

/** Response that contains either the fixed charges list if fetch was successful or error(s) if not. */
export interface FixedChargesDetails {
  /** List of Fixed Charges. Contains information on Fixed Charges Frequency, Schedule and Charge Details. Refer to the Generic Common Types document for information on the Fixed Charges Type */
  fixedCharges?: FixedChargesType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Holds fixed charge detail.
 * @maxItems 4000
 */
export type FixedChargesType = FixedChargeType[];

/** Holds fixed charge information. */
export interface FixedChargeType {
  /** Holds schedule of fixed charge. */
  schedule?: FixedChargeScheduleType;
  /** Holds specific details of fixed charge. */
  charge?: FixedChargeDetailType;
  /** URL that identifies the location associated with the record identified by the UniqueID. */
  url?: string;
  /**
   * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
   * @minLength 0
   * @maxLength 20
   */
  type?: string;
  /**
   * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
   * @minLength 0
   * @maxLength 80
   */
  instance?: string;
  /**
   * Used to identify the source of the identifier (e.g., IATA, ABTA).
   * @minLength 0
   * @maxLength 80
   */
  idContext?: string;
  /**
   * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
   * @minLength 0
   * @maxLength 80
   */
  id?: string;
  /** Additional identifying value assigned by the creating system. */
  idExtension?: number;
}

/** Holds schedule of fixed charge. */
export interface FixedChargeScheduleType {
  /**
   * The starting value of the date range.
   * @format date
   * @maxLength 8
   */
  start?: string;
  /**
   * The ending value of the date range.
   * @format date
   * @maxLength 8
   */
  end?: string;
  /** Frequency of a fixed charge. */
  frequency?: FixedChargeFrequencyType;
  /**
   * Day of when to execute fixed charge. Applicable when frequency is Daily or Weekly.
   * @minLength 0
   * @maxLength 3
   */
  dayToExecute?: string;
  /**
   * Date of when to execute yearly fixed charge. Applicable when frequency is Yearly.
   * @format date
   * @maxLength 8
   */
  dateToExecute?: string;
}

/** Yearly. */
export enum FixedChargeFrequencyType {
  O = 'O',
  D = 'D',
  W = 'W',
  M = 'M',
  Q = 'Q',
  Y = 'Y',
}

/** Fixed charge amount could be specified by flat fee or be a percentage of the rate amount. */
export interface FixedChargeDetailType {
  /** Transaction code and description of a fixed charge. */
  transaction?: CodeDescriptionType;
  /** Quantity of the product. */
  quantity?: number;
  /** Price of the product. */
  chargeAmount?: CurrencyAmountType;
  /**
   * Percentage of the rate amount.
   * @min 0
   * @max 100
   */
  percent?: number;
  /**
   * Additional information regarding the fixed charge.
   * @minLength 0
   * @maxLength 2000
   */
  supplement?: string;
  /** Holds related article code and description. */
  article?: CodeDescriptionType;
  /** Holds number of comp or cash room night to allocate. */
  roomNights?: number;
}

/** Method to update fixed charges of a reservation. */
export interface FixedCharges {
  /** Hotel code of the reservation. */
  hotelId?: CodeType;
  /** Reservation Id for which the fixed charges need to be updated. */
  reservationId?: UniqueIDType;
  /** List of the fixed charges that should be updated. */
  fixedCharges?: FixedChargesType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Apply Flexible Benefit Postings. */
export interface FlexibleBenefitPostingsCriteria {
  /** Criteria for reversing a Flexible Benefit Posting. */
  applyFlexibleBenefitCriteria?: ApplyFlexibleBenefitPostingsCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for retrieving one or more guest's folio transactions. */
export interface ApplyFlexibleBenefitPostingsCriteriaType {
  /**
   * Hotel context for the Reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation identifier for which Flexible Benefits will be posted. */
  reservationId?: ReservationId;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response to the request for Payment Tax records for a reservation. Lists all the Payment Taxes for the reservation which are available. */
export interface FolioTaxPaymentsInfo {
  /** Type for Package Tax Information for Thailand Tax functionality. */
  paymentTaxInfo?: PaymentTaxInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Type for Package Tax Information for Thailand Tax functionality. */
export interface PaymentTaxInfoType {
  /**
   * Hotel context for the Reservation.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id for which the Payment Tax information is used. */
  reservationId?: ReservationId;
  /** The payment tax records for this reservation. */
  taxes?: PaymentTaxesType;
}

/** Response to the request to get Financial Information for a Reservation */
export interface Folio {
  /** Financial details for the requested reservation. */
  reservationFolioInformation?: ReservationFolioInfoType;
  /** Transaction codes information which are in response folio information. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Each folio will include summary and/or detailed information. */
export interface ReservationFolioInfoType {
  /** Reservation guest details. */
  reservationInfo?: ReservationInfoType;
  /**
   * The Folio Window information of the reservation.
   * @maxItems 4000
   */
  folioWindows?: FolioWindowType[];
  /**
   * Folio History element contains all generated folios
   * @maxItems 4000
   */
  folioHistory?: FolioWindowType[];
  /** Computed flag specifying that the reservation has met the criteria which allows charges to be posted after being checked-out. */
  postStayChargeAllowed?: boolean;
  /** Computed flag specifying that the reservation has met the criteria which allows charges to be posted before checking-in. */
  preStayChargeAllowed?: boolean;
  /** Flag specifying that the reservation can be auto check in when Auto Checkin Pseudo Room parameter is active. */
  autoCheckInAllowed?: boolean;
  /** Flag specifying that the reservation can post if the reservation status was No Show or Cancelled. */
  postToNoShowCancelAllowed?: boolean;
  /** Stamp Duty posted in at least one folio window. */
  stampDutyExists?: boolean;
  /** Flag to check if the room and tax are already posted. */
  roomAndTaxPosted?: boolean;
  /** Flag applicable only when ALLOW_DEFERRED_TAXES is ON for the resort. Set to true only when there are any unsettled transactions on any of the windows with the deferred tax entry posted. Set to false only when there are unsettled transactions on any of the windows without deferred tax entry. */
  deferredTaxesPosted?: string;
}

/** Request to close an Open Folio Reservation. The Property should be using the Open Folio Functionality to use this operation. */
export interface CloseFolioCriteria {
  /** Criteria for closing the folio. Property code and Reservation ID is required. */
  criteria?: CloseFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface CloseFolioCriteriaType {
  /**
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Generate Folio request can be used to create a folio for checked in reservation or reservation with open folios */
export interface FolioCriteria {
  /** Property code of the reservation. */
  criteria?: GenerateFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Generate Folio Criteria type to be used for folio generation request */
export interface GenerateFolioCriteriaType {
  /**
   * Custom Folio Name Value Information to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Event to which this process will be logged. */
  eventType?: CashieringEventType;
  /** Reservation identifier that will be used as the context of the available options. */
  reservationId?: ReservationId;
  /** Profile Id corresponding to the guest name. */
  profileId?: ProfileId;
  /** Exchange Rate information selected to be used by the Fiscal Service. */
  fiscalInvoicingCurrencyInfo?: ExchangeRateInfoType;
  /** Bill Information of the original bill for which the Credit Bill is being generated . */
  associatedBillInfo?: AssociatedBillInfoType;
  /** Folio Type , Queue name , Fiscal Flag to be used in folio generation This is a country requirement. */
  folioQueue?: FolioQueueType;
  /** Fiscal Folio sequence ID stored in queue table. */
  folioSeqId?: number;
  /** Defines the action of the generate folio process. */
  fiscalFolioInstruction?: FiscalFolioInstruction;
  /** Override Instruction for the Folio Type */
  folioTypeValidation?: FolioTypeValidationType;
  /** list of transaction. */
  transactions?: TransactionsType;
  /**
   * Contains transaction service type.
   * @minLength 0
   * @maxLength 20
   */
  transactionServiceType?: string;
  /** Balance of a Reservation for this property. */
  balance?: CurrencyAmountType;
  folioWindowNo?: number;
  /** Flag to decide if folios is to be generated for all windows in addition to the one requested with applicable postings and zero balance. If any of the windows have non-zero balance then folios are not generated for other windows. */
  allFolioWindow?: boolean;
  /** Correction flag */
  correction?: boolean;
  /** Indicates the type of folio to be generated */
  debitFolio?: boolean;
  /** Manual Folio Number used for settlement during checkout */
  manualFolioNo?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold. */
  simpleFolio?: boolean;
}

/** Associated Bill info. */
export interface AssociatedBillInfoType {
  /** The bill number of the original bill for which the Credit Bill is being generated. */
  associatedBillNumber?: number;
  /** The folio type of the original bill for which the Credit Bill is being generated. */
  associatedBillFolioType?: string;
  /** The folio number queue(used in certain countries) of the original bill for which the Credit Bill is being generated. */
  associatedBillQueueName?: string;
  /** The Fiscal Folio Bill Number(from a Fiscal System) of the original bill for which the Credit Bill is being generated. */
  associatedBillFiscalBillNumber?: string;
  /**
   * The bill generation date of the original bill for which the Credit Bill is being generated.
   * @format date
   * @maxLength 8
   */
  associatedBillGenerationDate?: string;
}

/** Profile detail is not configured with Tax ID. */
export enum FolioTypeValidationType {
  TaxID = 'TaxID',
}

/**
 * List of transaction information.
 * @maxItems 4000
 */
export type TransactionsType = TransactionType[];

/** Generate Folio Response contains generated folio no and invoice number along or errors and warnings in case if folio couldn't be generated: FOF00065 - The hotel code and/or reservation id is missing. FOF00066 - Reservation cant be found with the supplied hotel code and reservation id. FOF00123 - Folio window has a balance and folio cannot be generated. FOF00124 - The guest's reservation is not in a valid status for folio generation. */
export interface GeneratedFolio {
  /** Window count will be hotel based configurable. */
  folioWindows?: FolioWindowType[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response to fetch reservation package options. */
export interface ReservationPackageOptions {
  /** List of Packages postings. */
  packagePostings?: PackagePostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  /** List of reservations with linked package allowances */
  linkedAllowanceReservationsInfo?: LinkedAllowanceReservationsInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of package postings.
 * @maxItems 4000
 */
export type PackagePostingsType = PackagePostingType[];

/** Posting details. */
export interface PackagePostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /** Package allowance. */
  packageAllowance?: CurrencyAmountType;
  /** Overage Amount. */
  overageAmount?: CurrencyAmountType;
  /**
   * Room number for linked reservation package allowance or consumption.
   * @minLength 0
   * @maxLength 20
   */
  fromRoom?: string;
  /**
   * Package Code
   * @minLength 0
   * @maxLength 20
   */
  packageCode?: string;
}

/** List of reservation with linked package allowances. */
export interface LinkedAllowanceReservationsInfoType {
  /**
   * The resort code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * List of Package Allowance Source reservations.
   * @maxItems 4000
   */
  sourceReservations?: LinkedAllowanceReservationInfoType[];
  /** Package Allowance Target reservation. */
  targetReservation?: LinkedAllowanceReservationInfoType;
}

/** Linked Allowance Reservation Information. */
export interface LinkedAllowanceReservationInfoType {
  /** Reservation name id which package allowances are linked. */
  reservationId?: ReservationId;
  /** Reservation confirmation number. */
  confirmationNo?: string;
  /** Guest name unique identifier. */
  guestNameId?: UniqueIDType;
  /**
   * Display Name for the guest.
   * @minLength 0
   * @maxLength 80
   */
  guestDisplayName?: string;
  /**
   * Guest Room number.
   * @minLength 0
   * @maxLength 20
   */
  roomId?: string;
  /** Indicates that guest is allowed to consumed shared allowances from others. */
  consumeSharedAllowances?: boolean;
}

/** Request for registering a Manual Authorization. */
export interface CcManualAuthorizationCriteria {
  /** Criteria for registering the manual authorization. */
  criteria?: CCManualAuthorizationCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Type for registering a manual authorization. */
export interface CCManualAuthorizationCriteriaType {
  /**
   * Hotel context for the Reservations.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id for the guest whose deposit payment information is being requested. */
  reservationIdList?: ReservationIdList;
  /** The amount to authorize. */
  amount?: CurrencyAmountType;
  /**
   * Approval code is required when making a Manual Authorization.
   * @minLength 0
   * @maxLength 20
   */
  manualApprovalCode?: string;
  /** The folio window where this authorization is applied. */
  folioView?: number;
}

/** Request to post a payment on a reservation's folio. */
export interface BillingPayment {
  /** Criteria for the payment information to be posted. */
  criteria?: {
    /**
     * Property code.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /** Payment method used by the payee. */
    paymentMethod?: CashieringPaymentMethodType;
    /** Amount to post to the folio. */
    postingAmount?: CurrencyAmountType;
    /**
     * User-defined posting reference.
     * @minLength 0
     * @maxLength 2000
     */
    postingReference?: string;
    /**
     * User-defined posting remark.
     * @minLength 0
     * @maxLength 2000
     */
    postingRemark?: string;
    /**
     * User Defined Comments. Used for Deposit Payment postings.
     * @minLength 0
     * @maxLength 2000
     */
    comments?: string;
    /** Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available. */
    applyCCSurcharge?: boolean;
    /** The Payment Tax information for Thailand Tax functionality. The invoice number and the date will be used. */
    manualPaymentTaxInfo?: PaymentTaxType;
    /** Used for Thailand Tax Functionality.The payment tax records that can be used for a Credit Note for this reservation. */
    creditablePaymentTaxes?: PaymentTaxesType;
    /**
     * Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made.
     * @maxLength 2000
     */
    terminalId?: string;
    /** Flag to allow a rebate by Credit Card */
    overrideInsufficientCC?: boolean;
    /** Amount of change given to guest. */
    changeDueAmount?: CurrencyAmountType;
    /** Flag to override account receivable credit limit */
    overrideARCreditLimit?: boolean;
    /** Flag to indicate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
    applyCurrencyTaxes?: boolean;
    /** Flag to indicate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
    vATOffset?: boolean;
    /** Payment action to know from where the payment has been made. */
    action?: PostPaymentActionType;
    folioWindowNo?: number;
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
    /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
    reservationId?: ReservationId;
  };
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response notifying if the posting of a payment to a reservation was successful. */
export interface PostedBillingPayment {
  /** List of Postings produced by Billing Payment Request. */
  postings?: SummaryPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response to the request to get financial details for a Posting Activity. This will return the before and after values for the transactions which were changed. */
export interface PostingActivityDetail {
  /** The details of the changes made during the activity. */
  details?: PostingActivityDetailType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Details of a Posting transaction change. */
export interface PostingActivityDetailType {
  /**
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
  /** Information of the Activity that changed the Posting transaction. */
  activity?: ActivityLogType;
  /** The original information prior to the change. */
  oldInfo?: SummaryPostingsType;
  /** The new information after the change. */
  newInfo?: SummaryPostingsType;
}

export interface ActivityLogType {
  /**
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  module?: string;
  /** @format date-time */
  logDate?: string;
  refActionId?: number;
  logUserId?: number;
  logUserName?: string;
  machineStation?: string;
  /**
   * @minLength 0
   * @maxLength 20
   */
  croCode?: string;
  /**
   * @minLength 0
   * @maxLength 100
   */
  actionType?: string;
  /**
   * @minLength 0
   * @maxLength 2000
   */
  actionDescription?: string;
  /**
   * The IP Address of the machine that performed the activity
   * @minLength 0
   * @maxLength 2000
   */
  iPAddress?: string;
}

/** Request type for Prepaid card redeem amount request */
export interface RedeemPrepaidCards {
  /** Criteria for Prepaid card redeem request. */
  criteria?: RedeemPrepaidCardCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for Prepaid card redeem request. */
export interface RedeemPrepaidCardCriteriaType {
  /**
   * Hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id of the reservation */
  reservationId?: ReservationId;
  /** Prepaid Card redemption information used to post as payment. */
  prepaidCardRedemptions?: PrepaidCardRedemptionsType;
  /** Numeric ID of the cashier. */
  cashierId?: CashierId;
  /** Folio Window. */
  folioView?: number;
}

/** Response for redeem Prepaid cards request. */
export interface RedeemPrepaidCardsStatus {
  /** Prepaid Card details type. */
  prepaidCards?: PrepaidCardsInfoType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Prepaid card info object.
 * @maxItems 4000
 */
export type PrepaidCardsInfoType = PrepaidCardInfoType[];

/** Detailed information about the prepaid card. */
export interface PrepaidCardInfoType {
  /**
   * Hotel context for the prepaid card.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The reservation name id where the transaction is associated. */
  reservationId?: UniqueIDType;
  /**
   * Prepaid card number.
   * @minLength 0
   * @maxLength 80
   */
  cardNo?: string;
  /**
   * Masked Prepaid card / account number.
   * @minLength 0
   * @maxLength 80
   */
  cardNumberMasked?: string;
  /** The unique ID for the Interface. */
  interfaceId?: UniqueIDType;
  /**
   * Initial Load Date of the prepaid card.
   * @format date
   * @maxLength 8
   */
  initialLoadDate?: string;
  /**
   * Issue Date of the prepaid card.
   * @format date
   * @maxLength 8
   */
  issueDate?: string;
  /**
   * Validity of the prepaid card amount.
   * @format date
   * @maxLength 8
   */
  validUntil?: string;
  /**
   * Expiry Date of the prepaid card.
   * @format date
   * @maxLength 8
   */
  expiryDate?: string;
  /** Initial Credit of the prepaid card. */
  initialCredit?: CurrencyAmountType;
  /** Total Debt of the prepaid card. */
  totalDebit?: CurrencyAmountType;
  /** Total Credit of the prepaid card. */
  totalCredit?: CurrencyAmountType;
  /** Balance of the prepaid card. */
  balance?: CurrencyAmountType;
  /** Available cashout of the prepaid card. */
  availableCashoutAmount?: CurrencyAmountType;
  /** Reserved Amount of the prepaid card. */
  reservedAmount?: CurrencyAmountType;
  /** List of prepaid card transactions. */
  prepaidCardTransactions?: PrepaidCardTransactionsType;
  /** Indicate if vendor transactions are included on the transactions list. */
  vendorTransactionsActive?: boolean;
  /** Indicate if opera transactions are included on the transactions list. */
  operaTransactionsActive?: boolean;
}

/**
 * Prepaid card transaction details.
 * @maxItems 4000
 */
export type PrepaidCardTransactionsType = PrepaidCardTransactionInfoType[];

/** Prepaid Card Transactions */
export interface PrepaidCardTransactionInfoType {
  /** Prepaid card transaction amount. */
  amount?: CurrencyAmountType;
  /** Prepaid card transaction type. */
  type?: PrepaidCardTrxTypeType;
  /**
   * Prepaid card transaction date.
   * @format date
   * @maxLength 8
   */
  date?: string;
  /** Opera transaction number. */
  transactionNo?: number;
  /**
   * Vendor transaction number.
   * @minLength 0
   * @maxLength 100
   */
  vendorTransactionNo?: string;
  /** The guest name id associated to the card. */
  profileId?: UniqueIDType;
  /** Prepaid card transaction source. */
  source?: PrepaidCardTransactionSourceType;
  /** Indicate if the transaction is cancellable or not. */
  cancellable?: boolean;
}

/** Vendor transaction source type. */
export enum PrepaidCardTransactionSourceType {
  Opera = 'Opera',
  Vendor = 'Vendor',
}

/** Request to create a Proforma(folio) transactions for a reservation. The request generates the internal transactions required to create a Proforma report. After this request is called , the Opera Proforma report should be called so that these transactions can be used in the report. If the report is called without this request, the report will be incorrect and will not have the complete information. If the report is not used after this request, the internal transactions will be removed either by night audit or by the next request. */
export interface ReservationFolio {
  /** Criteria to create a Proforma for a reservation. */
  criteria?: CreateProformaCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for creating Proforma transactions for a reservation. These transactions will be used by the Opera Proforma Report. */
export interface CreateProformaCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id for which the Proforma has to be created. */
  reservationIdList?: ReservationIdList;
  /** Response instructions for the Proforma transactions creation. Possible values are None or Folio Summary. A Summary of the Proforma Folio can be returned, if requested. */
  responseInstruction?: ProformaResponseInstructionType;
}

/** Response instructions for Proforma Creation. */
export enum ProformaResponseInstructionType {
  None = 'None',
  FolioSummary = 'FolioSummary',
}

/** Response for the Create Proforma WS. After the proforma is created by this request, the Opera Proforma report should be called to generate the actual physical Proforma report. The response can have the summary of the Guests Proforma Folio, if requested. */
export interface ReservationFolioInformation {
  /** This type will return a summary Proforma Folio information in the response based on the Response Instruction flag passed in request. */
  reservationFolioInformation?: ReservationFolioInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response object for revenue bucket totals for a reservation. */
export interface RevenueBucketTotals {
  /** List of revenue bucket totals. */
  revenueBucketsInfo?: RevenueBucketTotalsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of revenue bucket total details
 * @maxItems 4000
 */
export type RevenueBucketTotalsType = RevenueBucketTotalType[];

/** reservation revenue bucket total information. */
export interface RevenueBucketTotalType {
  /** Holds Revenue Bucket Type details. */
  revenueBucketCode?: RevenueBucketCodeType;
  /** Total amount related to the bucket. */
  totalAmount?: CurrencyAmountType;
}

/** This gives detailed information about a trx code arrangement. */
export interface RevenueBucketCodeType {
  /**
   * Description of the trx code arrangement code.
   * @minLength 0
   * @maxLength 40
   */
  description?: string;
  /** Collection of transaction codes which form the trx code arrangement. */
  transactionCodes?: TrxCodesInfoType;
  /**
   * Code is used to identify a trx code arrangement.
   * @minLength 0
   * @maxLength 20
   */
  code?: string;
  /**
   * Identifies the hotel code for which the trx code arrangement is specified.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * This holds Revenue Bucket Type
   * @minLength 0
   * @maxLength 20
   */
  revenueBucketType?: string;
  /** Bucket is eligible for membership points */
  pointsEligible?: boolean;
  /**
   * Stores the default value for the arrangement code for revenue buckets in order to group transaction codes.
   * @minLength 0
   * @maxLength 2000
   */
  bucketValue?: string;
  /** Flag to identify Fiscal related bucket types. */
  bucketType?: BucketTypeType;
}

/** Fiscal Bucket Type. */
export enum BucketTypeType {
  Default = 'Default',
  Fiscal = 'Fiscal',
}

/** Request to reverse the certificate postings of transactions. */
export interface ReverseCertificatePostingsCriteria {
  /** Criteria for reversing the certificate postings of transactions. */
  reverseCriteria?: ReverseCertificatePostingsCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for reversing certificate postings of transactions. */
export interface ReverseCertificatePostingsCriteriaType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation name id to which reverse certificate postings to be done. */
  reservationNameId?: UniqueIDType;
  /**
   * The unique transaction number of this transaction.
   * @maxItems 4000
   */
  transactionList?: number[];
  /**
   * The reason code for the deletion.
   * @minLength 0
   * @maxLength 20
   */
  reasonCode?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response object containing routing instructions for a reservation. */
export interface RoutingInstructionsDetails {
  /** Set of Routing Instructions. */
  routingInstructions?: RoutingInfoListType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
 * @maxItems 4000
 */
export type RoutingInfoListType = RoutingInfoType[];

/** A routing info object can either be of type Folio OR of type Room with its corresponding object. */
export interface RoutingInfoType {
  /** Folio routing type. */
  folio?: {
    /** Guest details */
    guestInfo?: {
      /** Unique identifiers for the Profile for both internal and external systems. */
      profileIdList?: ProfileIdList;
    };
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Accounts Receivable.
     * @minLength 0
     * @maxLength 20
     */
    aRNumber?: string;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
    /** @maxLength 2000 */
    paymentMethod?: string;
  };
  /** Room routing type. */
  room?: {
    /**
     * Room number to route the instructions.
     * @minLength 0
     * @maxLength 20
     */
    roomId?: string;
    /** Guest unique identifier to which the instruction will be routed. */
    guestNameId?: UniqueIDType;
    /**
     * Display Name for the guest.
     * @minLength 0
     * @maxLength 80
     */
    guestDisplayName?: string;
    /** Reservation name id to which the instruction will be routed. */
    reservationNameId?: UniqueIDType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** Comp Accounting Routing Info */
  comp?: {
    /** Authorizer Information */
    compAccountingInfo?: CompAccountingType;
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
  };
  /** Comp Accounting Request routing */
  request?: {
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
  refreshFolio?: boolean;
}

/** Request when changing a routing instruction. */
export interface RoutingInstructionsToChange {
  /** Transactions and scheduled instructions included in this routing element will be replaced with the new element. */
  criteria?: {
    /** Folio routing type. */
    folio?: {
      /** Guest details */
      guestInfo?: {
        /** Unique identifiers for the Profile for both internal and external systems. */
        profileIdList?: ProfileIdList;
      };
      /** Payee information. */
      payeeInfo?: PayeeInfoType;
      /**
       * Accounts Receivable.
       * @minLength 0
       * @maxLength 20
       */
      aRNumber?: string;
      /** Set of routing instructions associated to this routing type. */
      instructions?: RoutingInstructionType[];
      /** @maxLength 2000 */
      paymentMethod?: string;
      folioWindowNo?: number;
    };
    /** Room routing type. */
    room?: {
      /**
       * Room number to route the instructions.
       * @minLength 0
       * @maxLength 20
       */
      roomNumber?: string;
      /** Guest unique identifier to which the instruction will be routed. */
      guestNameId?: UniqueIDType;
      /**
       * Display Name for the guest.
       * @minLength 0
       * @maxLength 80
       */
      guestDisplayName?: string;
      /** Reservation name id to which the instruction will be routed. */
      reservationNameId?: UniqueIDType;
      /** Set of routing instructions associated to this routing type. */
      instructions?: RoutingInstructionType[];
    };
    /** Comp Accounting Routing Info */
    comp?: {
      /** Authorizer Information */
      compAccountingInfo?: CompAccountingType;
      /** Type for the details of a Comp Routing Request */
      compRequestInfo?: CompRoutingRequestType;
      /** Payee information. */
      payeeInfo?: PayeeInfoType;
      /** Set of routing instructions associated to this routing type. */
      instructions?: RoutingInstructionType[];
      folioWindowNo?: number;
    };
    /** Comp Accounting Request routing */
    request?: {
      /** Type for the details of a Comp Routing Request */
      compRequestInfo?: CompRoutingRequestType;
      /** Set of routing instructions associated to this routing type. */
      instructions?: RoutingInstructionType[];
    };
    /**
     * Hotel context of the reservation.
     * @minLength 0
     * @maxLength 20
     */
    hotelId?: string;
    /** Unique ID of a reservation. */
    reservationId?: ReservationId;
    /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
    refreshFolio?: boolean;
    /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
    retrievePostingsForRoomRouting?: boolean;
    /** Transactions and schedule instructions which will replace the base element. */
    newRoutingInfo?: RoutingInfoType;
  };
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response when changing a routing instruction. It may optionally return a list of postings which are eligible for transfer as per the modified routing instruction in case of room routing instruction. */
export interface ChangedRoutingInstructions {
  /** Transaction details along with the transaction code information. */
  postingsForRoomRouting?: PostingsInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** This type is useful to hold the transaction details along the transaction code information. */
export interface PostingsInfoType {
  /** The details regarding the transaction(Posting). */
  transactions?: DetailPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
}

export interface RoomRoutingPostings {
  /** Transaction details along with the transaction code information. */
  postingsForRoomRouting?: PostingsInfoType;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to create a routing instruction. */
export interface RoutingInstructions {
  /** Reservation routing criteria defining the routing information to be created. */
  criteria?: ResvRoutingCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** A routing info object can either be of type Folio OR of type Room with its corresponding object. */
export interface ResvRoutingCriteriaType {
  /** Folio routing type. */
  folio?: {
    /** Guest details */
    guestInfo?: {
      /** Unique identifiers for the Profile for both internal and external systems. */
      profileIdList?: ProfileIdList;
    };
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Accounts Receivable.
     * @minLength 0
     * @maxLength 20
     */
    aRNumber?: string;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
    /** @maxLength 2000 */
    paymentMethod?: string;
  };
  /** Room routing type. */
  room?: {
    /**
     * Room number to route the instructions.
     * @minLength 0
     * @maxLength 20
     */
    roomId?: string;
    /** Guest unique identifier to which the instruction will be routed. */
    guestNameId?: UniqueIDType;
    /**
     * Display Name for the guest.
     * @minLength 0
     * @maxLength 80
     */
    guestDisplayName?: string;
    /** Reservation name id to which the instruction will be routed. */
    reservationNameId?: UniqueIDType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** Comp Accounting Routing Info */
  comp?: {
    /** Authorizer Information */
    compAccountingInfo?: CompAccountingType;
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /** Payee information. */
    payeeInfo?: PayeeInfoType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
    folioWindowNo?: number;
  };
  /** Comp Accounting Request routing */
  request?: {
    /** Type for the details of a Comp Routing Request */
    compRequestInfo?: CompRoutingRequestType;
    /**
     * Set of routing instructions associated to this routing type.
     * @maxItems 4000
     */
    instructions?: RoutingInstructionType[];
  };
  /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
  refreshFolio?: boolean;
  /**
   * Hotel context of the reservation.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique ID of a reservation. */
  reservationId?: ReservationId;
  /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
  retrievePostingsForRoomRouting?: boolean;
}

/** Response when creating a routing instruction. It may optionally return a list of postings which are eligible for transfer as per the new routing instruction in case of room routing instruction. */
export interface CreatedRoutingInstructions {
  /** Transaction details along with the transaction code information. */
  postingsForRoomRouting?: PostingsInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response for the refund deposit payment. */
export interface DepositRefundEligibleCheck {
  /** Is reservation valid for deposit refund. */
  isDepositRefundValid?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to split deposit transaction for a reservation. */
export interface SplitDepositTransaction {
  /** Deposit transaction info to split. */
  depositTransaction?: DepositTransactionType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Deposit transaction of a reservation. */
export interface DepositTransactionType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id of the reservation */
  reservationId?: UniqueIDType;
  /** The unique transaction number associated with transaction group. */
  transactionNo?: number;
  /** The amount by which the deposit transaction has to be split. */
  splitAmount?: CurrencyAmountType;
  /** The original deposited amount. */
  originalAmount?: CurrencyAmountType;
}

/** Response after spliting deposit transaction. */
export interface SplitDepositTransactionStatus {
  /** Collection of transactions. */
  transactions?: TransactionsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request for transaction folio(s) to specific window */
export interface FolioToWindow {
  /** Folio(s) transfer criteria. */
  criteria?: FolioTransferCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Folio(s) Transfer Criteria type to be used for folio transfer request. */
export interface FolioTransferCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id from where folio will be transfered. */
  reservationId?: ReservationId;
  /** Folio Window Number to where transactions will be transfered. */
  targetFolioWindowNo?: number;
  /**
   * List of folios to be transfered.
   * @maxItems 7
   */
  folioList?: number[];
  /**
   * Folio style of the folios to be transferred.
   * @minLength 0
   * @maxLength 20
   */
  folioStyle?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request for transaction transfer */
export interface TransactionToWindow {
  /** Transaction transfer criteria. */
  criteria?: TrxTransferCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Transactions can be transferred to either a FolioWindow Number of the same reservation or to another Inhouse Reservation. */
export interface TrxTransferCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id from where transactions will be transfered. */
  reservationIdList?: ReservationIdList;
  /** Unique ID of Membership. */
  membershipIdNo?: number;
  /** Folio Window Number to where transactions will be transfered. */
  targetFolioWindowNo?: number;
  /** Reservation Id where the transactions will be transferred. */
  targetReservationIdList?: UniqueIDListType;
  /**
   * List of transactions to be transfered.
   * @maxItems 4000
   */
  transactionList?: number[];
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  authorizerId?: UniqueIDType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Existing Operations Responses will eventually be modified to be extended from this type. */
export interface TransferTransactionToWindow {
  /**
   * Generated transaction number on destination window.
   * @maxItems 4000
   */
  transactions?: number[];
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to Void a Guest Folio when the Void Functionality is active. */
export interface FolioToVoid {
  /** Criteria for Voiding a Guest Folio. */
  criteria?: VoidFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for Voiding a Folio. */
export interface VoidFolioCriteriaType {
  /**
   * Property where the Folio exists which has to be voided.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation to which the Folio belongs. */
  reservationId?: ReservationId;
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /** Bill Information of the original bill for which the Credit Bill is being generated . */
  associatedBillInfo?: AssociatedBillInfoType;
  /** Folio Number. */
  folioNo?: number;
  /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
  invoiceNo?: number;
  /**
   * The Fiscal Bill number of this posting
   * @minLength 0
   * @maxLength 2000
   */
  fiscalBillNo?: string;
  /**
   * The name of the Folio Type used for the Folio Number sequence.
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
  /**
   * Internal window ID which is unique to the reservation. This ID can only be used for reference.
   * @minLength 0
   * @maxLength 20
   */
  internalFolioWindowID?: string;
  /**
   * Date of Folio Generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status. */
  folioStatus?: FolioStatusType;
  /**
   * The folio number with prefix value.
   * @minLength 0
   * @maxLength 200
   */
  folioNoWithPrefix?: string;
  /** Unique sequence number. Used to identify the current folio tax record. */
  folioSeqNo?: number;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /**
   * Folio Queue name to generate a credit bill for fiscal service.
   * @minLength 0
   * @maxLength 2000
   */
  fiscalCreditBillQueueName?: string;
}

/** Response to the request for voiding a Guest Folio. */
export interface VoidedFolio {
  /** Generated fiscal credit bill information. */
  fiscalCreditBillFolio?: FolioWindowType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to transfer a deposit amount from one reservation to one or more reservations. */
export interface DepositTransferCriteria {
  /** Criteria for the deposit transfer between reservations. */
  criteria?: DepositTransferCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria type for transfer of deposit amount from one reservation to one or more reservation(s). */
export interface DepositTransferCriteriaType {
  /**
   * Property where the reservation exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The unique Id of the source reservation. */
  reservationId?: ReservationId;
  /**
   * The reservation id and the amount to transfer detail.
   * @maxItems 4000
   */
  toReservations?: DepositTransferToReservationType[];
  /**
   * User Comments for the transfer operation.
   * @minLength 0
   * @maxLength 2000
   */
  comments?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Deposit Transfer detail for the target reservation. */
export interface DepositTransferToReservationType {
  /** The unique ID of the reservation to which the deposit has to be transferred. */
  reservationId?: ReservationId;
  /** The deposit amount which has to be transferred to this reservation. */
  transferAmount?: CurrencyAmountType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request to transfer a transaction(s) to a reservation. In the criteria, the target Reservation Id is required for the transfer. */
export interface ReservationTransaction {
  /** Transaction transfer criteria. Target Reservation Id is required. */
  criteria?: ReservationTrxTransferCriteria;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for transaction transfer. The choice element should have the target Reservation Id. */
export interface ReservationTrxTransferCriteria {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Reservation id from where transactions will be transfered. */
  reservationIdList?: ReservationIdList;
  /** Unique ID of Membership. */
  membershipIdNo?: number;
  /** Folio Window Number to where transactions will be transfered. */
  targetFolioWindowNo?: number;
  /** Reservation Id where the transactions will be transferred. */
  targetReservationIdList?: UniqueIDListType;
  /**
   * List of transactions to be transfered.
   * @maxItems 4000
   */
  transactionList?: number[];
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  authorizerId?: UniqueIDType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response object for hotel room revenue for all HHonors redemption reservation. */
export interface HotelRevenueDetails {
  /** Hotel Room Revenue type. */
  hotelRevenue?: HotelRevenueType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Hotel revenue type. */
export interface HotelRevenueType {
  /** Total room revenue for this hotel. */
  roomRevenue?: number;
  /** Total house revenue for this hotel. */
  houseRevenue?: number;
  /** Total comp revenue for this hotel. */
  compRevenue?: number;
  /** Total occupied revenue for this hotel. */
  occupiedRooms?: number;
  /** Total house rooms for this hotel. */
  houseRooms?: number;
  /** Total comp rooms for this hotel. */
  compRooms?: number;
  /** Total zero rooms revenue for this hotel. */
  zeroRoomsRevenue?: number;
  /**
   * The base currency code for this hotel.
   * @minLength 0
   * @maxLength 20
   */
  currencyCode?: string;
}

export interface BillingInstructionCodes {
  /** Set of Transaction Code results. */
  transactionCodes?: TrxCodesInfoType;
  /** Set of Billing Instruction results. */
  billingInstructions?: BillingInstructionsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Method to create package allowance link from a source reservation to the target reservation. */
export interface LinkReservationPackageAllowance {
  /** Property code of the source and target reservations. */
  hotelId?: CodeType;
  /** Reservation Id which is the source reservation for creating package link. */
  linkFromReservationId?: UniqueIDType;
  /** Reservation Id which is the target reservation for creating package link. */
  linkToReservationId?: UniqueIDType;
  /** If set to TRUE, the source reservation contributes its allowance(s) to the linked allowance pool and is able to draw from the allowances of the target reservation and/or any other source rooms linked to the target room. */
  consumeSharedAllowances?: boolean;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response object that lists the transactions that can be refreshed when a routing instruction set is refreshed. */
export interface PostingsForRefresh {
  /** Transaction details along with the transaction code information. */
  postingsForRoomRouting?: PostingsInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** The request object for processing refreshing of a routing instruction set. This operation transfers the postings to the respective reservation as per the routing instruction set which is created, edited, deleted or refreshed. */
export interface RoomRoutingRefresh {
  /** Criteria to process room routing refresh. */
  roomRoutingRefreshCriteria?: RoomRoutingRefreshCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for refreshing the routing instruction set. */
export interface RoomRoutingRefreshCriteriaType {
  /**
   * Property code where the routing instruction set exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Source reservation id of the routing instruction set. */
  resvNameId?: UniqueIDType;
  /** Target reservation id of the routing instruction set. */
  targetResvNameId?: UniqueIDType;
  /** Old reservation id of the routing instruction set after it is edited. */
  originalTargetResvNameId?: UniqueIDType;
  /** List of transaction number for which the details are required. */
  status?: RoutingInstructionStatusType;
  /** Flag to indicate whether to fetch transaction from both reservations. */
  fromBothResvs?: boolean;
  /**
   * Unique Transaction Number of the transaction(posting) which need to be transferred.
   * @maxItems 4000
   */
  transactions?: number[];
  /** Set of routing instructions associated to this routing type. */
  instructions?: RoutingInstructionType;
}

/** Routing instruction set is deleted. */
export enum RoutingInstructionStatusType {
  RoutingInstructionNew = 'RoutingInstructionNew',
  RoutingInstructionEdited = 'RoutingInstructionEdited',
  RoutingInstructionRemoved = 'RoutingInstructionRemoved',
}

/** Response object for fetch stored folio details operation */
export interface StoredFolioDetailsInfo {
  /** details of the Stored Folio */
  storedFolioDetails?: StoredFolioDetailsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Stored Folio Details type.Folio can be printed/viewed without re-generation. */
export interface StoredFolioDetailsType {
  /**
   * Folio Report URL.
   * @minLength 0
   * @maxLength 32000
   */
  folioReportURL?: string;
  /**
   * Hotel code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** ID of the Stored Folio. */
  storedFolioId?: UniqueIDType;
  /**
   * Name of the Stored Folio file.
   * @minLength 0
   * @maxLength 2000
   */
  storedFolioFileName?: string;
  /** Report status. Report status can be Success */
  reportStatus?: StatusType;
}

/** Status of the batch process. */
export enum StatusType {
  Success = 'Success',
  Error = 'Error',
  Running = 'Running',
  Stopped = 'Stopped',
  Warning = 'Warning',
  Failed = 'Failed',
  Started = 'Started',
  CompletedWithLogs = 'CompletedWithLogs',
}

/** Request object to update stored folio details. */
export interface StoredFolioDetails {
  /** Stored folio details type. */
  storedFolioDetails?: StoredFolioDetailsType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to post a Supplemental Folio for an existing Folio. Debit Bill ( Supplemental Folio ) Functionality parameter is required */
export interface PostSupplementalFolio {
  /** Criteria for creating the Supplemental Folio. This should include all charges and payments for the Supplemental Folio. */
  criteria?: SupplementalFolioCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria for posting the Supplemental Folio. Includes charges and payments. */
export interface SupplementalFolioCriteriaType {
  /**
   * Property where the charges are to be posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Information regarding the charges which have to be posted. */
  charges?: ChargesCriteriaType;
  /**
   * The payment information to be posted.
   * @maxItems 4000
   */
  payments?: PaymentCriteriaType[];
  /** Generate Fiscal Folio Criteria type to be used for fiscal folio generation. */
  fiscalFolioInfo?: FiscalServiceType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
  fiscalTerminalId?: string;
  /**
   * Custom Folio Name Value Informatoin to be saved
   * @maxItems 4000
   */
  folioNameValue?: NameValueHeaderDetailType[];
  /**
   * Transaction service type which the Folio is being associated.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Original Folio details. This is the folio for which a Supplemental Folio is required. */
  originalFolio?: FolioType;
}

/** Response for the request to create Supplemental Folio. */
export interface PostSupplementalFolioStatus {
  /**
   * Information regarding the new Supplemental Folio created.
   * @maxItems 4000
   */
  folioWindow?: FolioWindowType[];
  /** Deposit payment information of the payment which was posted. */
  payments?: DetailPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response that contains either the Transaction Code list if fetch was successful or error(s) if not. */
export interface TransactionCodes {
  /** List of TransactionCode. Contains information on Transaction Code, TransactionCode Description Its Group and Sub Group. */
  trxCodes?: TrxCodesPostingInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of TransactionCodes
 * @maxItems 4000
 */
export type TrxCodesPostingInfoType = TrxPostingInfoType[];

/** Transaction codes info. */
export interface TrxPostingInfoType {
  /**
   * Transaction codes info.
   * @minLength 0
   * @maxLength 2000
   */
  description?: string;
  /**
   * Category of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionGroup?: string;
  /**
   * Sub category of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionSubGroup?: string;
  /**
   * Unique Universal product code of the transaction code.
   * @minLength 0
   * @maxLength 20
   */
  universalProductCode?: string;
  /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
  routingInstructionsId?: number;
  /**
   * The List of Articles defined for this transaction code, when using the Articles functionality.
   * @maxItems 4000
   */
  articles?: ArticleInfoType[];
  /**
   * Contains service type for transaction code.
   * @minLength 0
   * @maxLength 20
   */
  trxServiceType?: string;
  /**
   * Unique identifier for the Transaction code.
   * @minLength 0
   * @maxLength 20
   */
  transactionCode?: string;
  /**
   * Hotel context of the Transaction code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Print receipt flag that tells whether the transaction receipt is to be printed or not. This is based on the transaction code. */
  printTrxReceipt?: boolean;
  /** Default price of that transaction code. */
  price?: CurrencyAmountType;
  /** Minimum quantity needs to be posted. */
  minimumPrice?: CurrencyAmountType;
  /** Maximum quantity limitation of posting. */
  maximumPrice?: CurrencyAmountType;
}

/** Response for the fetch transaction details request. Detail information regarding the folio transaction will be returned */
export interface FolioTransactionDetails {
  /** The details regarding the transaction(Posting). */
  transactions?: DetailPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Lists a summary of transactions of guests. */
export interface GuestsTransactions {
  /** Folio details for the requested reservation/s. */
  reservationFolioInformation?: ReservationFolioInfoType[];
  /** Transaction codes information which are in response folio. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to adjust a transaction. In order to adjust a transaction, a valid amount or percentage is required. A valid reason code and reason text is also required. Only negative adjustments are done. The adjust process will post a new negative transaction for the same transaction code for the current day. */
export interface TransactionsAdjustment {
  /** Criteria for the transaction adjustment. To adjust a transaction, a valid amount or percentage and a valid reason code and text are required. */
  criteria?: TrxAdjustCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface TrxAdjustCriteriaType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique identifier of the reservation. */
  reservationId?: ReservationId;
  /**
   * The unique transaction number of this transaction.
   * @maxItems 4000
   */
  transactionList?: number[];
  /** The criteria required for the transaction adjustment. Adjustments can be done either by an amount or by a percentage. Atleast one should be defined. */
  details?: AdjustmentDetailsType;
  /**
   * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
   * @format date
   * @maxLength 8
   */
  incomeAuditDate?: string;
  /**
   * The AR Account Number for the Account.
   * @minLength 0
   * @maxLength 20
   */
  aRAccountNo?: string;
  /** The AR Invoice Number for the Account. */
  aRInvoiceNo?: number;
  /** List of Custom Charge Exemptions. */
  customChargeExemptionDetails?: CustomChargeExemptionsType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Details regarding adjustments of transactions. Adjustment of transactions requires a amount/percentage and the adjustment reason. */
export interface AdjustmentDetailsType {
  /** The Amount by which the transaction has to be adjusted. */
  amount?: CurrencyAmountType;
  /**
   * The percentage by which the transaction has to be adjusted.
   * @min 0
   * @max 100
   */
  percentage?: number;
  /**
   * The reason code for the adjustment.
   * @minLength 0
   * @maxLength 20
   */
  reasonCode?: string;
  /**
   * The reason text for the adjustment.
   * @minLength 0
   * @maxLength 2000
   */
  reasonDescription?: string;
  /**
   * The department name or ID with which the adjustment is associated.
   * @minLength 0
   * @maxLength 20
   */
  department?: string;
}

/**
 * List of Custom Charge Exemptions.
 * @maxItems 4000
 */
export type CustomChargeExemptionsType = CustomChargeExemptionType[];

/** Contains custom charges exemption information. */
export interface CustomChargeExemptionType {
  /** Contains exemption code and description. */
  customChargesExemption?: CodeDescriptionType;
  /** Contains exemption quantity for the stay. When this value is configured, daily exemption quantities are not permitted. */
  customChargeQuantity?: CustomChargeQuantityType;
  /** Contains exemption detail information for each date. */
  customChargeDates?: CustomChargeExemptionDatesType;
  /** Contains list of dates which are not valid for custom charge exemptions. */
  excludedDates?: ExcludedDatesType;
  /**
   * Exemption Percentage
   * @min 0
   * @max 100
   */
  percentage?: number;
  /** Flag specifying if custom charge exemptions is property level or not. */
  propertyExemption?: boolean;
}

/** Contains quantity of custom charge exemptions. */
export interface CustomChargeQuantityType {
  /** Contains number of Custom Charge Exemption for a day. */
  quantity?: number;
  /** Indicates if Custom Charges Exemption information is editable. */
  available?: boolean;
}

/**
 * Contains List of Custom Charge Exemption information for a day.
 * @maxItems 4000
 */
export type CustomChargeExemptionDatesType = CustomChargeExemptionDateType[];

/** Contains Custom Charge Exemption information for a day. */
export interface CustomChargeExemptionDateType {
  /**
   * Contains Custom Charge Exemption date.
   * @format date
   * @maxLength 8
   */
  date?: string;
  /** Contains number of Custom Charge Exemption for a day. */
  quantity?: number;
}

/**
 * Contains list of dates which are valid for custom charge exemptions.
 * @maxItems 4000
 */
export type ExcludedDatesType = ExcludedDateType[];

/** Specifies all the enabled dates. */
export interface ExcludedDateType {
  /**
   * Contains exclusion date.
   * @format date
   * @maxLength 8
   */
  date?: string;
  /** Contains reason for exclusion. */
  reason?: ExclusionReasonType;
}

/** Custom Charge has already been Processed for this date within the reservation stay. */
export enum ExclusionReasonType {
  NotConfigured = 'NotConfigured',
  CustomChargeProcessed = 'CustomChargeProcessed',
}

/** Response for the adjustment of transactions request. Contains any errors or warnings. */
export interface AdjustedTransactions {
  /** List of service recovery adjustment.This will only return if Adjust is service recovery type. */
  serviceRecoveryAdjustments?: SummaryPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to split a transaction on a reservation. Splitting of transactions requires a list of transactions and a valid amount or a percentage by which the amount can be split. Based on parameters, certain transactions cannot be split. Transaction which are included in an invoice cannot be split Transactions where the generates resides elsewhere(reservation or window) cannot be split. Automatically generated transactions such as taxes, cannot be split by itself. Deposits which were part of a deposit folio cannot be split. After the split is done the transaction resides on the same folio window as the original transaction. */
export interface TransactionToSplit {
  /** Transaction Split criteria. An Amount or a Percentage is required along with the transactions to split. */
  criteria?: TrxSplitCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Criteria which should be used for Splitting a financial transaction which belongs to a reservation. */
export interface TrxSplitCriteriaType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The unique transaction number of this transaction.
   * @maxItems 4000
   */
  transactionList?: number[];
  /** The criteria required for the transaction splitting. Splitting can be done either by an amount or by a percentage. Atleast one should be defined. */
  splitDetails?: {
    /** The Amount by which the transaction has to be split. */
    amount?: CurrencyAmountType;
    /**
     * The percentage by which the transaction has to be split.
     * @min 0
     * @max 100
     */
    percentage?: number;
    /** The quantity to split. This can be used only if the original quantity of the transaction(s) was > 1. */
    quantity?: number;
  };
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request to split a transaction on a reservation and transfer the new transaction to a different reservation or a different window on the same reservation. Splitting of transactions requires a In-house target reservation, a list of transactions for a In-house reservation and a valid amount or a percentage by which the amount can be split. Based on parameters, certain transactions cannot be split. Transaction which are included in an invoice cannot be split Transactions where the generates resides elsewhere(reservation or window) cannot be split. Automatically generated transactions such as taxes, cannot be split by itself. Deposits which were part of a deposit folio cannot be split. After the split is done the transaction is transferred to the target reservation/window. */
export interface TransactionToSplitAndTransfer {
  /** Transaction Split and Transfer criteria. A target reservation or a target window, and an Amount or a Percentage is required along with the transactions to split. */
  criteria?: TrxSplitAndTransferCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Type to define the criteria for Splitting and Transferring the new transaction. */
export interface TrxSplitAndTransferCriteriaType {
  /**
   * Property code where the reservation transaction exists.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * The unique transaction number of this transaction.
   * @maxItems 4000
   */
  transactionList?: number[];
  /** The criteria required for the transaction splitting. Splitting can be done either by an amount or by a percentage. Atleast one should be defined. */
  splitDetails?: {
    /** The Amount by which the transaction has to be split. */
    amount?: CurrencyAmountType;
    /**
     * The percentage by which the transaction has to be split.
     * @min 0
     * @max 100
     */
    percentage?: number;
    /** The quantity to split. This can be used only if the original quantity of the transaction(s) was > 1. */
    quantity?: number;
  };
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Reservation Id where the new transactions will be transferred after the split. */
  targetReservationIdList?: UniqueIDListType;
  /** Folio Window Number to where the new transactions , after split, will be transfered. */
  targetFolioWindowNo?: number;
}

/** Response notifying if transaction code is valid. */
export interface ValidatedTransactionCode {
  /** Hotel context where the Transaction Code will be validated. */
  hotelId?: CodeType;
  /** Transaction Code. */
  trxCode?: CodeType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request object to submit a comp transaction to gaming system */
export interface CompTransactionCriteria {
  /** Hotel code. */
  hotelId?: CodeType;
  /** Transaction Number for which request is being submitted. */
  trxNo?: number;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request to edit a billing charge information. */
export interface BillingCharge {
  /** Criteria for the charge information to be edited. */
  criteria?: ChangeChargeCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface ChangeChargeCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Transaction number of the posting being corrected. */
  transactionNo?: number;
  /** Corrected charge price. */
  price?: CurrencyAmountType;
  /** Corrected posting quantity. */
  quantity?: number;
  /**
   * Corrected user-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Corrected user-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * Corrected Cheque number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * Corrected Revenue Date.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /**
   * Corrected POS covers - number of copies of receipts that got printed for that particular receipt.
   * @minLength 0
   * @maxLength 10
   */
  covers?: string;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /**
   * Approval date of the posting.
   * @format date
   * @maxLength 8
   */
  approvalDate?: string;
  /**
   * External message coming from the vendor that explains the status of transaction.
   * @minLength 0
   * @maxLength 200
   */
  message?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Existing Operations Responses will eventually be modified to be extended from this type. */
export interface BillingChargeStatus {
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response object for fetch gaming info */
export interface GamingRequestStatusInfo {
  /** details of the guest request provided by the external system */
  statusInfo?: GamingRequestStatusInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * List of guest request status details.
 * @maxItems 4000
 */
export type GamingRequestStatusInfoType = GamingRequestStatusType[];

/** Type that holds guest request status details. */
export interface GamingRequestStatusType {
  /**
   * Hotel code corresponding to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Status code from the External System..
   * @minLength 0
   * @maxLength 200
   */
  statusCode?: string;
  /**
   * Status of the request.
   * @minLength 0
   * @maxLength 50
   */
  status?: string;
  /** Message Id from the External System. */
  messageId?: number;
  /**
   * Message sent from the External System regarding the status of this request.
   * @minLength 0
   * @maxLength 2000
   */
  messageText?: string;
  /**
   * Date the request was sent.
   * @format date
   * @maxLength 8
   */
  requestDate?: string;
}

/** Request to change a payment posting. */
export interface BillingPaymentToChange {
  /** Criteria for the payment information to be edited. */
  criteria?: ChangePaymentCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface ChangePaymentCriteriaType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Transaction number of the payment being corrected. */
  transactionNo?: number;
  /**
   * Corrected user-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Corrected user-defined posting remark.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * Corrected Cheque number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * Corrected POS covers - number of copies of receipts that got printed for that particular receipt.
   * @minLength 0
   * @maxLength 10
   */
  covers?: string;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Request to detach a deposit payment from a Deposit Policy on a reservation. */
export interface DetachPolicyApplyCriteria {
  /** Criteria for unlinking a Deposit Policy from an existing deposit payment. */
  criteria?: PolicyApplyCriteriaType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request for posting payment reversal. */
export interface PaymentReversalCriteria {
  /** Information regarding the payment transaction to be reversed. */
  payment?: PaymentReversalType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Information regarding the payment transaction to be reversed. */
export interface PaymentReversalType {
  /**
   * Hotel context of the transaction.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** Unique identifier of the transaction to be reversed. */
  transactionNo?: number;
  /**
   * The reason code for payment reversal.
   * @minLength 0
   * @maxLength 20
   */
  reasonCode?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response for the fetch balance request. This will contain the current balance for the criteria requested. */
export interface BalanceInfoCriteria {
  /** The total balance for the set of charges. */
  balance?: CurrencyAmountType;
  /** List of Postings produced for the set of charges. */
  postings?: SummaryPostingsType;
  /** Transaction codes information which are in response postings. */
  trxCodesInfo?: TrxCodesInfoType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type for comp transactions transfer. */
export interface TransferCompTransactions {
  /** Comp transactions transfer criteria. */
  criteria?: {
    /** Folio window number to where transactions will be transfered. */
    targetFolioNo?: number;
    /**
     * List of transactions to be transfered.
     * @maxItems 4000
     */
    transactionList?: number[];
    /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
    cashierId?: CashierId;
  };
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request type for batch zero balance checkout. */
export interface BatchZeroBalanceCheckoutReservation {
  /** Criteria for batch zero balance checkout. */
  criteria?: CheckoutZeroBalanceReservationType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface CheckoutZeroBalanceReservationType {
  /**
   * Property code.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
}

/** Response for batch zero balance check out. */
export interface BatchZeroBalanceCheckoutDetails {
  /** Batch process identifier. */
  processId?: StringLength40;
  /** Zero balance Reservations count identifier. */
  resvCount?: number;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

export interface PostRoomAndTaxForDayUse {
  /** Reservation Id for which room and tax is to be posted. */
  reservationId?: UniqueIDType;
  /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
  cashierId?: CashierId;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response to the request to fetch the rounding difference for a payment amount. */
export interface RoundingDifferenceAmount {
  /** The information regarding the rounding difference. */
  roundingDifference?: RoundingDifferenceAmountType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Information regarding the rounding difference which can be applied to the payment amount, based on the payment method. */
export interface RoundingDifferenceAmountType {
  /**
   * Property where the payment is being posted.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /** The amount for which the rounding is to be applied. */
  amount?: CurrencyAmountType;
  /** The rounding difference amount. */
  roundingDifference?: CurrencyAmountType;
}

/** Response for Ping operation. */
export interface OperaVersion {
  /** Opera version number. */
  operaVersion?: OperaVersionNumberType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/**
 * Current Opera Version Number
 * @minLength 0
 * @maxLength 40
 */
export type OperaVersionNumberType = string;

/** Posting details. */
export interface PostingType {
  /** Generate transaction number for the Posting. */
  referenceTransactionNo?: number;
  /**
   * Posting remarks.
   * @minLength 0
   * @maxLength 2000
   */
  remark?: string;
  /**
   * User-defined posting reference.
   * @minLength 0
   * @maxLength 2000
   */
  reference?: string;
  /**
   * Check number for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkNo?: string;
  /**
   * Check number count for the posting.
   * @minLength 0
   * @maxLength 2000
   */
  checkCount?: string;
  /** Actual currency amount posted. */
  postedAmount?: CurrencyAmountType;
  /** Indicates the unit price of the consumption. */
  price?: CurrencyAmountType;
  /** Indicates Quantity. */
  quantity?: number;
  /** This is the transaction type which says whether it is a Consumption(C), Payment (FC) or Package (PK) and it is inherited from transaction code. */
  transactionType?: CashieringTransactionTypeType;
  /** The amount posted as credit to the ledger. */
  creditAmount?: CurrencyAmountType;
  /** The amount posted as debit to the ledger. */
  debitAmount?: CurrencyAmountType;
  /**
   * Information regarding the Article(Using Articles Functionality) of this transaction.
   * @minLength 0
   * @maxLength 20
   */
  articleCode?: string;
  /** Cashier information. Contains Id and Name details of the cashier. */
  cashierInfo?: CashierInfoType;
  /** Indicates if this transaction is a paid out transaction. */
  paidOut?: boolean;
  /**
   * Corrected arrangement code from the package associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  arrangementCode?: string;
  /** Information related to transaction grouping. */
  groupTypeInfo?: PostingGroupType;
  /**
   * Rate code associated to this transaction.
   * @minLength 0
   * @maxLength 20
   */
  rateCode?: string;
  /**
   * Comp redemption code assiciated to the transaction.
   * @minLength 0
   * @maxLength 20
   */
  compRedemptionCode?: string;
  /** Update info associated to this transaction. */
  updateInfo?: {
    /**
     * @format date
     * @maxLength 8
     */
    updateDate?: string;
    updateBy?: string;
  };
  /** Flag indicates that the posting is Flexible Benefits Awards Certificate */
  fbaCertificate?: boolean;
  /**
   * Tax invoice number generated by payment tax.
   * @minLength 0
   * @maxLength 20
   */
  taxInvoiceNo?: string;
  /** Flag to indicates service recovery */
  serviceRecovery?: boolean;
  /** Comp Postings information for the folio. */
  compPostingsInfo?: CompPostingsType;
  /** Collection of unique identifiers of the financial transactions. */
  financialTransactionIdList?: UniqueIDListType;
  /** Available when the Fetch Folio Search Type requests the amounts to be converted to a currency different from the Resort currency. */
  exchange?: ExchangeAmounts;
  /**
   * Approval code of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalCode?: string;
  /**
   * Approval status of the posting.
   * @minLength 0
   * @maxLength 20
   */
  approvalStatus?: string;
  /** Flag to identify a Stamp Duty Transaction. */
  stampDuty?: boolean;
  /** Flag to identify a Custom Charge. */
  customCharge?: boolean;
  /** Unique Transaction Identifier. */
  transactionNo?: number;
  /**
   * Transaction Date.
   * @format date
   * @maxLength 8
   */
  transactionDate?: string;
  /**
   * Billing Transaction Code.
   * @minLength 0
   * @maxLength 200
   */
  transactionCode?: string;
  /**
   * Billing Transaction Description.
   * @minLength 0
   * @maxLength 2000
   */
  transactionDescription?: string;
  /** The amount of the transaction. */
  transactionAmount?: number;
  /**
   * Date and time of posting.
   * @format date
   * @maxLength 8
   */
  postingDate?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** The receipt number of the transaction, if there is a receipt generated. */
  receiptNo?: number;
  /** Indicator to determine if the posting was a posting for the Rounding Difference. */
  roundingDifferenceTrx?: boolean;
  /** Indicator to determine if the transaction is commissionable. */
  commissionable?: boolean;
  /** Reverse payment transaction unique identifier. */
  reversePaymentTransactionNo?: number;
  /** Indicator to determine if the transaction can be adjusted. */
  canAdjustInvoice?: boolean;
  /**
   * Tax Service Accounting Codes used.
   * @minLength 0
   * @maxLength 40
   */
  depositTransactionId?: string;
}

/** Summary of the check with line item charges posted to a guest folio. */
export interface BillingCheckChargesSummaryType {
  /**
   * Indicates the check number.
   * @minLength 0
   * @maxLength 200
   */
  checkNumber?: string;
  /**
   * The date on which the transaction has its revenue effect.
   * @format date
   * @maxLength 8
   */
  revenueDate?: string;
  /** An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote). */
  reservationId?: ReservationId;
}

/** Criteria to generate digital signature hash. */
export interface GenerateFolioSignatureHashSearchType {
  /**
   * Hotel code of the folio.
   * @minLength 0
   * @maxLength 20
   */
  hotelId?: string;
  /**
   * Date of folio generation.
   * @format date
   * @maxLength 8
   */
  folioDate?: string;
  /** Folio number. */
  folioNo?: number;
  /**
   * Folio Type of the folio(Example: Ricevuta, Fattura).
   * @minLength 0
   * @maxLength 100
   */
  folioTypeName?: string;
}

/** Response for posting payment reversal. */
export interface PaymentReversal {
  /** Information regarding the reversed payment transaction. */
  reversedPayment?: PostingType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Response object for PostBillingCheckCharges operation. */
export interface BillingCheckChargesSummary {
  /** Summary of postings made for the check. */
  check?: BillingCheckChargesSummaryType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

/** Request object for generating the digital signature hash for folio. */
export interface GenerateFolioSignatureHash {
  /** Generate folio signature hash search type . */
  criteria?: GenerateFolioSignatureHashSearchType;
  links?: Links;
  /** Used in conjunction with the Success element to define a business error. */
  warnings?: WarningsType;
}

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, HeadersDefaults, ResponseType } from 'axios';

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestParams extends Omit<AxiosRequestConfig, 'data' | 'params' | 'url' | 'responseType'> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseType;
  /** request body */
  body?: unknown;
}

export type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>;

export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, 'data' | 'cancelToken'> {
  securityWorker?: (
    securityData: SecurityDataType | null,
  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  format?: ResponseType;
}

export enum ContentType {
  Json = 'application/json',
  FormData = 'multipart/form-data',
  UrlEncoded = 'application/x-www-form-urlencoded',
  Text = 'text/plain',
}

export class HttpClient<SecurityDataType = unknown> {
  public instance: AxiosInstance;
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker'];
  private secure?: boolean;
  private format?: ResponseType;

  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {
    this.instance = axios.create({ ...axiosConfig, baseURL: new URL('/csh/v1', axiosConfig.baseURL).toString() });
    this.secure = secure;
    this.format = format;
    this.securityWorker = securityWorker;
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {
    const method = params1.method || (params2 && params2.method);

    return {
      ...this.instance.defaults,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected stringifyFormItem(formItem: unknown) {
    if (typeof formItem === 'object' && formItem !== null) {
      return JSON.stringify(formItem);
    } else {
      return `${formItem}`;
    }
  }

  protected createFormData(input: Record<string, unknown>): FormData {
    return Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      const propertyContent: any[] = property instanceof Array ? property : [property];

      for (const formItem of propertyContent) {
        const isFileType = formItem instanceof Blob || formItem instanceof File;
        formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));
      }

      return formData;
    }, new FormData());
  }

  public request = async <T = any, _E = any>({
    secure,
    path,
    type,
    query,
    format,
    body,
    ...params
  }: FullRequestParams): Promise<AxiosResponse<T>> => {
    const secureParams =
      ((typeof secure === 'boolean' ? secure : this.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const responseFormat = format || this.format || undefined;

    if (type === ContentType.FormData && body && body !== null && typeof body === 'object') {
      body = this.createFormData(body as Record<string, unknown>);
    }

    if (type === ContentType.Text && body && body !== null && typeof body !== 'string') {
      body = JSON.stringify(body);
    }

    return this.instance.request({
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),
      },
      params: query,
      responseType: responseFormat,
      data: body,
      url: path,
    });
  };
}

/**
 * @title OPERA Cloud Cashiering API
 * @version 22.3.0.0
 * @license UPL (https://opensource.org/licenses/upl)
 * @termsOfService https://www.oracle.com/legal/terms.html
 * @baseUrl /csh/v1
 * @externalDocs https://docs.oracle.com/en/industries/hospitality/integration_platforms.html
 * @contact <hospitality_apis_ww_grp@oracle.com>
 *
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  cashierReportPostings = {
    /**
     * @description You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p>
     *
     * @tags Cashiering
     * @name GetCashierReportPostings
     * @summary Get Cashier Report Postings
     * @request GET:/cashierReportPostings
     */
    getCashierReportPostings: (
      hotelId: string,
      query?: {
        hotelId?: string[];
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        duration?: string;
        /**
         * Shift drop report created when cashier closure is completed. It is an integral part of closure report and is not to be printed or accessed by itself.
         * @uniqueItems true
         */
        requestType?:
          | 'Cash'
          | 'Check'
          | 'ForeignCurrency'
          | 'CreditCard'
          | 'Miscellaneous'
          | 'ArSettlements'
          | 'DepositTransfers'
          | 'Shiftdrop';
        /** The Cashier Shift Number. */
        closureNo?: number;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Cashier closure shift drop location code. */
        shiftDropLocationCode?: string;
        /** Cashier closure shift drop others payment method type bag number. */
        bagNumberForOthers?: string;
        /** Cashier closure shift drop cash payment method type bag number. */
        bagNumberForCash?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashierReportPostingsInfo, ExceptionDetailType>({
        path: `/cashierReportPostings`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  cashiers = {
    /**
     * @description You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     *
     * @tags Cashiering
     * @name PutCashier
     * @summary Close Cashier
     * @request PUT:/cashiers/{cashierId}/closure
     */
    putCashier: (hotelId: string, cashierId: string, cashierClosure: CashierClosure, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/cashiers/${cashierId}/closure`,
        method: 'PUT',
        body: cashierClosure,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     *
     * @tags Cashiering
     * @name GetCashierLock
     * @summary Acquire Cashier Locks
     * @request GET:/cashiers/{cashierId}/locks
     */
    getCashierLock: (hotelId: string, cashierId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AcquiredCashierLock, ExceptionDetailType>({
        path: `/cashiers/${cashierId}/locks`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     *
     * @tags Cashiering
     * @name BreakCashierLock
     * @summary Break Cashier Lock
     * @request DELETE:/cashiers/{cashierId}/locks
     */
    breakCashierLock: (hotelId: string, cashierId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/cashiers/${cashierId}/locks`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     *
     * @tags Cashiering
     * @name GetCashierTransactions
     * @summary Get Cashier Transactions
     * @request GET:/cashiers/{cashierId}/transactions
     */
    getCashierTransactions: (
      hotelId: string,
      cashierId: string,
      query?: {
        /** The Cashier Shift Number. */
        closureNo?: number;
        /** Cashier closure shift drop location code. */
        shiftDropLocationCode?: string;
        /** Cashier closure shift drop others payment method type bag number. */
        bagNumberForOthers?: string;
        /** Cashier closure shift drop cash payment method type bag number. */
        bagNumberForCash?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashierTransactionsDetails, ExceptionDetailType>({
        path: `/cashiers/${cashierId}/transactions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  cashiersLock = {
    /**
     * @description You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     *
     * @tags Cashiering
     * @name ReleaseCashierLock
     * @summary Release Cashier Lock
     * @request DELETE:/cashiersLock/{lockId}
     */
    releaseCashierLock: (hotelId: string, lockId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/cashiersLock/${lockId}`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  compAccountingJournal = {
    /**
     * @description You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompAccountingJournal</p>
     *
     * @tags Cashiering
     * @name GetCompAccountingJournal
     * @summary Get Comp Accounting Journal
     * @request GET:/compAccountingJournal
     */
    getCompAccountingJournal: (
      hotelId: string,
      query?: {
        /** Indicates maximum number of records a Web Service should return. */
        limit?: number;
        /**
         * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
         * @default 0
         */
        offset?: number;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        duration?: string;
        filterTransactionCode?: string[];
        hotelId?: string[];
        filterRoomNumber?: string[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
        /** Filters the results for approval code. */
        approvalCode?: string;
        code?: string[];
        authorizerNameCode?: string[];
        /** Filters the results for reference number. */
        referenceNumberWildCard?: string;
        /** Filter the results for supplement. */
        supplementWildCard?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CompAccountingJournal, ExceptionDetailType>({
        path: `/compAccountingJournal`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  fbaReimbursements = {
    /**
     * @description You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     *
     * @tags Cashiering
     * @name PostFbaReimbursement
     * @summary Create FBA Reimbursement
     * @request POST:/fbaReimbursements
     */
    postFbaReimbursement: (
      hotelId: string,
      fbaReimbursementCriteria: FbaReimbursementCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/fbaReimbursements`,
        method: 'POST',
        body: fbaReimbursementCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  fbaSettlements = {
    /**
     * @description You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     *
     * @tags Cashiering
     * @name PostFbaSettlement
     * @summary Create FBA Settlement
     * @request POST:/fbaSettlements
     */
    postFbaSettlement: (
      hotelId: string,
      fbaReimbursementCriteria: FbaReimbursementCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/fbaSettlements`,
        method: 'POST',
        body: fbaReimbursementCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  foreignCurrency = {
    /**
     * @description This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     *
     * @tags Cashiering
     * @name CalculateForeignCurrency
     * @summary Calculate Foreign Currency
     * @request PUT:/foreignCurrency
     */
    calculateForeignCurrency: (
      hotelId: string,
      foreignCurrencyCriteria: ForeignCurrencyCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CalculatedForeignCurrency, ExceptionDetailType>({
        path: `/foreignCurrency`,
        method: 'PUT',
        body: foreignCurrencyCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  foreignCurrencyExchange = {
    /**
     * @description You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     *
     * @tags Cashiering
     * @name PostForeignCurrencyExchange
     * @summary Create Foreign Currency Exchange
     * @request POST:/foreignCurrencyExchange
     */
    postForeignCurrencyExchange: (
      hotelId: string,
      foreignCurrencyExchange: ForeignCurrencyExchange,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ForeignCurrencyExchangeTransaction, ExceptionDetailType>({
        path: `/foreignCurrencyExchange`,
        method: 'POST',
        body: foreignCurrencyExchange,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  hotels = {
    /**
     * @description You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     *
     * @tags Cashiering
     * @name PostAdvanceFolio
     * @summary Create Batch Advance Folio
     * @request POST:/hotels/{hotelId}/advanceFolio/batchJobs
     */
    postAdvanceFolio: (hotelId: string, batchAdvanceFolio: BatchAdvanceFolio, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/advanceFolio/batchJobs`,
        method: 'POST',
        body: batchAdvanceFolio,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     *
     * @tags Cashiering
     * @name PostArticlesSale
     * @summary Create Articles Sale
     * @request POST:/hotels/{hotelId}/articlesSale
     */
    postArticlesSale: (hotelId: string, articlesSaleCriteria: ArticlesSaleCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ArticlesSale, ExceptionDetailType>({
        path: `/hotels/${hotelId}/articlesSale`,
        method: 'POST',
        body: articlesSaleCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     *
     * @tags Cashiering
     * @name GetAuthorizersCreditInfo
     * @summary Get Authorizers Credit Info
     * @request GET:/hotels/{hotelId}/authorizers/credits
     */
    getAuthorizersCreditInfo: (
      hotelId: string,
      query?: {
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        duration?: string;
        code?: string[];
        /** This flag will notify the service if the Credit details will also be returned or not. */
        includeCreditDetails?: boolean;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AuthorizersCreditInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/authorizers/credits`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     *
     * @tags Cashiering
     * @name PostAutoCheckoutReservations
     * @summary Create Auto Checkout Reservation Batch
     * @request POST:/hotels/{hotelId}/autoCheckoutReservations/batchJobs
     */
    postAutoCheckoutReservations: (
      hotelId: string,
      batchAutoCheckoutReservation: BatchAutoCheckoutReservation,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BatchAutoCheckoutDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/autoCheckoutReservations/batchJobs`,
        method: 'POST',
        body: batchAutoCheckoutReservation,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     *
     * @tags Cashiering
     * @name PostBatchAutoSettlement
     * @summary Create Batch Auto Settlement
     * @request POST:/hotels/{hotelId}/autoSettlements/batchJobs
     */
    postBatchAutoSettlement: (
      hotelId: string,
      batchAutoSettlementCriteria: BatchAutoSettlementCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/autoSettlements/batchJobs`,
        method: 'POST',
        body: batchAutoSettlementCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     *
     * @tags Cashiering
     * @name PostBatchDeposit
     * @summary Create batch deposits
     * @request POST:/hotels/{hotelId}/batchDeposits
     */
    postBatchDeposit: (hotelId: string, batchDeposit: BatchDeposit, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/batchDeposits`,
        method: 'POST',
        body: batchDeposit,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     *
     * @tags Cashiering
     * @name GetBedTaxInfo
     * @summary Get bed tax information
     * @request GET:/hotels/{hotelId}/bedTax
     */
    getBedTaxInfo: (
      hotelId: string,
      query?: {
        /**
         * Arrival Date of the reservation
         * @format date
         */
        arrival?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BedTaxInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/bedTax`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     *
     * @tags Cashiering
     * @name PostBedTaxInfo
     * @summary Create bed tax information
     * @request POST:/hotels/{hotelId}/bedTax
     */
    postBedTaxInfo: (hotelId: string, bedTaxCriteria: BedTaxCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/bedTax`,
        method: 'POST',
        body: bedTaxCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     *
     * @tags Cashiering
     * @name PutBedTaxInfo
     * @summary Change bed tax information
     * @request PUT:/hotels/{hotelId}/bedTax/{taxRegistraitionNo}
     */
    putBedTaxInfo: (
      taxRegistraitionNo: string,
      hotelId: string,
      bedTaxCriteria: BedTaxCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/bedTax/${taxRegistraitionNo}`,
        method: 'PUT',
        body: bedTaxCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     *
     * @tags Cashiering
     * @name RemoveBedTaxInfo
     * @summary Delete bed tax information
     * @request DELETE:/hotels/{hotelId}/bedTax/{taxRegistraitionNo}
     */
    removeBedTaxInfo: (taxRegistraitionNo: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/bedTax/${taxRegistraitionNo}`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     *
     * @tags Cashiering
     * @name PutBillingCharges
     * @summary Change Billing Charges
     * @request PUT:/hotels/{hotelId}/billingCharges
     */
    putBillingCharges: (hotelId: string, putBillingCharges: PutBillingCharges, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PutBillingChargesStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/billingCharges`,
        method: 'PUT',
        body: putBillingCharges,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     *
     * @tags Cashiering
     * @name GetBatchCcSettlementsStatus
     * @summary Get Batch CC Settlements Status
     * @request GET:/hotels/{hotelId}/bulkCCSettlements/{batchId}/status
     */
    getBatchCcSettlementsStatus: (
      batchId: string,
      hotelId: string,
      query?: {
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CcBatchSettlementsStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/bulkCCSettlements/${batchId}/status`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     *
     * @tags Cashiering
     * @name GetCashierClosure
     * @summary Get Cashier Closure
     * @request GET:/hotels/{hotelId}/cashiers/{cashierId}/closure
     */
    getCashierClosure: (
      cashierId: string,
      hotelId: string,
      query?: {
        /** The Cashier Lock Handle to pass along with operation which required cashier to be locked. */
        cashierLockHandle?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashierClosureDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/cashiers/${cashierId}/closure`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     *
     * @tags Cashiering
     * @name GetCashierClosureReportsList
     * @summary Get Cashier Closure Reports List
     * @request GET:/hotels/{hotelId}/cashiers/{cashierId}/closureReports
     */
    getCashierClosureReportsList: (
      cashierId: string,
      hotelId: string,
      query?: {
        /** The Cashier Shift Number. */
        closureNo?: number;
        /** Cashier closure shift drop location code. */
        shiftDropLocationCode?: string;
        /** Cashier closure shift drop others payment method type bag number. */
        bagNumberForOthers?: string;
        /** Cashier closure shift drop cash payment method type bag number. */
        bagNumberForCash?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashierClosureReportsList, ExceptionDetailType>({
        path: `/hotels/${hotelId}/cashiers/${cashierId}/closureReports`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     *
     * @tags Cashiering
     * @name ReverseFolioTaxPayment
     * @summary Change folio tax payments
     * @request PUT:/hotels/{hotelId}/cashiers/{cashierId}/folioTaxPayments
     */
    reverseFolioTaxPayment: (
      cashierId: string,
      hotelId: string,
      transactionReversal: TransactionReversal,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioTaxPaymentReversal, ExceptionDetailType>({
        path: `/hotels/${hotelId}/cashiers/${cashierId}/folioTaxPayments`,
        method: 'PUT',
        body: transactionReversal,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     *
     * @tags Cashiering
     * @name PutCashierLock
     * @summary Extend Cashier Lock
     * @request PUT:/hotels/{hotelId}/cashierslock/{lockId}
     */
    putCashierLock: (
      lockId: string,
      hotelId: string,
      cashierLockCriteriaToExtend: CashierLockCriteriaToExtend,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ExtendedCashierLock, ExceptionDetailType>({
        path: `/hotels/${hotelId}/cashierslock/${lockId}`,
        method: 'PUT',
        body: cashierLockCriteriaToExtend,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     *
     * @tags Cashiering
     * @name PostCcSettlement
     * @summary Create CreditCard Settlement
     * @request POST:/hotels/{hotelId}/ccSettlement
     */
    postCcSettlement: (hotelId: string, ccSettlementCriteria: CcSettlementCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/ccSettlement`,
        method: 'POST',
        body: ccSettlementCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     *
     * @tags Cashiering
     * @name PostBatchCcSettlements
     * @summary Create Batch CC Settlements
     * @request POST:/hotels/{hotelId}/ccSettlements/batchJobs
     */
    postBatchCcSettlements: (
      hotelId: string,
      ccBatchSettlementsProcessCriteria: CcBatchSettlementsProcessCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/ccSettlements/batchJobs`,
        method: 'POST',
        body: ccBatchSettlementsProcessCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     *
     * @tags Cashiering
     * @name GetCheckDetails
     * @summary Get check details
     * @request GET:/hotels/{hotelId}/check/{checkNumber}
     */
    getCheckDetails: (checkNumber: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CheckDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/check/${checkNumber}`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     *
     * @tags Cashiering
     * @name PostGuestCheckDetails
     * @summary Post Guest Check Details
     * @request POST:/hotels/{hotelId}/check/{checkNumber}
     */
    postGuestCheckDetails: (
      checkNumber: string,
      hotelId: string,
      guestCheckDetails: GuestCheckDetails,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/check/${checkNumber}`,
        method: 'POST',
        body: guestCheckDetails,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     *
     * @tags Cashiering
     * @name VoidBillingCheckCharges
     * @summary Delete Billing Check Charges
     * @request DELETE:/hotels/{hotelId}/check/{checkNumber}/charges
     */
    voidBillingCheckCharges: (
      checkNumber: string,
      hotelId: string,
      query?: {
        /**
         * The date against which void (reverse) charges are posted.
         * @format date
         */
        revenueDate?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        reservationId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        reservationIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        reservationIdType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        checkId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        checkIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        checkIdType?: string;
        /** Cashier Id of the Cashier. */
        cashierId?: number;
        /** Text describing any applicable detail of the posting. */
        postingRemark?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/check/${checkNumber}/charges`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     *
     * @tags Cashiering
     * @name GetCashierClosureInfo
     * @summary Get Cashier Closure Information
     * @request GET:/hotels/{hotelId}/closureList
     */
    getCashierClosureInfo: (
      hotelId: string,
      query?: {
        /** The Cashier Shift Number. */
        closureNo?: number;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Cashier closure shift drop location code. */
        shiftDropLocationCode?: string;
        /** Cashier closure shift drop others payment method type bag number. */
        bagNumberForOthers?: string;
        /** Cashier closure shift drop cash payment method type bag number. */
        bagNumberForCash?: string;
        /**
         * Business Date of cashier closure.
         * @format date
         */
        closureBusinessDate?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashierClosureInformation, ExceptionDetailType>({
        path: `/hotels/${hotelId}/closureList`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name GetCompRoutingInstructions
     * @summary Get Comp Routing Instructions
     * @request GET:/hotels/{hotelId}/compRoutingInstructions
     */
    getCompRoutingInstructions: (
      hotelId: string,
      query?: {
        /**
         * The ending value of the date range.
         * @format date
         */
        end?: string;
        /**
         * The starting value of the date range.
         * @format date
         */
        start?: string;
        /** Family name or last name of the guest */
        nameWildcard?: string;
        /** Given name or first name of the guest. */
        firstNameWildCard?: string;
        roomNumberCodes?: string[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
        /** Membership Card number. */
        membershipId?: string;
        code?: string[];
        /**
         * This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.
         * @uniqueItems true
         */
        resStatusCode?: (
          | 'Reserved'
          | 'Requested'
          | 'NoShow'
          | 'Cancelled'
          | 'InHouse'
          | 'CheckedOut'
          | 'Waitlisted'
          | 'DueIn'
          | 'DueOut'
          | 'Walkin'
          | 'PendingCheckout'
        )[];
        /**
         * Status which indicates that the Request of Comp Routing was declined
         * @uniqueItems true
         */
        compRoutingStatuses?: ('Request' | 'Comp' | 'Declined')[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CompRoutingInstructions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/compRoutingInstructions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     *
     * @tags Cashiering
     * @name GetCompTrxAuthorizers
     * @summary Get Comp Trx Authorizers
     * @request GET:/hotels/{hotelId}/compTrxAuthorizers
     */
    getCompTrxAuthorizers: (
      hotelId: string,
      query?: {
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
        /** Folio Window Number to where transactions will be transfered. */
        targetFolioWindowNo?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string[];
        /** List of transactions to be transfered. */
        transaction?: number[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        authorizerIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        authorizerIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        authorizerIdType?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CompTrxAuthorizers, ExceptionDetailType>({
        path: `/hotels/${hotelId}/compTrxAuthorizers`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     *
     * @tags Cashiering
     * @name PostCreditBill
     * @summary Create Credit Bill
     * @request POST:/hotels/{hotelId}/creditBill
     */
    postCreditBill: (hotelId: string, creditBillCriteria: CreditBillCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostedCreditBill, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditBill`,
        method: 'POST',
        body: creditBillCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     *
     * @tags Cashiering
     * @name ValidateCreditBill
     * @summary Validate Credit Bill
     * @request PUT:/hotels/{hotelId}/creditBill/action/validate
     */
    validateCreditBill: (hotelId: string, creditBillCriteria: CreditBillCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ValidatedCreditBill, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditBill/action/validate`,
        method: 'PUT',
        body: creditBillCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     *
     * @tags Cashiering
     * @name GetCreditLimitOveragePayments
     * @summary Get Credit Limits Overage Payments
     * @request GET:/hotels/{hotelId}/creditLimitsOveragePayments
     */
    getCreditLimitOveragePayments: (
      hotelId: string,
      query?: {
        /** Guest name associated with the transaction. */
        guestNameWildCard?: string;
        /** Room number associated with the transaction. */
        roomNumberWildCard?: string;
        code?: string[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CreditLimitOveragePaymentsInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditLimitsOveragePayments`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     *
     * @tags Cashiering
     * @name PostCreditLimitOveragePayments
     * @summary Create Credit Limit Overage Payments
     * @request POST:/hotels/{hotelId}/creditLimitsOveragePayments
     */
    postCreditLimitOveragePayments: (
      hotelId: string,
      creditLimitOveragePayments: CreditLimitOveragePayments,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CreditLimitOveragePaymentsDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditLimitsOveragePayments`,
        method: 'POST',
        body: creditLimitOveragePayments,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     *
     * @tags Cashiering
     * @name RegisterVaultTransaction
     * @summary Register Vault Transaction
     * @request POST:/hotels/{hotelId}/creditcardTransaction/logs
     */
    registerVaultTransaction: (hotelId: string, vaultTransaction: VaultTransaction, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditcardTransaction/logs`,
        method: 'POST',
        body: vaultTransaction,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     *
     * @tags Cashiering
     * @name GetCcSurchargeInfo
     * @summary Get CC Surcharge Information
     * @request GET:/hotels/{hotelId}/creditcardsurcharge
     */
    getCcSurchargeInfo: (
      hotelId: string,
      query?: {
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        description?: string;
        folioView?: number;
        paymentMethod?: string;
        /** Track2 data for the card which would be sent to the CC vendor as part of the authorization. */
        track2Data?: string;
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** A monetary amount. */
        balanceAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
        /** The authorization rule code. */
        code?: number;
        /** A monetary amount. */
        amountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        amountCurrencyCode?: string;
        /** A percentage value if the authorization rule is percentage based. */
        percent?: number;
        emailFolio?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string;
        /**
         * Time stamp of the creation.
         * @format date-time
         */
        createDateTime?: string;
        /** ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation. */
        creatorId?: string;
        /** Defines the e-mail address. */
        emailAddress?: string;
        /**
         * Supported Email format.
         * @uniqueItems true
         */
        emailFormat?: 'Html' | 'Text';
        /** Identifies the last software system or person to modify a record. */
        lastModifierId?: string;
        /**
         * Time stamp of last modification.
         * @format date-time
         */
        lastModifyDateTime?: string;
        /** Display Order sequence. */
        orderSequence?: number;
        /** When true, indicates a primary information. */
        primaryInd?: boolean;
        /**
         * Date an item will be purged from a database (e.g., from a live database to an archive).
         * @format date
         */
        purgeDate?: string;
        /** Defines the purpose of the e-mail address (e.g. personal, business, listserve). */
        emailType?: string;
        /** Describes the Type code */
        typeDescription?: string;
        /** The approval code authenticates the authorization. */
        approvalCode?: string;
        /** Unique Authorization Sequence for the authorization and settlement. */
        originalAuthSequence?: number;
        /** Vendor transaction id for the authorization. */
        vendorTranId?: string;
        /** A monetary amount. */
        approvalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountCurrencyCode?: string;
        /** A monetary amount. */
        postingAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        postingAmountCurrencyCode?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CcSurchargeDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/creditcardsurcharge`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     *
     * @tags Cashiering
     * @name GetDepositFolio
     * @summary Get Deposit Folio
     * @request GET:/hotels/{hotelId}/depositFolio
     */
    getDepositFolio: (
      hotelId: string,
      query?: {
        /**
         * Simple type for deposit folio instructions that can be used in requests for partial operations.
         * @uniqueItems true
         */
        fetchInstructions?: 'ProjectedRevenue'[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        policyIdId?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        blockIdId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ReservationDepositFolios, ExceptionDetailType>({
        path: `/hotels/${hotelId}/depositFolio`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     *
     * @tags Cashiering
     * @name GetDepositFolioTransactionDetails
     * @summary Get Deposit Folio Transaction Details
     * @request GET:/hotels/{hotelId}/depositTransactions
     */
    getDepositFolioTransactionDetails: (
      hotelId: string,
      query?: {
        /** Flag to indicate if the automatically generated transactions, related to the main transaction number above, are also to be retrieved as part of this request. */
        includeGenerates?: boolean;
        /** Unique Transaction Number of the transaction(posting) for which details are required. */
        transactionNo?: number[];
        /** Flag to indicate what currency exchange information text needs to be included in response. */
        includeExchangeInformation?: boolean;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositFolioTransactionDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/depositTransactions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     *
     * @tags Cashiering
     * @name ValidateDepositFolio
     * @summary Validate Deposit Folio
     * @request PUT:/hotels/{hotelId}/depositfolios/action/validate
     */
    validateDepositFolio: (
      hotelId: string,
      depositFolioValidateCriteria: DepositFolioValidateCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositedFolioValidate, ExceptionDetailType>({
        path: `/hotels/${hotelId}/depositfolios/action/validate`,
        method: 'PUT',
        body: depositFolioValidateCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     *
     * @tags Cashiering
     * @name PostDepositPaymentByExtId
     * @summary Create Deposit Payment using external reference.
     * @request POST:/hotels/{hotelId}/externalSystems/{externalSysCode}/reservations/{reservationId}/depositPayments
     */
    postDepositPaymentByExtId: (
      reservationId: string,
      externalSysCode: string,
      hotelId: string,
      depositPayment: DepositPayment,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositedPayment, ExceptionDetailType>({
        path: `/hotels/${hotelId}/externalSystems/${externalSysCode}/reservations/${reservationId}/depositPayments`,
        method: 'POST',
        body: depositPayment,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p>
     *
     * @tags Cashiering
     * @name GetFinancialPostings
     * @summary Get Financial Postings
     * @request GET:/hotels/{hotelId}/financialPostings
     */
    getFinancialPostings: (
      hotelId: string,
      query?: {
        /** Indicates maximum number of records a Web Service should return. */
        limit?: number;
        /**
         * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
         * @default 0
         */
        offset?: number;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        duration?: string;
        /** Cashier Id of the Cashier. */
        cashierId?: number;
        filterTransactionCode?: string[];
        code?: string[];
        filterRoomNumber?: string[];
        /** Filters the results for reference number. */
        referenceNumberWildCard?: string;
        /** Filter the results for Cheque number's code. */
        checkNumberWildCard?: string;
        /** Filter the results for supplement. */
        supplementWildCard?: string;
        /** Filters the results for approval code. */
        approvalCode?: string;
        approvalStatusCode?: string[];
        /** Filters the result to only include transactions in this window number. */
        folioWindowNo?: number[];
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** Filters the result to only display the postings that were made during the cashier closure range */
        closureNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FinancialPostings, ExceptionDetailType>({
        path: `/hotels/${hotelId}/financialPostings`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     *
     * @tags Cashiering
     * @name PostFiscalCommandInvoice
     * @summary Create Fiscal Invoice
     * @request POST:/hotels/{hotelId}/fiscalCommands
     */
    postFiscalCommandInvoice: (
      hotelId: string,
      fiscalFolioCriteria: FiscalFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FiscalCommandsResponseInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/fiscalCommands`,
        method: 'POST',
        body: fiscalFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     *
     * @tags Cashiering
     * @name GetFiscalFolioActivity
     * @summary Get the Fiscal Folio Activity for a folio
     * @request GET:/hotels/{hotelId}/fiscalFolioResponse
     */
    getFiscalFolioActivity: (
      hotelId: string,
      query?: {
        /** Folio Sequence number for a folio */
        folioSeqNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioActivityDetailsType, ExceptionDetailType>({
        path: `/hotels/${hotelId}/fiscalFolioResponse`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     *
     * @tags Cashiering
     * @name GetFiscalFolioActivityDetails
     * @summary Get the Fiscal Folio Activity Response details for a folio
     * @request GET:/hotels/{hotelId}/fiscalFolioResponse/{folioSeqNo}
     */
    getFiscalFolioActivityDetails: (
      folioSeqNo: string,
      hotelId: string,
      query?: {
        /** Number of fiscal response attempt made for the folio */
        responseAttemptNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioActivityResponseDetailType, ExceptionDetailType>({
        path: `/hotels/${hotelId}/fiscalFolioResponse/${folioSeqNo}`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     *
     * @tags Cashiering
     * @name GenerateFiscalFolio
     * @summary Create Fiscal Information Folio
     * @request POST:/hotels/{hotelId}/fiscalFolios
     */
    generateFiscalFolio: (
      hotelId: string,
      fiscalInfoFolioCriteria: FiscalInfoFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FiscalInformationFolio, ExceptionDetailType>({
        path: `/hotels/${hotelId}/fiscalFolios`,
        method: 'POST',
        body: fiscalInfoFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     *
     * @tags Cashiering
     * @name GetValidateFiscalPrintingDetails
     * @summary Get Fiscal Printing Details
     * @request GET:/hotels/{hotelId}/fiscalPrinting
     */
    getValidateFiscalPrintingDetails: (
      hotelId: string,
      query?: {
        /** The folio window where this settlement is applied. */
        folioView?: number;
        /** Folio Type */
        folioType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        code?: string[];
        /**
         * Reservation Related information.
         * @uniqueItems true
         */
        fetchInstruction?: ('Paymentmethod' | 'Profile' | 'Foliotype' | 'Reservation')[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        profileIdId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FiscalCallStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/fiscalPrinting`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Convert folio. <p><strong>OperationId:</strong>convertFolio</p>
     *
     * @tags Cashiering
     * @name ConvertFolio
     * @summary Convert Folio
     * @request PUT:/hotels/{hotelId}/folio/{folioId}/convert
     */
    convertFolio: (
      folioId: string,
      hotelId: string,
      convertFolioCriteria: ConvertFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ConvertFolioDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folio/${folioId}/convert`,
        method: 'PUT',
        body: convertFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     *
     * @tags Cashiering
     * @name PostFiscalInvoice
     * @summary Create Fiscal Invoice
     * @request POST:/hotels/{hotelId}/folio/{folioId}/fiscalCommands
     * @deprecated
     */
    postFiscalInvoice: (
      folioId: string,
      hotelId: string,
      fiscalFolioCriteria: FiscalFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folio/${folioId}/fiscalCommands`,
        method: 'POST',
        body: fiscalFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     *
     * @tags Cashiering
     * @name GetFolioHistory
     * @summary Get folio history
     * @request GET:/hotels/{hotelId}/folioHistory
     */
    getFolioHistory: (
      hotelId: string,
      query?: {
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** Indicates if search includes AR Folios. */
        aR?: boolean;
        /** Indicates if search includes Check Out Folios. */
        checkOut?: boolean;
        /** Indicates if search includes Credit Bill Folios. */
        creditBill?: boolean;
        /** Indicates if search result includes Associated Bills and is only applied when Folio History for a particular reservation (i.e. ReservationID has a value) is requested. */
        includeAssociatedFolios?: boolean;
        /** Indicates if search includes No Show Folios. */
        noShow?: boolean;
        /** Indicates if search includes Offline Folios. */
        offlineFolio?: boolean;
        /** Indicates if search includes Passer By Folios. */
        passerBy?: boolean;
        /** Indicates if search includes Post-It Folios. */
        postIt?: boolean;
        /** Indicates if search includes Video Check Out Folios. */
        videoCheckOut?: boolean;
        /**
         * Folio History Date.
         * @format date
         */
        folioDate?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        reservationIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        reservationIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        reservationIdType?: string;
        /** Room Number to which this record applies. */
        room?: string;
        /** Family name, last name or Company Name. */
        name?: string;
        /** Given name, first name or names. */
        firstName?: string;
        /** Credit card number used. */
        creditCardNo?: string;
        /** Folio Number. */
        folioNo?: string;
        /** Invoice Number. */
        invoiceNo?: number;
        /** Addressee Name filter. Works with the Addressee Functionality. */
        addresseeName?: string;
        /** Fiscal Folio Number filter. Works with the Fiscal Folio Number Functionality. */
        fiscalFolioNo?: string;
        code?: string[];
        partnerFiscalFolioStatusCode?: string[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioHistoryResponse, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folioHistory`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     *
     * @tags Cashiering
     * @name GetFolioPrinters
     * @summary Get folio printers
     * @request GET:/hotels/{hotelId}/folioPrinters
     */
    getFolioPrinters: (
      hotelId: string,
      query?: {
        /** Flag to decide if folios is to be generated for all windows in addition to the one requested with applicable postings and zero balance. If any of the windows have non-zero balance then folios are not generated for other windows. */
        allFolioWindow?: boolean;
        /** Correction flag */
        correction?: boolean;
        /** Indicates the type of folio to be generated */
        debitFolio?: boolean;
        folioWindowNo?: number;
        /** Manual Folio Number used for settlement during checkout */
        manualFolioNo?: number;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected. */
        fiscalTerminalId?: string;
        /**
         * Event being generated by a Supplemental Folio.
         * @uniqueItems true
         */
        eventType?:
          | 'CheckOut'
          | 'EarlyDeparture'
          | 'AdvanceBill'
          | 'InterimBill'
          | 'PasserBy'
          | 'PostIt'
          | 'CreditBill'
          | 'Deposit'
          | 'DepositRefund'
          | 'AutoFolio'
          | 'PrepaidCard'
          | 'AutoSettlement'
          | 'InformationFolio'
          | 'SupplementalFolio';
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        profileIdId?: string;
        /** Description of currency Code. */
        currencyCode?: string;
        /** Description of exchange rate. */
        exchangeRate?: number;
        /** The bill number of the original bill for which the Credit Bill is being generated. */
        associatedBillNumber?: number;
        /** The folio type of the original bill for which the Credit Bill is being generated. */
        associatedBillFolioType?: string;
        /** The folio number queue(used in certain countries) of the original bill for which the Credit Bill is being generated. */
        associatedBillQueueName?: string;
        /** The Fiscal Folio Bill Number(from a Fiscal System) of the original bill for which the Credit Bill is being generated. */
        associatedBillFiscalBillNumber?: string;
        /**
         * The bill generation date of the original bill for which the Credit Bill is being generated.
         * @format date
         */
        associatedBillGenerationDate?: string;
        /** Folio Type to be assigned to generated folio. This is a country requirement. */
        folioType?: string;
        /** Fiscal folio flag to call fiscal folio web service after folio generation. */
        generateFiscalFolio?: boolean;
        /** Folio Queue name. */
        queueName?: string;
        /** Fiscal Folio sequence ID stored in queue table. */
        folioSeqId?: number;
        /**
         * Action to generate Offline folio when no reponse is received from fiscal service.
         * @uniqueItems true
         */
        fiscalFolioInstruction?: 'Retry' | 'New' | 'Void' | 'Offline';
        /** Contains transaction service type. */
        transactionServiceType?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioPrinters, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folioPrinters`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     *
     * @tags Cashiering
     * @name GetFolioTypeName
     * @summary Get Folio Type Name
     * @request GET:/hotels/{hotelId}/folioTypeNames
     */
    getFolioTypeName: (
      hotelId: string,
      query?: {
        /** The internal folio window Id for the reservation to determine the guest language details. */
        internalFolioWindowId?: string;
        /** The Filter language code which will be used to retrieve the report name set for this language. */
        languageCode?: string;
        /** The Folio Type for which the details are requested. */
        folioTypeName?: string;
        /**
         * The Folio Report Group name. The folio report will be defined under each group and based on where the folio has to be printed, Opera will pick up the correct folio report name to print.
         * @uniqueItems true
         */
        folioReportGroup?:
          | 'Guest'
          | 'Group'
          | 'AccountsReceivables'
          | 'PasserBy'
          | 'PostIt'
          | 'Expense'
          | 'CorrectionHeader';
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioTypeNameInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folioTypeNames`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     *
     * @tags Cashiering
     * @name GetFolioTypes
     * @summary Get Folio Types
     * @request GET:/hotels/{hotelId}/folioTypes
     */
    getFolioTypes: (
      hotelId: string,
      query?: {
        /** Folio to be use for compress bills. */
        includeCompress?: boolean;
        /** Folio to be use for credit bills. */
        includeCredit?: boolean;
        /** Folio Type. */
        folioType?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioTypesInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folioTypes`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     *
     * @tags Cashiering
     * @name ProcessFiscalRetry
     * @summary Process Fiscal retry
     * @request PUT:/hotels/{hotelId}/folios/{folioId}/fiscal
     */
    processFiscalRetry: (
      folioId: string,
      hotelId: string,
      processFiscalRetry: ProcessFiscalRetry,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ProcessFiscalRetryStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/folios/${folioId}/fiscal`,
        method: 'PUT',
        body: processFiscalRetry,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     *
     * @tags Cashiering
     * @name PostPasserBySale
     * @summary Create passer by sale
     * @request POST:/hotels/{hotelId}/passerBySale
     */
    postPasserBySale: (hotelId: string, passerBySalesCriteria: PasserBySalesCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PasserBySale, ExceptionDetailType>({
        path: `/hotels/${hotelId}/passerBySale`,
        method: 'POST',
        body: passerBySalesCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     *
     * @tags Cashiering
     * @name PutPayeeTaxNumber
     * @summary Change Payee Tax Number
     * @request PUT:/hotels/{hotelId}/payees/{payeeId}/taxNumber
     */
    putPayeeTaxNumber: (
      payeeId: string,
      hotelId: string,
      payeeTaxNumber: PayeeTaxNumber,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/payees/${payeeId}/taxNumber`,
        method: 'PUT',
        body: payeeTaxNumber,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     *
     * @tags Cashiering
     * @name AttachDepositPolicyToPayment
     * @summary Attach Deposit Policy to Payment
     * @request PUT:/hotels/{hotelId}/policies/{policyId}/transactions/{transactionId}/deposit
     */
    attachDepositPolicyToPayment: (
      transactionId: string,
      policyId: string,
      hotelId: string,
      attachPolicyApplyCriteria: AttachPolicyApplyCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/policies/${policyId}/transactions/${transactionId}/deposit`,
        method: 'PUT',
        body: attachPolicyApplyCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     *
     * @tags Cashiering
     * @name GetPostingSummary
     * @summary Get Posting Summary
     * @request GET:/hotels/{hotelId}/postingDates/date/postingSummary
     */
    getPostingSummary: (
      hotelId: string,
      query?: {
        /** Configuring this flag to be TRUE will return transactions that are auto generated like taxes. */
        includeGenerates?: boolean;
        /**
         * The date on which the charge is posted.
         * @format date
         */
        postingDate?: string;
        /** When set to true,the summary of only the postings using checks will be fetched. */
        checkPostings?: boolean;
        /** When set to true,the summary of only the postings done by external systems will be fetched. */
        postingsByExternalSystem?: boolean;
        /** Cashier Id of the Cashier. */
        cashierId?: number;
        /** Currency in which the postings are done. If null,amounts posted in local currency will be fetched. */
        currency?: string;
        /**
         * Enumeration Type of Posting Summary Information.
         * @uniqueItems true
         */
        postingSummaryType?: 'Postings' | 'Adjustments' | 'All';
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostingSummaryList, ExceptionDetailType>({
        path: `/hotels/${hotelId}/postingDates/date/postingSummary`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     *
     * @tags Cashiering
     * @name PostPrepaidCards
     * @summary Create Prepaid Cards
     * @request POST:/hotels/{hotelId}/prepaidCards
     */
    postPrepaidCards: (hotelId: string, prepaidCardCriteria: PrepaidCardCriteria, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/prepaidCards`,
        method: 'POST',
        body: prepaidCardCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     *
     * @tags Cashiering
     * @name ActivatePrepaidCard
     * @summary Operation to activate prepaid card.
     * @request PUT:/hotels/{hotelId}/prepaidCards/activate
     */
    activatePrepaidCard: (hotelId: string, activatePrepaidCard: ActivatePrepaidCard, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ActivatePrepaidCardStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/prepaidCards/activate`,
        method: 'PUT',
        body: activatePrepaidCard,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     *
     * @tags Cashiering
     * @name CancelPrepaidCardTransaction
     * @summary Operation to cancel prepaid card transaction.
     * @request PUT:/hotels/{hotelId}/prepaidCards/cancel
     */
    cancelPrepaidCardTransaction: (
      hotelId: string,
      cancelPrepaidCardTransaction: CancelPrepaidCardTransaction,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CancelPrepaidCardTransactionStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/prepaidCards/cancel`,
        method: 'PUT',
        body: cancelPrepaidCardTransaction,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     *
     * @tags Cashiering
     * @name CashOutPrepaidCard
     * @summary Operation to cash out prepaid card.
     * @request PUT:/hotels/{hotelId}/prepaidCards/cashOut
     */
    cashOutPrepaidCard: (hotelId: string, cashOutPrepaidCard: CashOutPrepaidCard, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CashOutPrepaidCardStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/prepaidCards/cashOut`,
        method: 'PUT',
        body: cashOutPrepaidCard,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     *
     * @tags Cashiering
     * @name ReloadPrepaidCard
     * @summary Operation to reload prepaid card.
     * @request PUT:/hotels/{hotelId}/prepaidCards/reload
     */
    reloadPrepaidCard: (hotelId: string, reloadPrepaidCard: ReloadPrepaidCard, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ReloadPrepaidCardStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/prepaidCards/reload`,
        method: 'PUT',
        body: reloadPrepaidCard,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     *
     * @tags Cashiering
     * @name AuthorizeCreditCardAmountByProfile
     * @summary Authorize Credit Card Amount by Profile
     * @request POST:/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorize
     */
    authorizeCreditCardAmountByProfile: (
      profileId: string,
      hotelId: string,
      ccAuthorizationCriteria: CcAuthorizationCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AuthorizationInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/profiles/${profileId}/paymentMethods/creditCard/authorize`,
        method: 'POST',
        body: ccAuthorizationCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     *
     * @tags Cashiering
     * @name GetCcAuthorizationInstructionsByProfile
     * @summary Get CC Authorization Instructions by Profile
     * @request GET:/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorizeInstructions
     */
    getCcAuthorizationInstructionsByProfile: (
      profileId: string,
      hotelId: string,
      query?: {
        /** Flag to indicate if the approval amount should be calculated before authorization. If this is true and if the amount is 0 the approval amount will be calculated based on the rules. */
        evaluateApprovalAmount?: boolean;
        /**
         * Currently supported transaction type categories used for credit card authorization.
         * @uniqueItems true
         */
        sourceOfAuthorization?:
          | 'Additional'
          | 'ArPayment'
          | 'Batch'
          | 'BatchDeposit'
          | 'BatchDepositRefund'
          | 'Billing'
          | 'CheckIn'
          | 'CheckInManualAuth'
          | 'Deposit'
          | 'EndOfDay'
          | 'EndOfDayDeposit'
          | 'Manual'
          | 'Other'
          | 'PasserBy'
          | 'PostIt'
          | 'PreCheckIn'
          | 'Refund'
          | 'Scheduled';
        /** Update the card details on the reservations for Chip and Pin Authorizations. */
        updateReservation?: boolean;
        /**
         * Used to identify the source of the identifier (e.g., IATA, ABTA).
         * @default "OPERA"
         */
        idContext?: string;
        /**
         * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
         * @default "Reservation"
         */
        type?: string;
        /**
         * Used to identify the source of the identifier (e.g., IATA, ABTA).
         * @default "OPERA"
         */
        profileIdIdContext?: string;
        /**
         * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
         * @default "Profile"
         */
        profileIdType?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** The folio window where this authorization is applied. */
        folioView?: number;
        description?: string;
        paymentFolioView?: number;
        paymentMethod?: string;
        /** Track2 data for the card which would be sent to the CC vendor as part of the authorization. */
        track2Data?: string;
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICE DIRECTIVE(PSD) Opera Control is active. */
        cardPresent?: boolean;
        /** Customer Initiated Transaction(CIT) Id for Credit Cards. This is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active. */
        citId?: string;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        cardIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        cardIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        cardIdType?: string;
        /** A monetary amount. */
        currentAuthorizedAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currentAuthorizedAmountCurrencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** A monetary amount. */
        balanceAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
        /** The authorization rule code. */
        code?: number;
        /** A monetary amount. */
        amountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        amountCurrencyCode?: string;
        /** A percentage value if the authorization rule is percentage based. */
        percent?: number;
        emailFolio?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string;
        /**
         * Time stamp of the creation.
         * @format date-time
         */
        createDateTime?: string;
        /** ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation. */
        creatorId?: string;
        /** Defines the e-mail address. */
        emailAddress?: string;
        /**
         * Supported Email format.
         * @uniqueItems true
         */
        emailFormat?: 'Html' | 'Text';
        /** Identifies the last software system or person to modify a record. */
        lastModifierId?: string;
        /**
         * Time stamp of last modification.
         * @format date-time
         */
        lastModifyDateTime?: string;
        /** Display Order sequence. */
        orderSequence?: number;
        /** When true, indicates a primary information. */
        primaryInd?: boolean;
        /**
         * Date an item will be purged from a database (e.g., from a live database to an archive).
         * @format date
         */
        purgeDate?: string;
        /** Defines the purpose of the e-mail address (e.g. personal, business, listserve). */
        emailType?: string;
        /** Describes the Type code */
        typeDescription?: string;
        /** The approval code authenticates the authorization. */
        approvalCode?: string;
        /** Unique Authorization Sequence for the authorization and settlement. */
        originalAuthSequence?: number;
        /** Vendor transaction id for the authorization. */
        vendorTranId?: string;
        /** A monetary amount. */
        approvalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountCurrencyCode?: string;
        /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected. */
        terminalId?: string;
        /** A monetary amount. */
        incidentalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        incidentalAmountCurrencyCode?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CcAuthorizationInstructions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/profiles/${profileId}/paymentMethods/creditCard/authorizeInstructions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p>
     *
     * @tags Cashiering
     * @name GetReceiptHistory
     * @summary Get Receipt History
     * @request GET:/hotels/{hotelId}/receiptHistory
     */
    getReceiptHistory: (
      hotelId: string,
      query?: {
        /**
         * Receipt History Date Range(from).
         * @format date
         */
        fromDate?: string;
        /**
         * Receipt History Date Range(to).
         * @format date
         */
        toDate?: string;
        /** Family name, last name or Company Name. */
        name?: string;
        /** Given name, first name or names. */
        firstName?: string;
        /** Receipt Type. */
        receiptTypeName?: string;
        /** Tax Invoice Number. */
        taxInvoice?: string;
        /** Receipt Number. */
        receiptNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ReceiptHistoryResponse, ExceptionDetailType>({
        path: `/hotels/${hotelId}/receiptHistory`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     *
     * @tags Cashiering
     * @name PostRateCode
     * @summary Create rate codes
     * @request POST:/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}
     */
    postRateCode: (
      rateCode: string,
      reservationId: string,
      hotelId: string,
      postRateCodeCriteria: PostRateCodeCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostedRateCode, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservation/${reservationId}/rateCode/${rateCode}`,
        method: 'POST',
        body: postRateCodeCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     *
     * @tags Cashiering
     * @name CheckPostRateCode
     * @summary Change posted rate codes
     * @request PUT:/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}/action/validate
     */
    checkPostRateCode: (
      rateCode: string,
      reservationId: string,
      hotelId: string,
      postRateCodeCriteria: PostRateCodeCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CheckedRateCode, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservation/${reservationId}/rateCode/${rateCode}/action/validate`,
        method: 'PUT',
        body: postRateCodeCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     *
     * @tags Cashiering
     * @name PostBillingChargesInBatch
     * @summary Create Billing Charges in Batch
     * @request POST:/hotels/{hotelId}/reservations/billingCharges
     */
    postBillingChargesInBatch: (
      hotelId: string,
      billingChargesInBatchCriteria: BillingChargesInBatchCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostedBillingChargesInBatch, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/billingCharges`,
        method: 'POST',
        body: billingChargesInBatchCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     *
     * @tags Cashiering
     * @name GetBatchCcSettlements
     * @summary Get batch CC Settlements
     * @request GET:/hotels/{hotelId}/reservations/cCSettlements
     */
    getBatchCcSettlements: (
      hotelId: string,
      query?: {
        /** fetch only offline settlements. */
        offlineSettlement?: boolean;
        /**
         * Transaction Date associated with the transaction.
         * @format date
         */
        transactionDate?: string;
        /** Guest name associated with the transaction. */
        guestName?: string;
        /** Room number associated with the transaction. */
        roomId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CcBatchSettlements, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/cCSettlements`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     *
     * @tags Cashiering
     * @name GetAdditionalTaxes
     * @summary Get additional Taxes
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/additionalTaxes
     */
    getAdditionalTaxes: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** Folio Window. */
        folioView?: number;
        /** Currency code on which tax is to be calculated */
        currencyCode?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AdditionalTaxesDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/additionalTaxes`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     *
     * @tags Cashiering
     * @name GetAdvancePaymentBalance
     * @summary Get advance payment balance
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/advancePaymentBalance
     */
    getAdvancePaymentBalance: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /**
         * From date of reservation.
         * @format date
         */
        fromDate?: string;
        /** Number of nights to calculate advance payment. */
        numberOfNights?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AdvancePaymentBalance, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/advancePaymentBalance`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     *
     * @tags Cashiering
     * @name PostAdvanceRoomCharges
     * @summary Create advance Room Charges
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges
     */
    postAdvanceRoomCharges: (
      reservationId: string,
      hotelId: string,
      advanceRoomCharges: AdvanceRoomCharges,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AdvanceRoomChargesReservationInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/advanceRoomCharges`,
        method: 'POST',
        body: advanceRoomCharges,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     *
     * @tags Cashiering
     * @name GetAlerts
     * @summary Get Alert Notices
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/alerts
     * @deprecated
     */
    getAlerts: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** @uniqueItems true */
        alertArea?: 'CheckIn' | 'CheckOut' | 'Reservation' | 'Billing' | 'InHouse';
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AlertNotices, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/alerts`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     *
     * @tags Cashiering
     * @name GetAuthorizationHistory
     * @summary Get authorization history
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/authorizationHistory
     */
    getAuthorizationHistory: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** A flag which indicates whether authorizations should be included in the returned list. */
        includeAuthorizations?: boolean;
        /** A flag which indicates whether payments should be included in the returned list. */
        includePayments?: boolean;
        /** A flag which indicates whether refunds should be included in the returned list. */
        includeRefunds?: boolean;
        /** A flag which indicates whether failures should be included in the returned list. */
        includeFailures?: boolean;
        folioView?: number;
        /**
         * Currently supported transaction type categories used for credit card authorization.
         * @uniqueItems true
         */
        transactionType?:
          | 'Additional'
          | 'ArPayment'
          | 'Batch'
          | 'BatchDeposit'
          | 'BatchDepositRefund'
          | 'Billing'
          | 'CheckIn'
          | 'CheckInManualAuth'
          | 'Deposit'
          | 'EndOfDay'
          | 'EndOfDayDeposit'
          | 'Manual'
          | 'Other'
          | 'PasserBy'
          | 'PostIt'
          | 'PreCheckIn'
          | 'Refund'
          | 'Scheduled';
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AuthorizationHistory, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/authorizationHistory`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     *
     * @tags Cashiering
     * @name GetPostBillingCharges
     * @summary Get Billing Charges
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/charges
     */
    getPostBillingCharges: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        folioWindowNo?: number[];
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        chargeCashierId?: number[];
        /** Transaction Code to post. */
        transactionCode?: string[];
        /** Article ID. */
        articleCode?: string[];
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** Quantity to post to the folio. */
        postingQuantity?: number[];
        /** User-defined posting reference. */
        postingReference?: string[];
        /** User-defined posting remark. */
        postingRemark?: string[];
        /** Indicates the Cheque number. */
        checkNumber?: string[];
        /** Corrected arrangement code from the package associated to this transaction. */
        arrangementCode?: string[];
        /** Apply room routing when making this posting. */
        applyRoutingInstructions?: boolean[];
        /** Use the applicable package allowance when making this posting. */
        usePackageAllowance?: boolean[];
        /** True indicates the Transaction Code is allowed to be posted automatically. */
        autoPosting?: boolean[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        reservationIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        reservationIdType?: string;
        /**
         * This is the Default option. Operation checks if charges can be posted to the reservation based on the status of the reservation.
         * @uniqueItems true
         */
        option?: ('PackageAllowance' | 'RoomRouting' | 'PostingStatus')[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BillingChargesStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/charges`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     *
     * @tags Cashiering
     * @name PostBillingCharges
     * @summary Post Charge to a folio
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/charges
     */
    postBillingCharges: (
      reservationId: string,
      hotelId: string,
      billingCharges: BillingCharges,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BillingChargesDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/charges`,
        method: 'POST',
        body: billingCharges,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     *
     * @tags Cashiering
     * @name PostBillingCheckCharges
     * @summary Pre-validate the Billing Charge
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/check/{checkNumber}/charges
     */
    postBillingCheckCharges: (
      checkNumber: string,
      reservationId: string,
      hotelId: string,
      billingCheckChargesCriteria: BillingCheckChargesCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/check/${checkNumber}/charges`,
        method: 'POST',
        body: billingCheckChargesCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description This API enables you to check out a guest reservation which is in due out status, with options to update the room's housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     *
     * @tags Cashiering
     * @name PostCheckOut
     * @summary Check out a guest
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/checkOuts
     */
    postCheckOut: (reservationId: string, hotelId: string, reservation: Reservation, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/checkOuts`,
        method: 'POST',
        body: reservation,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     *
     * @tags Cashiering
     * @name ReinstateCheckOut
     * @summary Reinstate Checked Out Reservation
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/checkOuts/reinstate
     */
    reinstateCheckOut: (
      reservationId: string,
      hotelId: string,
      reinstateCheckedOutReservation: ReinstateCheckedOutReservation,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/checkOuts/reinstate`,
        method: 'PUT',
        body: reinstateCheckedOutReservation,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     *
     * @tags Cashiering
     * @name AutoSettleCompFolios
     * @summary Operation to auto settle comp folios.
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/comp/folios/autoSettlements
     */
    autoSettleCompFolios: (
      reservationId: string,
      hotelId: string,
      autoSettleCompFolios: AutoSettleCompFolios,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AutoSettleCompFoliosStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/comp/folios/autoSettlements`,
        method: 'PUT',
        body: autoSettleCompFolios,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     *
     * @tags Cashiering
     * @name PostCompRedemptions
     * @summary Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/compRedemptionPostings
     */
    postCompRedemptions: (
      reservationId: string,
      hotelId: string,
      postCompRedemptions: PostCompRedemptions,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/compRedemptionPostings`,
        method: 'POST',
        body: postCompRedemptions,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     *
     * @tags Cashiering
     * @name ReverseCompRedemptions
     * @summary Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/compRedemptionReversals
     */
    reverseCompRedemptions: (
      reservationId: string,
      hotelId: string,
      reverseCompRedemptions: ReverseCompRedemptions,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/compRedemptionReversals`,
        method: 'POST',
        body: reverseCompRedemptions,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     *
     * @tags Cashiering
     * @name PostDeferredTaxesProcess
     * @summary Request to submit a job to post the deferred taxes.
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/deferredTaxesProcess
     */
    postDeferredTaxesProcess: (
      reservationId: string,
      hotelId: string,
      deferredTaxesProcess: DeferredTaxesProcess,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DeferredTaxesProcessDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/deferredTaxesProcess`,
        method: 'POST',
        body: deferredTaxesProcess,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     *
     * @tags Cashiering
     * @name ProcessReservationDeposit
     * @summary Process Reservations deposit
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/deposit
     */
    processReservationDeposit: (
      reservationId: string,
      hotelId: string,
      reservationDepositCriteria: ReservationDepositCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/deposit`,
        method: 'POST',
        body: reservationDepositCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     *
     * @tags Cashiering
     * @name PostDepositFolio
     * @summary Create Deposit Folio
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/depositFolios
     */
    postDepositFolio: (
      reservationId: string,
      hotelId: string,
      depositFolioCriteria: DepositFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostedDepositFolio, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/depositFolios`,
        method: 'POST',
        body: depositFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     *
     * @tags Cashiering
     * @name GetDepositMaturityInfo
     * @summary Get Deposit Maturity Information
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/depositMaturity
     */
    getDepositMaturityInfo: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositMaturityDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/depositMaturity`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     *
     * @tags Cashiering
     * @name PostDepositPayment
     * @summary Create Deposit Payment
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/depositPayments
     */
    postDepositPayment: (
      reservationId: string,
      hotelId: string,
      depositPayment: DepositPayment,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositedPayment, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/depositPayments`,
        method: 'POST',
        body: depositPayment,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     *
     * @tags Cashiering
     * @name GetMaturedDeposits
     * @summary Get matured deposits
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/depositPayments
     */
    getMaturedDeposits: (reservationId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<MaturedDepositsDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/depositPayments`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     *
     * @tags Cashiering
     * @name TransitionDepositToGuestFolio
     * @summary Transition Deposit to Guest Folio
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/depositTransition
     */
    transitionDepositToGuestFolio: (
      reservationId: string,
      hotelId: string,
      depositToGuestFolio: DepositToGuestFolio,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/depositTransition`,
        method: 'PUT',
        body: depositToGuestFolio,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     *
     * @tags Cashiering
     * @name PutForEarlyDeparture
     * @summary Change early Departure
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture
     */
    putForEarlyDeparture: (
      reservationId: string,
      hotelId: string,
      earlyDeparture: EarlyDeparture,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/earlyDeparture`,
        method: 'PUT',
        body: earlyDeparture,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     *
     * @tags Cashiering
     * @name VerifyForEarlyDeparture
     * @summary Verify for early Departure
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture/verify
     */
    verifyForEarlyDeparture: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Indicates if check has to be done for Rate Tiers. */
        ignoreCheckOnTieredRate?: boolean;
        /** Indicates if Rate Restriction check should be overridden. */
        ignoreRateRestriction?: boolean;
        /** Indicates if any allowance consumed by the guest for today can be posted to the Guest Folio. If this cannot be done then the Early Departure cannot proceed. */
        postConsumedAllowanceToGuest?: boolean;
        /** Indicates if the early departure penalty should be posted . */
        postEarlyDeparturePenalty?: boolean;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<EarlyDepartureInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/earlyDeparture/verify`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     *
     * @tags Cashiering
     * @name GetfetchStagedTransactions
     * @summary Get fetchStagedTransactions
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/fetchStagedTransactions
     */
    getfetchStagedTransactions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X. */
        hotelId?: string;
        /** Folio Window Number of the staged transactions. */
        folioWindowNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<StagedTransactions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fetchStagedTransactions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     *
     * @tags Cashiering
     * @name ApplyFinalPostings
     * @summary Apply final Postings
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/finalCharges
     */
    applyFinalPostings: (
      reservationId: string,
      hotelId: string,
      finalPostings: FinalPostings,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/finalCharges`,
        method: 'POST',
        body: finalPostings,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     *
     * @tags Cashiering
     * @name GetFiscalPrintingDetails
     * @summary Get Fiscal Printing Details
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/fiscalPrinting
     * @deprecated
     */
    getFiscalPrintingDetails: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** The folio window where this settlement is applied. */
        folioView?: number;
        /** Folio Type */
        folioType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        code?: string[];
        /**
         * Reservation Related information.
         * @uniqueItems true
         */
        fetchInstruction?: ('Paymentmethod' | 'Profile' | 'Foliotype' | 'Reservation')[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        profileIdId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FiscalCallStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fiscalPrinting`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     *
     * @tags Cashiering
     * @name GetFixedCharges
     * @summary Get Fixed Charges
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/fixedCharges
     */
    getFixedCharges: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FixedChargesDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fixedCharges`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     *
     * @tags Cashiering
     * @name UpdateFixedCharges
     * @summary Updates Fixed Charges
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/fixedCharges
     */
    updateFixedCharges: (
      reservationId: string,
      hotelId: string,
      fixedCharges: FixedCharges,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fixedCharges`,
        method: 'PUT',
        body: fixedCharges,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     *
     * @tags Cashiering
     * @name RemoveFixedCharges
     * @summary Delete Fixed Charges
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/fixedCharges
     */
    removeFixedCharges: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        fixedChargeID?: string[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fixedCharges`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     *
     * @tags Cashiering
     * @name PostFixedCharges
     * @summary Create Fixed Charges
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/fixedCharges
     */
    postFixedCharges: (
      reservationId: string,
      hotelId: string,
      fixedCharges: FixedCharges,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/fixedCharges`,
        method: 'POST',
        body: fixedCharges,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     *
     * @tags Cashiering
     * @name ApplyFlexibleBenefitPostings
     * @summary Apply flexible benefit postings
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/flexibleBenefitPostings
     */
    applyFlexibleBenefitPostings: (
      reservationId: string,
      hotelId: string,
      flexibleBenefitPostingsCriteria: FlexibleBenefitPostingsCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/flexibleBenefitPostings`,
        method: 'POST',
        body: flexibleBenefitPostingsCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     *
     * @tags Cashiering
     * @name GetFolioTaxPaymentsInfo
     * @summary Get folio tax payments information
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/folioTaxPayments
     */
    getFolioTaxPaymentsInfo: (
      reservationId: string,
      hotelId: string,
      query?: {
        folioWindowNo?: number;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        description?: string;
        folioView?: number;
        paymentMethod?: string;
        /** Track2 data for the card which would be sent to the CC vendor as part of the authorization. */
        track2Data?: string;
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** A monetary amount. */
        balanceAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
        /** The authorization rule code. */
        code?: number;
        /** A monetary amount. */
        amountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        amountCurrencyCode?: string;
        /** A percentage value if the authorization rule is percentage based. */
        percent?: number;
        emailFolio?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string;
        /**
         * Time stamp of the creation.
         * @format date-time
         */
        createDateTime?: string;
        /** ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation. */
        creatorId?: string;
        /** Defines the e-mail address. */
        emailAddress?: string;
        /**
         * Supported Email format.
         * @uniqueItems true
         */
        emailFormat?: 'Html' | 'Text';
        /** Identifies the last software system or person to modify a record. */
        lastModifierId?: string;
        /**
         * Time stamp of last modification.
         * @format date-time
         */
        lastModifyDateTime?: string;
        /** Display Order sequence. */
        orderSequence?: number;
        /** When true, indicates a primary information. */
        primaryInd?: boolean;
        /**
         * Date an item will be purged from a database (e.g., from a live database to an archive).
         * @format date
         */
        purgeDate?: string;
        /** Defines the purpose of the e-mail address (e.g. personal, business, listserve). */
        emailType?: string;
        /** Describes the Type code */
        typeDescription?: string;
        /** The approval code authenticates the authorization. */
        approvalCode?: string;
        /** Unique Authorization Sequence for the authorization and settlement. */
        originalAuthSequence?: number;
        /** Vendor transaction id for the authorization. */
        vendorTranId?: string;
        /** A monetary amount. */
        approvalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountCurrencyCode?: string;
        /** A monetary amount. */
        postingAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        postingAmountCurrencyCode?: string;
        /** User-defined posting reference. */
        postingReference?: string;
        /** User-defined posting remark. */
        postingRemark?: string;
        /** User Defined Comments. Used for Deposit Payment postings. */
        comments?: string;
        /** Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available. */
        applyCCSurcharge?: boolean;
        manualPaymentTaxInfoFolioWindowNo?: number;
        /** Billing Transaction Code of the Payment. */
        transactionCode?: string;
        /**
         * Transaction Date of the Payment.
         * @format date
         */
        transactionDate?: string;
        /** Billing Transaction Description. */
        transactionDescription?: string;
        /** Unique Transaction Identifier. */
        transactionNo?: number;
        /** The Tax Invoice for this payment. */
        taxInvoiceNo?: string;
        /**
         * The types of Payment Tax transactions.
         * @uniqueItems true
         */
        paymentType?: 'Deposit' | 'FrontOffice' | 'CreditNote' | 'CityLedger' | 'AccountsReceivables' | 'NonVat';
        /** A monetary amount. */
        manualPaymentTaxAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        manualPaymentTaxCurrencyCode?: string;
        /** A monetary amount. */
        taxableAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        taxableAmountCurrencyCode?: string;
        /** A monetary amount. */
        nonTaxableAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        nonTaxableAmountCurrencyCode?: string;
        /** A monetary amount. */
        availableCreditAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        availableCreditCurrencyCode?: string;
        /**
         * The Payment Invoice date
         * @format date
         */
        paymentDate?: string;
        taxFolioWindowNo?: number[];
        /** Billing Transaction Code of the Payment. */
        taxTransactionCode?: string[];
        /** Transaction Date of the Payment. */
        taxTransactionDate?: string[];
        /** Billing Transaction Description. */
        taxTransactionDescription?: string[];
        /** Unique Transaction Identifier. */
        taxTransactionNo?: number[];
        /** The Tax Invoice for this payment. */
        taxTaxInvoiceNo?: string[];
        /**
         * The types of Payment Tax transactions.
         * @uniqueItems true
         */
        taxPaymentType?: ('Deposit' | 'FrontOffice' | 'CreditNote' | 'CityLedger' | 'AccountsReceivables' | 'NonVat')[];
        /** A monetary amount. */
        creditablePaymentTaxesAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        creditablePaymentTaxesCurrencyCode?: string;
        /** A monetary amount. */
        creditablePaymentTaxableAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        creditablePaymentTaxableCurrencyCode?: string;
        /** A monetary amount. */
        creditablePaymentNonTaxableAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        creditablePaymentNonTaxableCurrencyCode?: string;
        /** A monetary amount. */
        availableTaxCreditAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        availableTaxCreditCurrencyCode?: string;
        /** The Payment Invoice date */
        taxPaymentDate?: string[];
        /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made. */
        terminalId?: string;
        /** Flag to allow a rebate by Credit Card */
        overrideInsufficientCC?: boolean;
        /** A monetary amount. */
        changeDueAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        changeDueAmountCurrencyCode?: string;
        /** Flag to override account receivable credit limit */
        overrideARCreditLimit?: boolean;
        /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
        applyCurrencyTaxes?: boolean;
        /** Flag to indidcate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest. */
        vATOffset?: boolean;
        /**
         * Payment action to know from where the payment has been made.
         * @uniqueItems true
         */
        action?: 'Billing' | 'Settlefolio' | 'Deposit' | 'Compredemption' | 'Prepaidcardredemption' | 'Advancepayment';
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        reservationIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        reservationIdType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        profileIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        profileIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        profileIdType?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioTaxPaymentsInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/folioTaxPayments`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p>
     *
     * @tags Cashiering
     * @name GetFolio
     * @summary Get folios
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/folios
     */
    getFolio: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Flag to return the Folio Windows information where the Reservation Guest is the Payee, i.e the Folio Window is not Routed to another Reservation or another Profile. */
        guestPayOnly?: boolean;
        /** This flag will notify the service if the folio history will also be returned or not. */
        includeFolioHistory?: boolean;
        /** This flag will notify the service if the reservation summary information will be returned. If TRUE then we will only return the reservation's outstanding balance. */
        reservationBalanceOnly?: boolean;
        /**
         * Posting details of each window.
         * @uniqueItems true
         */
        fetchInstructions?: (
          | 'Reservation'
          | 'Windowbalances'
          | 'Payment'
          | 'Payee'
          | 'Account'
          | 'Guestpay'
          | 'Notifications'
          | 'Transactioncodes'
          | 'Foliohistory'
          | 'Totalbalance'
          | 'Postings'
        )[];
        /** The ending value of the date range. */
        end?: string[];
        folioWindowNo?: number[];
        /** Indicates maximum number of records a Web Service should return. */
        limit?: number[];
        /** Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned. */
        offset?: number[];
        /** The starting value of the date range. */
        start?: string[];
        /** This flag will notify the service that transactional postings will not be returned. */
        summaryOnly?: boolean;
        /**
         * Grouping by Transactin Type.
         * @uniqueItems true
         */
        groupType?: 'CheckNo' | 'TransactionDate' | 'TransactionCode' | 'TransactionType';
        /** Currency to which the Credit and Debit Amounts will be converted for each Folio. The response will have the ExchangeAmounts element with the converted amounts. The Posting Exchange Rate of the current business date will be used for the conversion */
        exchangeCurrency?: string;
        calculateCollectingAgentTaxes?: boolean;
        vATOffset?: boolean;
        includeDepositTaxes?: boolean;
        /** This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold. */
        simpleFolio?: boolean;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Folio, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/folios`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     *
     * @tags Cashiering
     * @name CloseReservationFolio
     * @summary Close Reservation Folio
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/folios
     */
    closeReservationFolio: (
      reservationId: string,
      hotelId: string,
      closeFolioCriteria: CloseFolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/folios`,
        method: 'PUT',
        body: closeFolioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     *
     * @tags Cashiering
     * @name GenerateFolio
     * @summary Generate Folios
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/folios
     */
    generateFolio: (
      reservationId: string,
      hotelId: string,
      folioCriteria: FolioCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<GeneratedFolio, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/folios`,
        method: 'POST',
        body: folioCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     *
     * @tags Cashiering
     * @name UnlinkReservationPackageAllowance
     * @summary Unlink reservation package allowance
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/packageAllowance/links
     */
    unlinkReservationPackageAllowance: (reservationId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/packageAllowance/links`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     *
     * @tags Cashiering
     * @name GetReservationPackageOptions
     * @summary Get Reservation Package Options
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/packageOptions
     */
    getReservationPackageOptions: (reservationId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ReservationPackageOptions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/packageOptions`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     *
     * @tags Cashiering
     * @name AuthorizeCreditCardAmount
     * @summary Authorize Credit Card Amount
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize
     */
    authorizeCreditCardAmount: (
      reservationId: string,
      hotelId: string,
      ccAuthorizationCriteria: CcAuthorizationCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AuthorizationInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/paymentMethods/creditCard/authorize`,
        method: 'POST',
        body: ccAuthorizationCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     *
     * @tags Cashiering
     * @name RegisterManualAuthorization
     * @summary Register Manual Authorization
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize/manual
     */
    registerManualAuthorization: (
      reservationId: string,
      hotelId: string,
      ccManualAuthorizationCriteria: CcManualAuthorizationCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/paymentMethods/creditCard/authorize/manual`,
        method: 'POST',
        body: ccManualAuthorizationCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     *
     * @tags Cashiering
     * @name GetCcAuthorizationInstructions
     * @summary Get CC Authorization Instructions
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorizeInstructions
     */
    getCcAuthorizationInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Flag to indicate if the approval amount should be calculated before authorization. If this is true and if the amount is 0 the approval amount will be calculated based on the rules. */
        evaluateApprovalAmount?: boolean;
        /**
         * Currently supported transaction type categories used for credit card authorization.
         * @uniqueItems true
         */
        sourceOfAuthorization?:
          | 'Additional'
          | 'ArPayment'
          | 'Batch'
          | 'BatchDeposit'
          | 'BatchDepositRefund'
          | 'Billing'
          | 'CheckIn'
          | 'CheckInManualAuth'
          | 'Deposit'
          | 'EndOfDay'
          | 'EndOfDayDeposit'
          | 'Manual'
          | 'Other'
          | 'PasserBy'
          | 'PostIt'
          | 'PreCheckIn'
          | 'Refund'
          | 'Scheduled';
        /** Update the card details on the reservations for Chip and Pin Authorizations. */
        updateReservation?: boolean;
        /**
         * Used to identify the source of the identifier (e.g., IATA, ABTA).
         * @default "OPERA"
         */
        idContext?: string;
        /**
         * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
         * @default "Reservation"
         */
        type?: string;
        /**
         * Used to identify the source of the identifier (e.g., IATA, ABTA).
         * @default "OPERA"
         */
        profileIdIdContext?: string;
        /**
         * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
         * @default "Profile"
         */
        profileIdType?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** The folio window where this authorization is applied. */
        folioView?: number;
        description?: string;
        paymentFolioView?: number;
        paymentMethod?: string;
        /** Track2 data for the card which would be sent to the CC vendor as part of the authorization. */
        track2Data?: string;
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICE DIRECTIVE(PSD) Opera Control is active. */
        cardPresent?: boolean;
        /** Customer Initiated Transaction(CIT) Id for Credit Cards. This is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active. */
        citId?: string;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        cardIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        cardIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        cardIdType?: string;
        /** A monetary amount. */
        currentAuthorizedAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currentAuthorizedAmountCurrencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** A monetary amount. */
        balanceAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
        /** The authorization rule code. */
        code?: number;
        /** A monetary amount. */
        amountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        amountCurrencyCode?: string;
        /** A percentage value if the authorization rule is percentage based. */
        percent?: number;
        emailFolio?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string;
        /**
         * Time stamp of the creation.
         * @format date-time
         */
        createDateTime?: string;
        /** ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation. */
        creatorId?: string;
        /** Defines the e-mail address. */
        emailAddress?: string;
        /**
         * Supported Email format.
         * @uniqueItems true
         */
        emailFormat?: 'Html' | 'Text';
        /** Identifies the last software system or person to modify a record. */
        lastModifierId?: string;
        /**
         * Time stamp of last modification.
         * @format date-time
         */
        lastModifyDateTime?: string;
        /** Display Order sequence. */
        orderSequence?: number;
        /** When true, indicates a primary information. */
        primaryInd?: boolean;
        /**
         * Date an item will be purged from a database (e.g., from a live database to an archive).
         * @format date
         */
        purgeDate?: string;
        /** Defines the purpose of the e-mail address (e.g. personal, business, listserve). */
        emailType?: string;
        /** Describes the Type code */
        typeDescription?: string;
        /** The approval code authenticates the authorization. */
        approvalCode?: string;
        /** Unique Authorization Sequence for the authorization and settlement. */
        originalAuthSequence?: number;
        /** Vendor transaction id for the authorization. */
        vendorTranId?: string;
        /** A monetary amount. */
        approvalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountCurrencyCode?: string;
        /** Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected. */
        terminalId?: string;
        /** A monetary amount. */
        incidentalAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        incidentalAmountCurrencyCode?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CcAuthorizationInstructions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/paymentMethods/creditCard/authorizeInstructions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     *
     * @tags Cashiering
     * @name PostBillingPayment
     * @summary Create Billing Payment
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/payments
     */
    postBillingPayment: (
      reservationId: string,
      hotelId: string,
      billingPayment: BillingPayment,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostedBillingPayment, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/payments`,
        method: 'POST',
        body: billingPayment,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     *
     * @tags Cashiering
     * @name GetPostingActivityDetail
     * @summary Get posting activity details
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/postingActivities
     */
    getPostingActivityDetail: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        module?: string;
        /** @format date-time */
        logDate?: string;
        refActionId?: number;
        logUserId?: number;
        logUserName?: string;
        machineStation?: string;
        croCode?: string;
        actionType?: string;
        actionDescription?: string;
        /** The IP Address of the machine that performed the activity */
        iPAddress?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostingActivityDetail, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/postingActivities`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     *
     * @tags Cashiering
     * @name RedeemPrepaidCards
     * @summary Operation to redeem prepaid cards.
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/prepaidCards/redemptions
     */
    redeemPrepaidCards: (
      reservationId: string,
      hotelId: string,
      redeemPrepaidCards: RedeemPrepaidCards,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RedeemPrepaidCardsStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/prepaidCards/redemptions`,
        method: 'PUT',
        body: redeemPrepaidCards,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     *
     * @tags Cashiering
     * @name PostProforma
     * @summary Create proforma
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/proforma
     */
    postProforma: (
      reservationId: string,
      hotelId: string,
      reservationFolio: ReservationFolio,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ReservationFolioInformation, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/proforma`,
        method: 'POST',
        body: reservationFolio,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     *
     * @tags Cashiering
     * @name GetReservationRevenueBucketTotals
     * @summary Get Reservations Revenue Bucket Totals
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/revenueBuckets
     */
    getReservationRevenueBucketTotals: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** Type if the revenue bucket. */
        revenueBucketType?: string;
        /** This flag will notify the service if the revenue is of complimentary type. */
        compRevenue?: boolean;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RevenueBucketTotals, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/revenueBuckets`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     *
     * @tags Cashiering
     * @name ReverseCertificatePostings
     * @summary Reverse certificate postings
     * @request POST:/hotels/{hotelId}/reservations/{reservationId}/reverseCertificate
     */
    reverseCertificatePostings: (
      reservationId: string,
      hotelId: string,
      reverseCertificatePostingsCriteria: ReverseCertificatePostingsCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/reverseCertificate`,
        method: 'POST',
        body: reverseCertificatePostingsCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name GetRoutingInstructions
     * @summary Get routing instructions
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions
     */
    getRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** Include the window routing instructions to the response. */
        includeWindowRouting?: boolean;
        /** Include the room routing instructions in the response. */
        includeRoomRouting?: boolean;
        /** Include the comp routing instructions in the response. */
        includeCompRouting?: boolean;
        /** Include the comp routing requests in the response. */
        includeCompRoutingRequests?: boolean;
        /**
         * If date is included then the search result should only be valid for dates which includes this date.
         * @format date
         */
        effectiveOn?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoutingInstructionsDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name DeleteRoutingInstructions
     * @summary Delete routing instructions
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions
     * @deprecated
     */
    deleteRoutingInstructions: (reservationId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name ChangeRoutingInstructions
     * @summary Change routing instructions
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/change
     */
    changeRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      routingInstructionsToChange: RoutingInstructionsToChange,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ChangedRoutingInstructions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/change`,
        method: 'PUT',
        body: routingInstructionsToChange,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name DeleteCompRoutingInstructions
     * @summary Delete comp routing instructions
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/comp
     */
    deleteCompRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
        refreshFolio?: boolean;
        /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
        retrievePostingsForRoomRouting?: boolean;
        folioWindowNo?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        payeeId?: string;
        /** Unique Id of membership */
        membershipIdNo?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        authorizerId?: string;
        /** User Id of the Opera User */
        userId?: number;
        /** Name of the Opera User */
        userName?: string;
        comments?: string;
        /** Flag to indicate if the routing instruction is a daily instruction. */
        daily?: boolean;
        sunday?: boolean;
        monday?: boolean;
        tuesday?: boolean;
        wednesday?: boolean;
        thursday?: boolean;
        friday?: boolean;
        saturday?: boolean;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        /** Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero. */
        creditLimit?: number[];
        /** The routing limit percentage allowed for this routing instruction. */
        percentageLimit?: number[];
        /** Number of covers for this routing instruction. */
        covers?: number[];
        /** Unique identifier for the Transaction code. */
        transactionCode?: string[];
        /** Unique identifier for the Billing Instruction. */
        billingCode?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        routingInstructionsId?: number[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        routingLinkId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoomRoutingPostings, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/comp`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name PutRoutingInstructions
     * @summary Create routing instructions
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/create
     */
    putRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      routingInstructions: RoutingInstructions,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<CreatedRoutingInstructions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/create`,
        method: 'PUT',
        body: routingInstructions,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name DeleteFolioRoutingInstructions
     * @summary Delete Folio routing instructions
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/folio
     */
    deleteFolioRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
        refreshFolio?: boolean;
        /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
        retrievePostingsForRoomRouting?: boolean;
        folioWindowNo?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        payeeId?: string;
        /** Flag to indicate if the routing instruction is a daily instruction. */
        daily?: boolean;
        sunday?: boolean;
        monday?: boolean;
        tuesday?: boolean;
        wednesday?: boolean;
        thursday?: boolean;
        friday?: boolean;
        saturday?: boolean;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        /** Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero. */
        creditLimit?: number[];
        /** The routing limit percentage allowed for this routing instruction. */
        percentageLimit?: number[];
        /** Number of covers for this routing instruction. */
        covers?: number[];
        /** Unique identifier for the Transaction code. */
        transactionCode?: string[];
        /** Unique identifier for the Billing Instruction. */
        billingCode?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        routingInstructionsId?: number[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        routingLinkId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoomRoutingPostings, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/folio`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name DeleteRequestRoutingInstructions
     * @summary Delete request routing instructions
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/request
     */
    deleteRequestRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
        refreshFolio?: boolean;
        /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
        retrievePostingsForRoomRouting?: boolean;
        /** Name of the Opera User */
        userName?: string;
        comments?: string;
        /** Flag to indicate if the routing instruction is a daily instruction. */
        daily?: boolean;
        sunday?: boolean;
        monday?: boolean;
        tuesday?: boolean;
        wednesday?: boolean;
        thursday?: boolean;
        friday?: boolean;
        saturday?: boolean;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoomRoutingPostings, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/request`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     *
     * @tags Cashiering
     * @name DeleteRoomRoutingInstructions
     * @summary Delete Room routing instructions
     * @request DELETE:/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/room
     */
    deleteRoomRoutingInstructions: (
      reservationId: string,
      hotelId: string,
      query?: {
        /** On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions. */
        refreshFolio?: boolean;
        /** This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted. */
        retrievePostingsForRoomRouting?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        reservationNameId?: string;
        /** Flag to indicate if the routing instruction is a daily instruction. */
        daily?: boolean;
        sunday?: boolean;
        monday?: boolean;
        tuesday?: boolean;
        wednesday?: boolean;
        thursday?: boolean;
        friday?: boolean;
        saturday?: boolean;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        /** Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero. */
        creditLimit?: number[];
        /** The routing limit percentage allowed for this routing instruction. */
        percentageLimit?: number[];
        /** Number of covers for this routing instruction. */
        covers?: number[];
        /** Unique identifier for the Transaction code. */
        transactionCode?: string[];
        /** Unique identifier for the Billing Instruction. */
        billingCode?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        routingInstructionsId?: number[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        routingLinkId?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoomRoutingPostings, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/routingInstructions/room`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     *
     * @tags Cashiering
     * @name IsDepositRefundEligible
     * @summary Get eligibility of Deposit Refund
     * @request GET:/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}
     */
    isDepositRefundEligible: (
      transactionId: string,
      reservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<DepositRefundEligibleCheck, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/transactions/${transactionId}`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     *
     * @tags Cashiering
     * @name SplitDepositTransaction
     * @summary Split deposit transaction
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}
     */
    splitDepositTransaction: (
      transactionId: string,
      reservationId: string,
      hotelId: string,
      splitDepositTransaction: SplitDepositTransaction,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<SplitDepositTransactionStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/transactions/${transactionId}`,
        method: 'PUT',
        body: splitDepositTransaction,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     *
     * @tags Cashiering
     * @name TransferFolioToWindow
     * @summary Transfer Folio to Window.
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/transferFolioTransactions
     */
    transferFolioToWindow: (
      reservationId: string,
      hotelId: string,
      folioToWindow: FolioToWindow,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/transferFolioTransactions`,
        method: 'PUT',
        body: folioToWindow,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     *
     * @tags Cashiering
     * @name TransferTransactionToWindow
     * @summary Transfer Transaction to Window
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/transferTransactions
     */
    transferTransactionToWindow: (
      reservationId: string,
      hotelId: string,
      transactionToWindow: TransactionToWindow,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<TransferTransactionToWindow, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/transferTransactions`,
        method: 'PUT',
        body: transactionToWindow,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     *
     * @tags Cashiering
     * @name VoidFolio
     * @summary Void folio
     * @request PUT:/hotels/{hotelId}/reservations/{reservationId}/voidfolios/{folioId}
     */
    voidFolio: (
      folioId: string,
      reservationId: string,
      hotelId: string,
      folioToVoid: FolioToVoid,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<VoidedFolio, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${reservationId}/voidfolios/${folioId}`,
        method: 'PUT',
        body: folioToVoid,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     *
     * @tags Cashiering
     * @name PutReservationDepositTransfer
     * @summary Change Reservation Deposit Transfer.
     * @request PUT:/hotels/{hotelId}/reservations/{sourceReservationId}/deposit/transfers
     */
    putReservationDepositTransfer: (
      sourceReservationId: string,
      hotelId: string,
      depositTransferCriteria: DepositTransferCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${sourceReservationId}/deposit/transfers`,
        method: 'PUT',
        body: depositTransferCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     *
     * @tags Cashiering
     * @name TransferTransactionToReservation
     * @summary Transfer Transaction to Reservation
     * @request PUT:/hotels/{hotelId}/reservations/{toReservationId}/transferTransaction
     */
    transferTransactionToReservation: (
      toReservationId: string,
      hotelId: string,
      reservationTransaction: ReservationTransaction,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/reservations/${toReservationId}/transferTransaction`,
        method: 'PUT',
        body: reservationTransaction,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     *
     * @tags Cashiering
     * @name GetHotelRevenue
     * @summary Get Hotel Revenue
     * @request GET:/hotels/{hotelId}/revenue
     */
    getHotelRevenue: (
      hotelId: string,
      query?: {
        /**
         * Business date.
         * @format date
         */
        businessDate?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<HotelRevenueDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/revenue`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     *
     * @tags Cashiering
     * @name GetBillingInstructionCodes
     * @summary Get Billing (routing) Instruction Codes
     * @request GET:/hotels/{hotelId}/routingInstructionCodes
     */
    getBillingInstructionCodes: (
      hotelId: string,
      query?: {
        /** Flag to include the search in the Transaction Codes. */
        includeTransactionCodes?: boolean;
        /** Flag to include the search in the Billing Instructions. */
        includeBillingInstructions?: boolean;
        /** Flag to include the comp instructions in the available list. */
        includeCompInstructions?: boolean;
        /** Lookup string which will try to match an existing Billing and/or Transaction Codes. */
        codeWildCard?: string;
        /** Lookup string which will try to match an existing Billing and/or Transaction Code Description. */
        descriptionWildCard?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BillingInstructionCodes, ExceptionDetailType>({
        path: `/hotels/${hotelId}/routingInstructionCodes`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     *
     * @tags Cashiering
     * @name LinkReservationPackageAllowance
     * @summary Link Reservation package allowance
     * @request POST:/hotels/{hotelId}/sourceReservations/{sourceReservationId}/destinationReservations/{destinationReservationId}/packageAllowance/links
     */
    linkReservationPackageAllowance: (
      destinationReservationId: string,
      sourceReservationId: string,
      hotelId: string,
      linkReservationPackageAllowance: LinkReservationPackageAllowance,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/sourceReservations/${sourceReservationId}/destinationReservations/${destinationReservationId}/packageAllowance/links`,
        method: 'POST',
        body: linkReservationPackageAllowance,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     *
     * @tags Cashiering
     * @name GetPostingsForRefresh
     * @summary Get Postings For Refresh
     * @request GET:/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting
     */
    getPostingsForRefresh: (
      targetReservationId: string,
      sourceReservationId: string,
      hotelId: string,
      query?: {
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        targetResvNameIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        targetResvNameIdType?: string;
        /** Flag to indicate if the routing instruction is a daily instruction. */
        daily?: boolean;
        friday?: boolean;
        monday?: boolean;
        saturday?: boolean;
        sunday?: boolean;
        thursday?: boolean;
        tuesday?: boolean;
        wednesday?: boolean;
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        /** Hotel context of the Transaction code. */
        transactionHotelId?: string[];
        /** Print receipt flag that tells whether the transaction receipt is to be printed or not. This is based on the transaction code. */
        printTrxReceipt?: boolean[];
        /** Unique identifier for the Transaction code. */
        transactionCode?: string[];
        /** Transaction codes info. */
        description?: string[];
        /** Category of the transaction code. */
        transactionGroup?: string[];
        /** Sub category of the transaction code. */
        transactionSubGroup?: string[];
        /** Unique Universal product code of the transaction code. */
        universalProductCode?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        routingInstructionsId?: number[];
        /** Unique code of the article. */
        articleCode?: string[];
        /** Hotel code to which the article belongs. */
        articleHotelId?: string[];
        /** Indicates whether the article is inactive or not. */
        inactive?: boolean[];
        /** Display Order sequence. */
        orderSequence?: number[];
        /** Description of the article. */
        articleDescription?: string[];
        /** Transaction code to which the article belongs. */
        articleTransactionCode?: string[];
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        /** Indicates whether the article is available for post it. */
        availableForPostIt?: boolean;
        /**
         * Color configuration type. This color configuration provides a visual category of entities.
         * @uniqueItems true
         */
        color?:
          | 'Red'
          | 'DarkRed'
          | 'Green'
          | 'DarkGreen'
          | 'LightGreen'
          | 'Orange'
          | 'White'
          | 'Yellow'
          | 'DarkYellow'
          | 'Purple'
          | 'Brown'
          | 'Gray'
          | 'Aqua'
          | 'Chocolate'
          | 'Blue'
          | 'LightBlue'
          | 'DarkBlue'
          | 'Cyan'
          | 'DarkCyan'
          | 'Magenta'
          | 'DarkMagenta'
          | 'Black';
        /** Unique Universal product code of the article. */
        articleUniversalProductCode?: string[];
        /** Unique identifier for the Billing Instruction. */
        billingCode?: string[];
        /** Hotel context of the Billing Instruction. */
        billingHotelId?: string[];
        /** Billing Instruction code description. */
        desc?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        billingInstructionRoutingInstructionsId?: number[];
        /** Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero. */
        creditLimit?: number;
        /** The routing limit percentage allowed for this routing instruction. */
        percentageLimit?: number;
        /** Number of covers for this routing instruction. */
        covers?: number;
        /** Amount of Credit used for this routing instruction. */
        limitUsed?: number;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        routingLinkIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        routingLinkIdType?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostingsForRefresh, ExceptionDetailType>({
        path: `/hotels/${hotelId}/sourceReservations/${sourceReservationId}/targetReservations/${targetReservationId}/roomRouting`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     *
     * @tags Cashiering
     * @name ProcessRoomRoutingRefresh
     * @summary Process Room Routing Refresh
     * @request PUT:/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting
     */
    processRoomRoutingRefresh: (
      targetReservationId: string,
      sourceReservationId: string,
      hotelId: string,
      roomRoutingRefresh: RoomRoutingRefresh,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/sourceReservations/${sourceReservationId}/targetReservations/${targetReservationId}/roomRouting`,
        method: 'PUT',
        body: roomRoutingRefresh,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     *
     * @tags Cashiering
     * @name GetStoredFolioDetails
     * @summary Get Stored Folio Details
     * @request GET:/hotels/{hotelId}/storedFolios/{folioId}
     */
    getStoredFolioDetails: (
      folioId: string,
      hotelId: string,
      query?: {
        /** The Fiscal Bill number of this posting */
        fiscalBillNo?: string;
        /**
         * Date of Folio Generation.
         * @format date
         */
        folioDate?: string;
        /**
         * The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status.
         * @uniqueItems true
         */
        folioStatus?: 'Deposit' | 'Void' | 'Ok' | 'Zero' | 'Compress' | 'Converted' | 'Internal';
        /** The name of the Folio Type used for the Folio Number sequence. */
        folioTypeName?: string;
        /** Internal window ID which is unique to the reservation. This ID can only be used for reference. */
        internalFolioWindowID?: string;
        /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
        invoiceNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<StoredFolioDetailsInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/storedFolios/${folioId}`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     *
     * @tags Cashiering
     * @name PostStoredFolioDetails
     * @summary Create Stored Folio Details
     * @request POST:/hotels/{hotelId}/storedFolios/{folioId}
     */
    postStoredFolioDetails: (
      folioId: string,
      hotelId: string,
      storedFolioDetails: StoredFolioDetails,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/storedFolios/${folioId}`,
        method: 'POST',
        body: storedFolioDetails,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     *
     * @tags Cashiering
     * @name PostSupplementalFolio
     * @summary Post supplemental folio
     * @request POST:/hotels/{hotelId}/supplementFolios
     */
    postSupplementalFolio: (
      hotelId: string,
      postSupplementalFolio: PostSupplementalFolio,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<PostSupplementalFolioStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/supplementFolios`,
        method: 'POST',
        body: postSupplementalFolio,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     *
     * @tags Cashiering
     * @name GetTransactionCodes
     * @summary Get Transaction Codes
     * @request GET:/hotels/{hotelId}/transactionCodes
     */
    getTransactionCodes: (
      hotelId: string,
      query?: {
        /**
         * Event being generated by a Supplemental Folio.
         * @uniqueItems true
         */
        event?:
          | 'CheckOut'
          | 'EarlyDeparture'
          | 'AdvanceBill'
          | 'InterimBill'
          | 'PasserBy'
          | 'PostIt'
          | 'CreditBill'
          | 'Deposit'
          | 'DepositRefund'
          | 'AutoFolio'
          | 'PrepaidCard'
          | 'AutoSettlement'
          | 'InformationFolio'
          | 'SupplementalFolio';
        /** Flag to indicate if Article Codes are required, along with the parent Transaction Codes. */
        includeArticles?: boolean;
        /** Flag to indicate if it is allowed to manually post transaction codes. */
        userRoleTransactions?: boolean;
        /** Flag to include the search for Manual Post Allowed. */
        manualPostAllowed?: boolean;
        /** Lookup string which will try to match an existing Transaction Codes. */
        code?: string;
        /** Lookup string which will try to match an existing Transaction Code Description. */
        description?: string;
        wildCard?: string;
        /** The Fiscal Bill number of this posting */
        fiscalBillNo?: string;
        /**
         * Date of Folio Generation.
         * @format date
         */
        folioDate?: string;
        /** Folio Number. */
        folioNo?: number;
        /**
         * The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status.
         * @uniqueItems true
         */
        folioStatus?: 'Deposit' | 'Void' | 'Ok' | 'Zero' | 'Compress' | 'Converted' | 'Internal';
        /** The name of the Folio Type used for the Folio Number sequence. */
        folioTypeName?: string;
        /** Internal window ID which is unique to the reservation. This ID can only be used for reference. */
        internalFolioWindowID?: string;
        /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
        invoiceNo?: number;
        /**
         * Goods Type Transactions.
         * @uniqueItems true
         */
        trxServiceType?: 'Services' | 'Goods';
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<TransactionCodes, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactionCodes`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     *
     * @tags Cashiering
     * @name GetFolioTransactionDetails
     * @summary Get Folio Transaction Details
     * @request GET:/hotels/{hotelId}/transactionDetails
     */
    getFolioTransactionDetails: (
      hotelId: string,
      query?: {
        /** Flag to indicate if the automatically generated transactions, related to the main transaction number above, are also to be retrieved as part of this request. */
        includeGenerates?: boolean;
        /** Unique Transaction Number of the transaction(posting) for which details are required. */
        transactionNo?: number[];
        /** Flag to indicate what currency exchange information text needs to be included in response. */
        includeExchangeInformation?: boolean;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<FolioTransactionDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactionDetails`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p>
     *
     * @tags Cashiering
     * @name GetGuestsTransactions
     * @summary Get Guests Transactions
     * @request GET:/hotels/{hotelId}/transactions
     */
    getGuestsTransactions: (
      hotelId: string,
      query: {
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        reservationList: string[];
        /** Configuring this flag to be TRUE will return transactions that are auto generated like taxes. */
        includeGenerates?: boolean;
        /** Configuring this flag to be TRUE will return transactions that are included in an Accounts Receivable invoice. */
        includeTransactionsWithARInvoiceNo?: boolean;
        /** Configuring this flag to be TRUE will return transactions that already belongs to a folio. */
        includeTransactionsWithFolioNo?: boolean;
        /** Configuring this flag to be TRUE will return transactions whose transaction codes have manual posting enabled, or when an adjustment code is attached to the transaction code, the adjustment code's manual posting is enabled. */
        includeTransactionsWithManualPostingOnly?: boolean;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string[];
        /** Transaction number of the payment being corrected. */
        transactionNo?: number[];
        /** Category of the transaction code to filter the result. */
        transactionGroup?: string[];
        /** Sub category of the transaction code to filter the result. */
        transactionSubGroup?: string[];
        /** Unique identifier for the Billing Instruction. */
        billingCode?: string[];
        /** Hotel context of the Billing Instruction. */
        billingHotelId?: string[];
        /** Billing Instruction code description. */
        desc?: string[];
        /** This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer. */
        routingInstructionsId?: number[];
        /** Lookup string which will try to match an existing Transaction Code/s. */
        trxCodeWildCard?: string;
        /** Lookup string which will try to match an existing Transaction Code's Description. */
        trxDescriptionWildCard?: string;
        /** Lookup string which will try to match an existing Cheque number's code. */
        checkNumberWildCard?: string;
        /** Filters the results for reference number. */
        referenceNumberWildCard?: string;
        /** Filter the results for supplement. */
        supplementWildCard?: string;
        /** Filters the result to only include transactions in this window number. */
        windowNo?: number[];
        /**
         * Wrapper Transaction Type.
         * @uniqueItems true
         */
        cashieringTransactionType?: ('Revenue' | 'Payment' | 'Wrapper')[];
        /** @format date */
        startDate?: string;
        /** @format date */
        endDate?: string;
        /** Cashier Id of the Cashier. */
        cashierId?: number;
        code?: string[];
        /** Filters the result based on its commission property. Do not set this criteria if all transactions should be included whether or not they are commissionable. */
        commissionable?: boolean;
        /** Filters the result which are allow for service recovery. */
        serviceRecoveryAllowed?: boolean;
        /**
         * Returns only postings without bill number.
         * @uniqueItems true
         */
        postedTransactionType?: ('All' | 'Routed' | 'Direct' | 'Transferred' | 'Payments' | 'NonBilled')[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<GuestsTransactions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     *
     * @tags Cashiering
     * @name AdjustTransactions
     * @summary Adjust Transactions
     * @request PUT:/hotels/{hotelId}/transactions/adjust
     */
    adjustTransactions: (
      hotelId: string,
      transactionsAdjustment: TransactionsAdjustment,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<AdjustedTransactions, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/adjust`,
        method: 'PUT',
        body: transactionsAdjustment,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     *
     * @tags Cashiering
     * @name ReverseArInvoice
     * @summary Reverse AR Invoice
     * @request DELETE:/hotels/{hotelId}/transactions/arInvoices/reverse
     */
    reverseArInvoice: (
      hotelId: string,
      query?: {
        /** The reason code for the deletion. */
        reasonCode?: string;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** The unique transaction number of this transaction. */
        transactionCodes?: number[];
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/arInvoices/reverse`,
        method: 'DELETE',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     *
     * @tags Cashiering
     * @name SplitTransaction
     * @summary Split transactions
     * @request PUT:/hotels/{hotelId}/transactions/split
     */
    splitTransaction: (hotelId: string, transactionToSplit: TransactionToSplit, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/split`,
        method: 'PUT',
        body: transactionToSplit,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     *
     * @tags Cashiering
     * @name SplitAndTransferTransaction
     * @summary Split and transfer transactions
     * @request PUT:/hotels/{hotelId}/transactions/splitAndTransfer
     */
    splitAndTransferTransaction: (
      hotelId: string,
      transactionToSplitAndTransfer: TransactionToSplitAndTransfer,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/splitAndTransfer`,
        method: 'PUT',
        body: transactionToSplitAndTransfer,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     *
     * @tags Cashiering
     * @name ValidateTransactionCodes
     * @summary Validate Transaction Codes
     * @request GET:/hotels/{hotelId}/transactions/{transactionId}
     */
    validateTransactionCodes: (
      transactionId: string,
      hotelId: string,
      query?: {
        /**
         * Event being generated by a Supplemental Folio.
         * @uniqueItems true
         */
        event?:
          | 'CheckOut'
          | 'EarlyDeparture'
          | 'AdvanceBill'
          | 'InterimBill'
          | 'PasserBy'
          | 'PostIt'
          | 'CreditBill'
          | 'Deposit'
          | 'DepositRefund'
          | 'AutoFolio'
          | 'PrepaidCard'
          | 'AutoSettlement'
          | 'InformationFolio'
          | 'SupplementalFolio';
        /** The Fiscal Bill number of this posting */
        fiscalBillNo?: string;
        /**
         * Date of Folio Generation.
         * @format date
         */
        folioDate?: string;
        /** Folio Number. */
        folioNo?: number;
        /**
         * The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status.
         * @uniqueItems true
         */
        folioStatus?: 'Deposit' | 'Void' | 'Ok' | 'Zero' | 'Compress' | 'Converted' | 'Internal';
        /** The name of the Folio Type used for the Folio Number sequence. */
        folioTypeName?: string;
        /** Internal window ID which is unique to the reservation. This ID can only be used for reference. */
        internalFolioWindowID?: string;
        /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
        invoiceNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<ValidatedTransactionCode, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     *
     * @tags Cashiering
     * @name PostCompTransaction
     * @summary Submit Comp Transaction
     * @request POST:/hotels/{hotelId}/transactions/{transactionId}
     */
    postCompTransaction: (
      transactionId: string,
      hotelId: string,
      compTransactionCriteria: CompTransactionCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}`,
        method: 'POST',
        body: compTransactionCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     *
     * @tags Cashiering
     * @name PutBillingCharge
     * @summary Change Billing Charge
     * @request PUT:/hotels/{hotelId}/transactions/{transactionId}/charges
     */
    putBillingCharge: (
      transactionId: string,
      hotelId: string,
      billingCharge: BillingCharge,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BillingChargeStatus, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/charges`,
        method: 'PUT',
        body: billingCharge,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     *
     * @tags Cashiering
     * @name GetGamingRequestStatusInfo
     * @summary Get Gaming Request Status
     * @request GET:/hotels/{hotelId}/transactions/{transactionId}/compRequestStatus
     */
    getGamingRequestStatusInfo: (transactionId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<GamingRequestStatusInfo, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/compRequestStatus`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     *
     * @tags Cashiering
     * @name ReverseFlexibleBenefitPosting
     * @summary Delete flexible benefit postings
     * @request DELETE:/hotels/{hotelId}/transactions/{transactionId}/flexibleBenefitPostings
     */
    reverseFlexibleBenefitPosting: (transactionId: string, hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/flexibleBenefitPostings`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to change Billing Payment. <p><strong>OperationId:</strong>changeBillingPayment</p>
     *
     * @tags Cashiering
     * @name ChangeBillingPayment
     * @summary Change Billing Payment
     * @request PUT:/hotels/{hotelId}/transactions/{transactionId}/payments
     */
    changeBillingPayment: (
      transactionId: string,
      hotelId: string,
      billingPaymentToChange: BillingPaymentToChange,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/payments`,
        method: 'PUT',
        body: billingPaymentToChange,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     *
     * @tags Cashiering
     * @name DetachDepositPolicyFromPayment
     * @summary Detach Deposit Policy from Payment
     * @request PUT:/hotels/{hotelId}/transactions/{transactionId}/policies/detach/deposit
     */
    detachDepositPolicyFromPayment: (
      transactionId: string,
      hotelId: string,
      detachPolicyApplyCriteria: DetachPolicyApplyCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/policies/detach/deposit`,
        method: 'PUT',
        body: detachPolicyApplyCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     *
     * @tags Cashiering
     * @name PostReversePayment
     * @summary Create reverse payments
     * @request POST:/hotels/{hotelId}/transactions/{transactionId}/reversePayments
     */
    postReversePayment: (
      transactionId: string,
      hotelId: string,
      paymentReversalCriteria: PaymentReversalCriteria,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactions/${transactionId}/reversePayments`,
        method: 'POST',
        body: paymentReversalCriteria,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to get Balance Information. <p><strong>OperationId:</strong>getBalanceInfo</p>
     *
     * @tags Cashiering
     * @name GetBalanceInfo
     * @summary Get Balance Information
     * @request GET:/hotels/{hotelId}/transactionsTotal
     */
    getBalanceInfo: (
      hotelId: string,
      query?: {
        /**
         * Event being generated by a Supplemental Folio.
         * @uniqueItems true
         */
        event?:
          | 'CheckOut'
          | 'EarlyDeparture'
          | 'AdvanceBill'
          | 'InterimBill'
          | 'PasserBy'
          | 'PostIt'
          | 'CreditBill'
          | 'Deposit'
          | 'DepositRefund'
          | 'AutoFolio'
          | 'PrepaidCard'
          | 'AutoSettlement'
          | 'InformationFolio'
          | 'SupplementalFolio';
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        idContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        type?: string;
        folioWindowNo?: number[];
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number[];
        /** Transaction Code to post. */
        transactionCode?: string[];
        /** Article ID. */
        articleCode?: string[];
        /** A monetary amount. */
        amount?: number[];
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string[];
        /** Quantity to post to the folio. */
        postingQuantity?: number[];
        /** User-defined posting reference. */
        postingReference?: string[];
        /** User-defined posting remark. */
        postingRemark?: string[];
        /** Indicates the Cheque number. */
        checkNumber?: string[];
        /** Corrected arrangement code from the package associated to this transaction. */
        arrangementCode?: string[];
        /** Apply room routing when making this posting. */
        applyRoutingInstructions?: boolean[];
        /** Use the applicable package allowance when making this posting. */
        usePackageAllowance?: boolean[];
        /** True indicates the Transaction Code is allowed to be posted automatically. */
        autoPosting?: boolean[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string[];
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        uniqueIdIdContext?: string[];
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        uniqueIdType?: string[];
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        postItNumberId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        postItNumberIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        postItNumberType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        profileIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        profileIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        profileIdType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        reservationIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        reservationIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        reservationIdType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        policyIdId?: string;
        /** Used to identify the source of the identifier (e.g., IATA, ABTA). */
        policyIdIdContext?: string;
        /** A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT). */
        policyIdType?: string;
        /** The Fiscal Bill number of this posting */
        fiscalBillNo?: string;
        /**
         * Date of Folio Generation.
         * @format date
         */
        folioDate?: string;
        /** Folio Number. */
        folioNo?: number;
        /**
         * The Folio Status Example: DEPOSIT folio, VOID folio or the default OK folio status.
         * @uniqueItems true
         */
        folioStatus?: 'Deposit' | 'Void' | 'Ok' | 'Zero' | 'Compress' | 'Converted' | 'Internal';
        /** The name of the Folio Type used for the Folio Number sequence. */
        folioTypeName?: string;
        /** Internal window ID which is unique to the reservation. This ID can only be used for reference. */
        internalFolioWindowID?: string;
        /** Invoice No after the folio is generated. Same invoice number may be referred in multiple folios */
        invoiceNo?: number;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BalanceInfoCriteria, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transactionsTotal`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     *
     * @tags Cashiering
     * @name TransferCompTransactions
     * @summary Transfer comp transactions to window
     * @request POST:/hotels/{hotelId}/transferCompTransactions
     */
    transferCompTransactions: (
      hotelId: string,
      transferCompTransactions: TransferCompTransactions,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/hotels/${hotelId}/transferCompTransactions`,
        method: 'POST',
        body: transferCompTransactions,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     *
     * @tags Cashiering
     * @name PostZeroBalanceCheckoutReservations
     * @summary Create Zero Balance Checkout Reservation Batch
     * @request POST:/hotels/{hotelId}/zeroBalanceCheckoutReservations/batchJobs
     */
    postZeroBalanceCheckoutReservations: (
      hotelId: string,
      batchZeroBalanceCheckoutReservation: BatchZeroBalanceCheckoutReservation,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<BatchZeroBalanceCheckoutDetails, ExceptionDetailType>({
        path: `/hotels/${hotelId}/zeroBalanceCheckoutReservations/batchJobs`,
        method: 'POST',
        body: batchZeroBalanceCheckoutReservation,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  reservations = {
    /**
     * @description You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     *
     * @tags Cashiering
     * @name PostRoomAndTaxForDayUse
     * @summary Operation to post room and tax for day use.
     * @request POST:/reservations/{reservationId}/postRoomAndTaxForDayUse
     */
    postRoomAndTaxForDayUse: (
      hotelId: string,
      reservationId: string,
      postRoomAndTaxForDayUse: PostRoomAndTaxForDayUse,
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/reservations/${reservationId}/postRoomAndTaxForDayUse`,
        method: 'POST',
        body: postRoomAndTaxForDayUse,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  roundingDifference = {
    /**
     * @description You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     *
     * @tags Cashiering
     * @name GetRoundingDifference
     * @summary Get Rounding Difference
     * @request GET:/roundingDifference
     */
    getRoundingDifference: (
      hotelId: string,
      query?: {
        /**
         * Event being generated by a Supplemental Folio.
         * @uniqueItems true
         */
        event?:
          | 'CheckOut'
          | 'EarlyDeparture'
          | 'AdvanceBill'
          | 'InterimBill'
          | 'PasserBy'
          | 'PostIt'
          | 'CreditBill'
          | 'Deposit'
          | 'DepositRefund'
          | 'AutoFolio'
          | 'PrepaidCard'
          | 'AutoSettlement'
          | 'InformationFolio'
          | 'SupplementalFolio';
        folioWindowNo?: number;
        /** Internal window ID which is unique to the reservation. This ID can only be used for reference. */
        internalFolioWindowID?: string;
        /** The Cashier ID of the Cashier who is currently processing the transaction(s). */
        cashierId?: number;
        /** Hotel context of the reservation. */
        hotelId?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        id?: string;
        /** A monetary amount. */
        amount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currencyCode?: string;
        description?: string;
        folioView?: number;
        paymentMethod?: string;
        /** Attach the credit card to profile. */
        attachCreditCardToProfile?: boolean;
        cardHolderName?: string;
        cardNumber?: string;
        cardNumberLast4Digits?: string;
        cardNumberMasked?: string;
        /**
         * Simple type for indicating if credit card number is tokenized.
         * @uniqueItems true
         */
        cardOrToken?: 'CardNumber' | 'Token';
        /**
         * This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
         * @uniqueItems true
         */
        cardType?:
          | 'Ab'
          | 'Am'
          | 'Ax'
          | 'Cb'
          | 'Dc'
          | 'Ds'
          | 'Dt'
          | 'Ec'
          | 'Er'
          | 'Jc'
          | 'Jl'
          | 'Mc'
          | 'Nb'
          | 'So'
          | 'St'
          | 'Sw'
          | 'Va'
          | 'Xy'
          | 'Zz'
          | 'Cp'
          | 'Cu';
        /**
         * Expiration date of the credit card
         * @format date
         */
        expirationDate?: string;
        expirationDateExpired?: boolean;
        /** Masked Expiration date of the credit card */
        expirationDateMasked?: string;
        /** @uniqueItems true */
        processing?: 'Eft' | 'Manual';
        swiped?: boolean;
        /** Indicates the user defined credit card type if credit card type from a defined list is not provided */
        userDefinedCardType?: string;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        cardIdId?: string;
        /** A monetary amount. */
        currentAuthorizedAmountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        currentAuthorizedAmountCurrencyCode?: string;
        /** A monetary amount. */
        approvalAmountNeededAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        approvalAmountNeededCurrencyCode?: string;
        /** A monetary amount. */
        balanceAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        balanceCurrencyCode?: string;
        /** The authorization rule code. */
        code?: number;
        /** A monetary amount. */
        amountAmount?: number;
        /** Provides a currency code to reflect the currency in which an amount may be expressed. */
        amountCurrencyCode?: string;
        /** A percentage value if the authorization rule is percentage based. */
        percent?: number;
        emailFolio?: boolean;
        /** A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. */
        uniqueIdId?: string;
        /**
         * Time stamp of the creation.
         * @format date-time
         */
        createDateTime?: string;
        /** ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation. */
        creatorId?: string;
        /** Defines the e-mail address. */
        emailAddress?: string;
        /**
         * Supported Email format.
         * @uniqueItems true
         */
        emailFormat?: 'Html' | 'Text';
        /** Identifies the last software system or person to modify a record. */
        lastModifierId?: string;
        /**
         * Time stamp of last modification.
         * @format date-time
         */
        lastModifyDateTime?: string;
        /** Display Order sequence. */
        orderSequence?: number;
        /** When true, indicates a primary information. */
        primaryInd?: boolean;
        /**
         * Date an item will be purged from a database (e.g., from a live database to an archive).
         * @format date
         */
        purgeDate?: string;
        /** Defines the purpose of the e-mail address (e.g. personal, business, listserve). */
        emailType?: string;
        /** Describes the Type code */
        typeDescription?: string;
      },
      params: RequestParams = {},
    ) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<RoundingDifferenceAmount, ExceptionDetailType>({
        path: `/roundingDifference`,
        method: 'GET',
        query: query,
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
  services = {
    /**
     * @description You can use this API to clear cache in cashiering services. <p><strong>OperationId:</strong>clearCashieringServiceCache</p>
     *
     * @tags Cashiering
     * @name ClearCashieringServiceCache
     * @summary clearing of cache in cashiering services
     * @request DELETE:/services/cashiering/cache
     */
    clearCashieringServiceCache: (hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<Status, ExceptionDetailType>({
        path: `/services/cashiering/cache`,
        method: 'DELETE',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },

    /**
     * @description You can use this API to Status check of cashiering services. <p><strong>OperationId:</strong>pingCashieringService</p>
     *
     * @tags Cashiering
     * @name PingCashieringService
     * @summary Status check of cashiering services
     * @request GET:/services/cashiering/status
     */
    pingCashieringService: (hotelId: string, params: RequestParams = {}) => {
      const headers = { ...params.headers, 'x-hotelid': hotelId };
      const newParams = { ...params, headers };
      return this.request<OperaVersion, ExceptionDetailType>({
        path: `/services/cashiering/status`,
        method: 'GET',
        type: ContentType.Json,
        format: 'json',
        ...newParams,
      });
    },
  };
}
