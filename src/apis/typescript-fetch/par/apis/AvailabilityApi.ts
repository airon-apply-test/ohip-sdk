/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  HotelAvailability,
  ReservationGuaranteesPolicies,
  RestrictionsByDateRange,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelAvailabilityFromJSON,
    HotelAvailabilityToJSON,
    ReservationGuaranteesPoliciesFromJSON,
    ReservationGuaranteesPoliciesToJSON,
    RestrictionsByDateRangeFromJSON,
    RestrictionsByDateRangeToJSON,
} from '../models';

export interface GetHotelAvailabilityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cro?: Array<string>;
    includeClosedRates?: Array<boolean>;
    includeDefaultRatePlanSet?: Array<boolean>;
    initialRatePlanSet?: Array<boolean>;
    limit?: Array<number>;
    pagePointerKey?: Array<string>;
    ratePlanSet?: Array<string>;
    redeemAwards?: Array<boolean>;
    roomStayStartDate?: Date;
    roomStayEndDate?: Date;
    roomStayQuantity?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    fullStayTimeSpanStartDate?: Date;
    fullStayTimeSpanEndDate?: Date;
    prevailingRate?: boolean;
    rateCategory?: string;
    rateClass?: string;
    rateGroup?: string;
    ratePlanCode?: Array<string>;
    promotionCode?: Array<string>;
    roomType?: Array<string>;
    feature?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    reservationProfileType?: Set<GetHotelAvailabilityReservationProfileTypeEnum>;
    attachedProfileId?: Array<string>;
    hotelReservationId?: string;
    hotelReservationIdType?: string;
    ratePlanInfo?: boolean;
    returnOnlyAvailableRateCodes?: boolean;
    resGuaranteeInfo?: boolean;
    roomTypeInfo?: boolean;
    membershipIdNumber?: Array<number>;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    pointsAvailable?: Array<number>;
    smokingPreference?: Array<string>;
    hotelPackage?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationGuaranteesRequest {
    hotelId?: string;
    arrivalDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    blockId?: string;
    reservationGuestId?: string;
    companyId?: string;
    travelAgentId?: string;
    sourceId?: string;
    groupId?: string;
    guaranteeCode?: string;
    calculateEstimateAmount?: boolean;
    startDate?: Date;
    endDate?: Date;
    numberOfRooms?: number;
    numberOfAdults?: number;
    numberOfChildren?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRestrictionsByDateRangeRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainName?: string;
    end?: Date;
    fetchSizeByDay?: number;
    limit?: number;
    restrictionInfo?: GetRestrictionsByDateRangeRestrictionInfoEnum;
    restrictionSearchCriteriaStartDate?: Date;
    bookingChannelCode?: string;
    ratePlanCategory?: string;
    ratePlanCode?: string;
    roomClass?: string;
    roomType?: string;
    filterCodeCategory?: GetRestrictionsByDateRangeFilterCodeCategoryEnum;
    filterCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AvailabilityApi extends runtime.BaseAPI {

    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    async getHotelAvailabilityRaw(requestParameters: GetHotelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelAvailability>> {
        const queryParameters: any = {};

        if (requestParameters.cro) {
            queryParameters['cro'] = requestParameters.cro;
        }

        if (requestParameters.includeClosedRates) {
            queryParameters['includeClosedRates'] = requestParameters.includeClosedRates;
        }

        if (requestParameters.includeDefaultRatePlanSet) {
            queryParameters['includeDefaultRatePlanSet'] = requestParameters.includeDefaultRatePlanSet;
        }

        if (requestParameters.initialRatePlanSet) {
            queryParameters['initialRatePlanSet'] = requestParameters.initialRatePlanSet;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pagePointerKey) {
            queryParameters['pagePointerKey'] = requestParameters.pagePointerKey;
        }

        if (requestParameters.ratePlanSet) {
            queryParameters['ratePlanSet'] = requestParameters.ratePlanSet;
        }

        if (requestParameters.redeemAwards) {
            queryParameters['redeemAwards'] = requestParameters.redeemAwards;
        }

        if (requestParameters.roomStayStartDate !== undefined) {
            queryParameters['roomStayStartDate'] = (requestParameters.roomStayStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayEndDate !== undefined) {
            queryParameters['roomStayEndDate'] = (requestParameters.roomStayEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayQuantity !== undefined) {
            queryParameters['roomStayQuantity'] = requestParameters.roomStayQuantity;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.fullStayTimeSpanStartDate !== undefined) {
            queryParameters['fullStayTimeSpanStartDate'] = (requestParameters.fullStayTimeSpanStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fullStayTimeSpanEndDate !== undefined) {
            queryParameters['fullStayTimeSpanEndDate'] = (requestParameters.fullStayTimeSpanEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.prevailingRate !== undefined) {
            queryParameters['prevailingRate'] = requestParameters.prevailingRate;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateClass !== undefined) {
            queryParameters['rateClass'] = requestParameters.rateClass;
        }

        if (requestParameters.rateGroup !== undefined) {
            queryParameters['rateGroup'] = requestParameters.rateGroup;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.feature) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.attachedProfileId) {
            queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
        }

        if (requestParameters.hotelReservationId !== undefined) {
            queryParameters['hotelReservationId'] = requestParameters.hotelReservationId;
        }

        if (requestParameters.hotelReservationIdType !== undefined) {
            queryParameters['hotelReservationIdType'] = requestParameters.hotelReservationIdType;
        }

        if (requestParameters.ratePlanInfo !== undefined) {
            queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
        }

        if (requestParameters.returnOnlyAvailableRateCodes !== undefined) {
            queryParameters['returnOnlyAvailableRateCodes'] = requestParameters.returnOnlyAvailableRateCodes;
        }

        if (requestParameters.resGuaranteeInfo !== undefined) {
            queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
        }

        if (requestParameters.roomTypeInfo !== undefined) {
            queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
        }

        if (requestParameters.membershipIdNumber) {
            queryParameters['membershipIdNumber'] = requestParameters.membershipIdNumber;
        }

        if (requestParameters.membershipLevel) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.pointsAvailable) {
            queryParameters['pointsAvailable'] = requestParameters.pointsAvailable;
        }

        if (requestParameters.smokingPreference) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.hotelPackage) {
            queryParameters['hotelPackage'] = requestParameters.hotelPackage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/availability`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelAvailabilityFromJSON(jsonValue));
    }

    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    async getHotelAvailability(requestParameters: GetHotelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelAvailability> {
        const response = await this.getHotelAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    async getReservationGuaranteesRaw(requestParameters: GetReservationGuaranteesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationGuaranteesPolicies>> {
        const queryParameters: any = {};

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        if (requestParameters.travelAgentId !== undefined) {
            queryParameters['travelAgentId'] = requestParameters.travelAgentId;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['sourceId'] = requestParameters.sourceId;
        }

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.calculateEstimateAmount !== undefined) {
            queryParameters['calculateEstimateAmount'] = requestParameters.calculateEstimateAmount;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.numberOfAdults !== undefined) {
            queryParameters['numberOfAdults'] = requestParameters.numberOfAdults;
        }

        if (requestParameters.numberOfChildren !== undefined) {
            queryParameters['numberOfChildren'] = requestParameters.numberOfChildren;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationGuaranteesPoliciesFromJSON(jsonValue));
    }

    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    async getReservationGuarantees(requestParameters: GetReservationGuaranteesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationGuaranteesPolicies> {
        const response = await this.getReservationGuaranteesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    async getRestrictionsByDateRangeRaw(requestParameters: GetRestrictionsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestrictionsByDateRange>> {
        const queryParameters: any = {};

        if (requestParameters.chainName !== undefined) {
            queryParameters['chainName'] = requestParameters.chainName;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.fetchSizeByDay !== undefined) {
            queryParameters['fetchSizeByDay'] = requestParameters.fetchSizeByDay;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.restrictionInfo !== undefined) {
            queryParameters['restrictionInfo'] = requestParameters.restrictionInfo;
        }

        if (requestParameters.restrictionSearchCriteriaStartDate !== undefined) {
            queryParameters['restrictionSearchCriteriaStartDate'] = (requestParameters.restrictionSearchCriteriaStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.ratePlanCategory !== undefined) {
            queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.filterCodeCategory !== undefined) {
            queryParameters['filterCodeCategory'] = requestParameters.filterCodeCategory;
        }

        if (requestParameters.filterCode) {
            queryParameters['filterCode'] = requestParameters.filterCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestrictionsByDateRangeFromJSON(jsonValue));
    }

    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    async getRestrictionsByDateRange(requestParameters: GetRestrictionsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestrictionsByDateRange> {
        const response = await this.getRestrictionsByDateRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetHotelAvailabilityReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetHotelAvailabilityReservationProfileTypeEnum = typeof GetHotelAvailabilityReservationProfileTypeEnum[keyof typeof GetHotelAvailabilityReservationProfileTypeEnum];
/**
 * @export
 */
export const GetRestrictionsByDateRangeRestrictionInfoEnum = {
    Detail: 'Detail',
    Overview: 'Overview',
    Year: 'Year'
} as const;
export type GetRestrictionsByDateRangeRestrictionInfoEnum = typeof GetRestrictionsByDateRangeRestrictionInfoEnum[keyof typeof GetRestrictionsByDateRangeRestrictionInfoEnum];
/**
 * @export
 */
export const GetRestrictionsByDateRangeFilterCodeCategoryEnum = {
    BookingChannelCode: 'BookingChannelCode',
    RoomClass: 'RoomClass',
    RoomType: 'RoomType',
    RatePlanCategory: 'RatePlanCategory',
    RatePlanCode: 'RatePlanCode'
} as const;
export type GetRestrictionsByDateRangeFilterCodeCategoryEnum = typeof GetRestrictionsByDateRangeFilterCodeCategoryEnum[keyof typeof GetRestrictionsByDateRangeFilterCodeCategoryEnum];
