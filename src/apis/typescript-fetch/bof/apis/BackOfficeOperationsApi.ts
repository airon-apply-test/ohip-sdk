/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Back Office Operations API
 * APIs to cater for Back Office Operations functionality in OPERA Cloud. <br /><br /> A common BackOffice industry term is End of Day.Â  This closes and balances each day\'s business activities. It reconciles guest folios and processes credit card transactions. The End of Day routine rolls the business date forward and prints final reports.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BusinessDate,
  ExceptionDetailType,
  OperaVersion,
  Status,
} from '../models';
import {
    BusinessDateFromJSON,
    BusinessDateToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface ClearBackOfficeOperationsServiceCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBusinessDateRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingBackOfficeOperationsServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class BackOfficeOperationsApi extends runtime.BaseAPI {

    /**
     * Use this API to Clear cache of back office operations cache. <p><strong>OperationId:</strong>clearBackOfficeOperationsServiceCache</p>
     * Clear cache of back office operations cache
     */
    async clearBackOfficeOperationsServiceCacheRaw(requestParameters: ClearBackOfficeOperationsServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/backOfficeOperations/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to Clear cache of back office operations cache. <p><strong>OperationId:</strong>clearBackOfficeOperationsServiceCache</p>
     * Clear cache of back office operations cache
     */
    async clearBackOfficeOperationsServiceCache(requestParameters: ClearBackOfficeOperationsServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.clearBackOfficeOperationsServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to find out the current business date of a specified hotel. <p><strong>OperationId:</strong>getBusinessDate</p>
     * Fetch end of day business dates
     */
    async getBusinessDateRaw(requestParameters: GetBusinessDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessDate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/businessDate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessDateFromJSON(jsonValue));
    }

    /**
     * Use this API to find out the current business date of a specified hotel. <p><strong>OperationId:</strong>getBusinessDate</p>
     * Fetch end of day business dates
     */
    async getBusinessDate(requestParameters: GetBusinessDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessDate> {
        const response = await this.getBusinessDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Ping back office operations service. <p><strong>OperationId:</strong>pingBackOfficeOperationsService</p>
     * Ping back office operations service
     */
    async pingBackOfficeOperationsServiceRaw(requestParameters: PingBackOfficeOperationsServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/backOfficeOperations/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     * Use this API to Ping back office operations service. <p><strong>OperationId:</strong>pingBackOfficeOperationsService</p>
     * Ping back office operations service
     */
    async pingBackOfficeOperationsService(requestParameters: PingBackOfficeOperationsServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingBackOfficeOperationsServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
