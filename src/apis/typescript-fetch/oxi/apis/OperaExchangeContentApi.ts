/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  FetchIntegrationMessageAttachments,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchIntegrationMessageAttachmentsFromJSON,
    FetchIntegrationMessageAttachmentsToJSON,
} from '../models';

export interface GetIntegrationMessageAttachmentsRequest {
    messageId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    integrationMessageType?: GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum;
    integrationSystem?: GetIntegrationMessageAttachmentsIntegrationSystemEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class OperaExchangeContentApi extends runtime.BaseAPI {

    /**
     * API to Fetch OXI Inbound/Outbound XML Message Content by Message Id. <p><strong>OperationId:</strong>getIntegrationMessageAttachments</p>
     * Fetch integration message attachments
     */
    async getIntegrationMessageAttachmentsRaw(requestParameters: GetIntegrationMessageAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchIntegrationMessageAttachments>> {
        const queryParameters: any = {};

        if (requestParameters.integrationMessageType !== undefined) {
            queryParameters['integrationMessageType'] = requestParameters.integrationMessageType;
        }

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/messages/{messageId}/integrationMessageAttachments`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchIntegrationMessageAttachmentsFromJSON(jsonValue));
    }

    /**
     * API to Fetch OXI Inbound/Outbound XML Message Content by Message Id. <p><strong>OperationId:</strong>getIntegrationMessageAttachments</p>
     * Fetch integration message attachments
     */
    async getIntegrationMessageAttachments(requestParameters: GetIntegrationMessageAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchIntegrationMessageAttachments> {
        const response = await this.getIntegrationMessageAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound'
} as const;
export type GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum = typeof GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum[keyof typeof GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum];
/**
 * @export
 */
export const GetIntegrationMessageAttachmentsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetIntegrationMessageAttachmentsIntegrationSystemEnum = typeof GetIntegrationMessageAttachmentsIntegrationSystemEnum[keyof typeof GetIntegrationMessageAttachmentsIntegrationSystemEnum];
