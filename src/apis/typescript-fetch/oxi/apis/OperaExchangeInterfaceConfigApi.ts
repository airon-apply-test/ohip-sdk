/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangedAutomaticTransmissionSchedules,
  ChangedCommunicationMethods,
  ChangedConversionCodeMappings,
  ChangedConversionCodesStatus,
  ChangedExternalInterfaceSetups,
  ChangedInterfaceControls,
  ChangedProfileMatchRules,
  CreatedConversionCodeMappings,
  ExceptionDetailType,
  FetchAccumulatedBusinessEvents,
  FetchAutomaticTransmissionSchedules,
  FetchCommunicationMethods,
  FetchConversionCodeMappings,
  FetchConversionCodes,
  FetchExternalInterfaceSetups,
  FetchIntegrationInboundMessages,
  FetchIntegrationOutboundMessages,
  FetchInterfaceControls,
  FetchOXIListOfValues,
  FetchProfileMatchRules,
  LegacyInterfaceStatusDetails,
  PostAutomaticTransmissionSchedulesRequest,
  PostConversionCodeMappingsRequest,
  PostExternalInterfaceSetupsRequest,
  PostProfileMatchRulesRequest,
  PutAutomaticTransmissionSchedulesRequest,
  PutCommunicationMethodsRequest,
  PutConversionCodeMappingsRequest,
  PutConversionCodesStatusRequest,
  PutExternalInterfaceSetupsRequest,
  PutInterfaceControlsRequest,
  PutProfileMatchRulesRequest,
  Status,
} from '../models';
import {
    ChangedAutomaticTransmissionSchedulesFromJSON,
    ChangedAutomaticTransmissionSchedulesToJSON,
    ChangedCommunicationMethodsFromJSON,
    ChangedCommunicationMethodsToJSON,
    ChangedConversionCodeMappingsFromJSON,
    ChangedConversionCodeMappingsToJSON,
    ChangedConversionCodesStatusFromJSON,
    ChangedConversionCodesStatusToJSON,
    ChangedExternalInterfaceSetupsFromJSON,
    ChangedExternalInterfaceSetupsToJSON,
    ChangedInterfaceControlsFromJSON,
    ChangedInterfaceControlsToJSON,
    ChangedProfileMatchRulesFromJSON,
    ChangedProfileMatchRulesToJSON,
    CreatedConversionCodeMappingsFromJSON,
    CreatedConversionCodeMappingsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchAccumulatedBusinessEventsFromJSON,
    FetchAccumulatedBusinessEventsToJSON,
    FetchAutomaticTransmissionSchedulesFromJSON,
    FetchAutomaticTransmissionSchedulesToJSON,
    FetchCommunicationMethodsFromJSON,
    FetchCommunicationMethodsToJSON,
    FetchConversionCodeMappingsFromJSON,
    FetchConversionCodeMappingsToJSON,
    FetchConversionCodesFromJSON,
    FetchConversionCodesToJSON,
    FetchExternalInterfaceSetupsFromJSON,
    FetchExternalInterfaceSetupsToJSON,
    FetchIntegrationInboundMessagesFromJSON,
    FetchIntegrationInboundMessagesToJSON,
    FetchIntegrationOutboundMessagesFromJSON,
    FetchIntegrationOutboundMessagesToJSON,
    FetchInterfaceControlsFromJSON,
    FetchInterfaceControlsToJSON,
    FetchOXIListOfValuesFromJSON,
    FetchOXIListOfValuesToJSON,
    FetchProfileMatchRulesFromJSON,
    FetchProfileMatchRulesToJSON,
    LegacyInterfaceStatusDetailsFromJSON,
    LegacyInterfaceStatusDetailsToJSON,
    PostAutomaticTransmissionSchedulesRequestFromJSON,
    PostAutomaticTransmissionSchedulesRequestToJSON,
    PostConversionCodeMappingsRequestFromJSON,
    PostConversionCodeMappingsRequestToJSON,
    PostExternalInterfaceSetupsRequestFromJSON,
    PostExternalInterfaceSetupsRequestToJSON,
    PostProfileMatchRulesRequestFromJSON,
    PostProfileMatchRulesRequestToJSON,
    PutAutomaticTransmissionSchedulesRequestFromJSON,
    PutAutomaticTransmissionSchedulesRequestToJSON,
    PutCommunicationMethodsRequestFromJSON,
    PutCommunicationMethodsRequestToJSON,
    PutConversionCodeMappingsRequestFromJSON,
    PutConversionCodeMappingsRequestToJSON,
    PutConversionCodesStatusRequestFromJSON,
    PutConversionCodesStatusRequestToJSON,
    PutExternalInterfaceSetupsRequestFromJSON,
    PutExternalInterfaceSetupsRequestToJSON,
    PutInterfaceControlsRequestFromJSON,
    PutInterfaceControlsRequestToJSON,
    PutProfileMatchRulesRequestFromJSON,
    PutProfileMatchRulesRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface DeleteAutomaticTransmissionSchedulesRequest {
    messageId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteConversionCodeMappingsRequest {
    id?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteExternalInterfaceSetupsRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileMatchRulesRequest {
    profileType?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUDFMappingsRequest {
    operaValue?: string;
    conversionCode?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccumulatedBusinessEventsRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    modules?: Set<GetAccumulatedBusinessEventsModulesEnum>;
    endDate?: Date;
    startDate?: Date;
    primaryKey?: string;
    status?: GetAccumulatedBusinessEventsStatusEnum;
    hotelIds?: Array<string>;
    integrationSystem?: GetAccumulatedBusinessEventsIntegrationSystemEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutomaticTransmissionSchedulesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    interfaceList?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommunicationMethodsRequest {
    interfaceId?: string;
    isGlobal?: boolean;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    interfaceIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConversionCodeMappingsRequest {
    conversionCode?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    integrationSystem?: GetConversionCodeMappingsIntegrationSystemEnum;
    udfCode?: boolean;
    mappingValue?: string;
    searchBy?: GetConversionCodeMappingsSearchByEnum;
    includeGlobal?: boolean;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConversionCodesRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    integrationSystem?: GetConversionCodesIntegrationSystemEnum;
    conversionCode?: string;
    udfCode?: boolean;
    includeInactive?: boolean;
    group?: string;
    includeUDFCodes?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalInterfaceSetupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceIds?: Array<string>;
    hotelIds?: Array<string>;
    includeXmlVersion?: boolean;
    systemType?: GetExternalInterfaceSetupsSystemTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetIntegrationInboundMessagesRequest {
    integrationSystem?: string;
    interfaceId?: string;
    externalHotelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    externalHotelCodes?: Array<string>;
    messageTypes?: Array<string>;
    endDate?: Date;
    startDate?: Date;
    includeReviewed?: boolean;
    fromMessageID?: string;
    toMessageID?: string;
    messageStatus?: Array<string>;
    messageReference?: string;
    errorMessageWildCard?: string;
    errorMessageType?: GetIntegrationInboundMessagesErrorMessageTypeEnum;
    msgContains?: string;
    anyOneOfTheMsg?: boolean;
    valuesOnly?: boolean;
    limit?: number;
    offset?: number;
    includeErrors?: boolean;
    actionId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetIntegrationOutboundMessagesRequest {
    integrationSystem?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    actionType?: string;
    errorMessageWildCard?: string;
    errorMessageType?: GetIntegrationOutboundMessagesErrorMessageTypeEnum;
    endDate?: Date;
    startDate?: Date;
    includeReviewed?: boolean;
    fromMessageID?: string;
    toMessageID?: string;
    messageStatus?: Array<string>;
    msgContains?: string;
    anyOneOfTheMsg?: boolean;
    valuesOnly?: boolean;
    messageReference?: string;
    messageTypes?: Array<string>;
    limit?: number;
    offset?: number;
    includeErrors?: boolean;
    actionId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceControlsRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    integrationSystem?: GetInterfaceControlsIntegrationSystemEnum;
    croCode?: string;
    parameterNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLegacyInterfaceStatusRequest {
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIListOfValuesRequest {
    lovCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    integrationSystem?: GetOXIListOfValuesIntegrationSystemEnum;
    includeInActive?: GetOXIListOfValuesIncludeInActiveEnum;
    parameterNames?: Array<string>;
    parameterValues?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileMatchRulesRequest {
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    includeXmlVersions?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAutomaticTransmissionSchedulesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    automaticTransmissionSchedulesToBeCreated?: PostAutomaticTransmissionSchedulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostConversionCodeMappingsOperationRequest {
    externalValue?: string;
    operaValue?: string;
    conversionCode?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    conversionCodeMappingsToBeCreated?: PostConversionCodeMappingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostExternalInterfaceSetupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    externalInterfaceSetupsToBeCreated?: PostExternalInterfaceSetupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileMatchRulesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileMatchRulesToBeCreated?: PostProfileMatchRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAutomaticTransmissionSchedulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    automaticTransmissionSchedulesToBeChanged?: PutAutomaticTransmissionSchedulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCommunicationMethodsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    communicationMethodsToBeChanged?: PutCommunicationMethodsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutConversionCodeMappingsOperationRequest {
    externalValue?: string;
    operaValue?: string;
    id?: string;
    conversionCode?: string;
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    conversionCodeMappingsToBeChanged?: PutConversionCodeMappingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutConversionCodesStatusOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    conversionCodesStatusToBeChanged?: PutConversionCodesStatusRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutExternalInterfaceSetupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    externalInterfaceSetupsToBeChanged?: PutExternalInterfaceSetupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceControlsOperationRequest {
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceControlsToBeChanged?: PutInterfaceControlsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileMatchRulesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileMatchRulesToBeChanged?: PutProfileMatchRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class OperaExchangeInterfaceConfigApi extends runtime.BaseAPI {

    /**
     * API to Delete  Automatic Transmission Schedules by Scheduled Message Id. <p><strong>OperationId:</strong>deleteAutomaticTransmissionSchedules</p>
     * Remove Automatic Transmission Schedules
     */
    async deleteAutomaticTransmissionSchedulesRaw(requestParameters: DeleteAutomaticTransmissionSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/messages/{messageId}/automaticTransmissionSchedules`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Delete  Automatic Transmission Schedules by Scheduled Message Id. <p><strong>OperationId:</strong>deleteAutomaticTransmissionSchedules</p>
     * Remove Automatic Transmission Schedules
     */
    async deleteAutomaticTransmissionSchedules(requestParameters: DeleteAutomaticTransmissionSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Delete  Interface Mapping Conversion Codes by Conversion Code Mapping Id. <p><strong>OperationId:</strong>deleteConversionCodeMappings</p>
     * Remove Conversion Codes Mappings
     */
    async deleteConversionCodeMappingsRaw(requestParameters: DeleteConversionCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/conversionCodeMappingID/{id}/conversionCodeMapping`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Delete  Interface Mapping Conversion Codes by Conversion Code Mapping Id. <p><strong>OperationId:</strong>deleteConversionCodeMappings</p>
     * Remove Conversion Codes Mappings
     */
    async deleteConversionCodeMappings(requestParameters: DeleteConversionCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Delete Interface Setup configuration by Hotel Id and Interface Id. <p><strong>OperationId:</strong>deleteExternalInterfaceSetups</p>
     * Delete external Interface Setup details
     */
    async deleteExternalInterfaceSetupsRaw(requestParameters: DeleteExternalInterfaceSetupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/externalInterfaceSetups`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Delete Interface Setup configuration by Hotel Id and Interface Id. <p><strong>OperationId:</strong>deleteExternalInterfaceSetups</p>
     * Delete external Interface Setup details
     */
    async deleteExternalInterfaceSetups(requestParameters: DeleteExternalInterfaceSetupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Delete  Profile Match Rules by Hotel Id, Interface Id and Profile Type. <p><strong>OperationId:</strong>deleteProfileMatchRules</p>
     * Delete profile match rules
     */
    async deleteProfileMatchRulesRaw(requestParameters: DeleteProfileMatchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/profiles/{profileType}/profileMatchRules`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Delete  Profile Match Rules by Hotel Id, Interface Id and Profile Type. <p><strong>OperationId:</strong>deleteProfileMatchRules</p>
     * Delete profile match rules
     */
    async deleteProfileMatchRules(requestParameters: DeleteProfileMatchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Delete Interface Mapping UDF Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>deleteUDFMappings</p>
     * Remove UDF Mappings
     */
    async deleteUDFMappingsRaw(requestParameters: DeleteUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/operaValue/{operaValue}/udfMapping`.replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Delete Interface Mapping UDF Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>deleteUDFMappings</p>
     * Remove UDF Mappings
     */
    async deleteUDFMappings(requestParameters: DeleteUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUDFMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch  Accumulated Business Event Messages for External Systems by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getAccumulatedBusinessEvents</p>
     * Fetch accumulated business events
     */
    async getAccumulatedBusinessEventsRaw(requestParameters: GetAccumulatedBusinessEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAccumulatedBusinessEvents>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.modules) {
            queryParameters['modules'] = requestParameters.modules;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.primaryKey !== undefined) {
            queryParameters['primaryKey'] = requestParameters.primaryKey;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/accumulatedBusinessEvents`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAccumulatedBusinessEventsFromJSON(jsonValue));
    }

    /**
     * API to Fetch  Accumulated Business Event Messages for External Systems by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getAccumulatedBusinessEvents</p>
     * Fetch accumulated business events
     */
    async getAccumulatedBusinessEvents(requestParameters: GetAccumulatedBusinessEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAccumulatedBusinessEvents> {
        const response = await this.getAccumulatedBusinessEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>getAutomaticTransmissionSchedules</p>
     * Fetch Automatic Transmission Schedules
     */
    async getAutomaticTransmissionSchedulesRaw(requestParameters: GetAutomaticTransmissionSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAutomaticTransmissionSchedules>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceList) {
            queryParameters['interfaceList'] = requestParameters.interfaceList;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/automaticTransmissionSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAutomaticTransmissionSchedulesFromJSON(jsonValue));
    }

    /**
     * API to Fetch Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>getAutomaticTransmissionSchedules</p>
     * Fetch Automatic Transmission Schedules
     */
    async getAutomaticTransmissionSchedules(requestParameters: GetAutomaticTransmissionSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAutomaticTransmissionSchedules> {
        const response = await this.getAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Communication Methods. <p><strong>OperationId:</strong>getCommunicationMethods</p>
     * Fetch Communication Methods
     */
    async getCommunicationMethodsRaw(requestParameters: GetCommunicationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchCommunicationMethods>> {
        const queryParameters: any = {};

        if (requestParameters.isGlobal !== undefined) {
            queryParameters['isGlobal'] = requestParameters.isGlobal;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.interfaceIds) {
            queryParameters['interfaceIds'] = requestParameters.interfaceIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/intefaces/{interfaceId}/communicationMethods`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchCommunicationMethodsFromJSON(jsonValue));
    }

    /**
     * API to Fetch Communication Methods. <p><strong>OperationId:</strong>getCommunicationMethods</p>
     * Fetch Communication Methods
     */
    async getCommunicationMethods(requestParameters: GetCommunicationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchCommunicationMethods> {
        const response = await this.getCommunicationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>getConversionCodeMappings</p>
     * Fetch Conversion Code Mappings
     */
    async getConversionCodeMappingsRaw(requestParameters: GetConversionCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchConversionCodeMappings>> {
        const queryParameters: any = {};

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        if (requestParameters.udfCode !== undefined) {
            queryParameters['udfCode'] = requestParameters.udfCode;
        }

        if (requestParameters.mappingValue !== undefined) {
            queryParameters['mappingValue'] = requestParameters.mappingValue;
        }

        if (requestParameters.searchBy !== undefined) {
            queryParameters['searchBy'] = requestParameters.searchBy;
        }

        if (requestParameters.includeGlobal !== undefined) {
            queryParameters['includeGlobal'] = requestParameters.includeGlobal;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversions/{conversionCode}/conversionCodeMapping`.replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchConversionCodeMappingsFromJSON(jsonValue));
    }

    /**
     * API to Fetch Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>getConversionCodeMappings</p>
     * Fetch Conversion Code Mappings
     */
    async getConversionCodeMappings(requestParameters: GetConversionCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchConversionCodeMappings> {
        const response = await this.getConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Interface Mappings UDF Conversion Codes by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getConversionCodes</p>
     * Fetch Conversion Codes
     */
    async getConversionCodesRaw(requestParameters: GetConversionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchConversionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        if (requestParameters.conversionCode !== undefined) {
            queryParameters['conversionCode'] = requestParameters.conversionCode;
        }

        if (requestParameters.udfCode !== undefined) {
            queryParameters['udfCode'] = requestParameters.udfCode;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.includeUDFCodes !== undefined) {
            queryParameters['includeUDFCodes'] = requestParameters.includeUDFCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/intefaces/{interfaceId}/conversionCodes`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchConversionCodesFromJSON(jsonValue));
    }

    /**
     * API to Fetch Interface Mappings UDF Conversion Codes by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getConversionCodes</p>
     * Fetch Conversion Codes
     */
    async getConversionCodes(requestParameters: GetConversionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchConversionCodes> {
        const response = await this.getConversionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Interface Setup configurations by Interface Ids and Hotel Ids. <p><strong>OperationId:</strong>getExternalInterfaceSetups</p>
     * fetch external Interface Setup details
     */
    async getExternalInterfaceSetupsRaw(requestParameters: GetExternalInterfaceSetupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchExternalInterfaceSetups>> {
        const queryParameters: any = {};

        if (requestParameters.interfaceIds) {
            queryParameters['interfaceIds'] = requestParameters.interfaceIds;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeXmlVersion !== undefined) {
            queryParameters['includeXmlVersion'] = requestParameters.includeXmlVersion;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceSetups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchExternalInterfaceSetupsFromJSON(jsonValue));
    }

    /**
     * API to Fetch Interface Setup configurations by Interface Ids and Hotel Ids. <p><strong>OperationId:</strong>getExternalInterfaceSetups</p>
     * fetch external Interface Setup details
     */
    async getExternalInterfaceSetups(requestParameters: GetExternalInterfaceSetupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchExternalInterfaceSetups> {
        const response = await this.getExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Inbound Messages From External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationInboundMessages</p>
     * Fetch integration inbound messages 
     */
    async getIntegrationInboundMessagesRaw(requestParameters: GetIntegrationInboundMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchIntegrationInboundMessages>> {
        const queryParameters: any = {};

        if (requestParameters.externalHotelCodes) {
            queryParameters['externalHotelCodes'] = requestParameters.externalHotelCodes;
        }

        if (requestParameters.messageTypes) {
            queryParameters['messageTypes'] = requestParameters.messageTypes;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeReviewed !== undefined) {
            queryParameters['includeReviewed'] = requestParameters.includeReviewed;
        }

        if (requestParameters.fromMessageID !== undefined) {
            queryParameters['fromMessageID'] = requestParameters.fromMessageID;
        }

        if (requestParameters.toMessageID !== undefined) {
            queryParameters['toMessageID'] = requestParameters.toMessageID;
        }

        if (requestParameters.messageStatus) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }

        if (requestParameters.messageReference !== undefined) {
            queryParameters['messageReference'] = requestParameters.messageReference;
        }

        if (requestParameters.errorMessageWildCard !== undefined) {
            queryParameters['errorMessageWildCard'] = requestParameters.errorMessageWildCard;
        }

        if (requestParameters.errorMessageType !== undefined) {
            queryParameters['errorMessageType'] = requestParameters.errorMessageType;
        }

        if (requestParameters.msgContains !== undefined) {
            queryParameters['msgContains'] = requestParameters.msgContains;
        }

        if (requestParameters.anyOneOfTheMsg !== undefined) {
            queryParameters['anyOneOfTheMsg'] = requestParameters.anyOneOfTheMsg;
        }

        if (requestParameters.valuesOnly !== undefined) {
            queryParameters['valuesOnly'] = requestParameters.valuesOnly;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.includeErrors !== undefined) {
            queryParameters['includeErrors'] = requestParameters.includeErrors;
        }

        if (requestParameters.actionId !== undefined) {
            queryParameters['actionId'] = requestParameters.actionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{externalHotelCode}/interfaces/{interfaceId}/integrationSystems/{integrationSystem}/integrationInboundMessages`.replace(`{${"integrationSystem"}}`, encodeURIComponent(String(requestParameters.integrationSystem))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"externalHotelCode"}}`, encodeURIComponent(String(requestParameters.externalHotelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchIntegrationInboundMessagesFromJSON(jsonValue));
    }

    /**
     * API to Fetch Inbound Messages From External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationInboundMessages</p>
     * Fetch integration inbound messages 
     */
    async getIntegrationInboundMessages(requestParameters: GetIntegrationInboundMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchIntegrationInboundMessages> {
        const response = await this.getIntegrationInboundMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Outbound Messages To External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationOutboundMessages</p>
     * fetch integration outbound messages
     */
    async getIntegrationOutboundMessagesRaw(requestParameters: GetIntegrationOutboundMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchIntegrationOutboundMessages>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }

        if (requestParameters.errorMessageWildCard !== undefined) {
            queryParameters['errorMessageWildCard'] = requestParameters.errorMessageWildCard;
        }

        if (requestParameters.errorMessageType !== undefined) {
            queryParameters['errorMessageType'] = requestParameters.errorMessageType;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeReviewed !== undefined) {
            queryParameters['includeReviewed'] = requestParameters.includeReviewed;
        }

        if (requestParameters.fromMessageID !== undefined) {
            queryParameters['fromMessageID'] = requestParameters.fromMessageID;
        }

        if (requestParameters.toMessageID !== undefined) {
            queryParameters['toMessageID'] = requestParameters.toMessageID;
        }

        if (requestParameters.messageStatus) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }

        if (requestParameters.msgContains !== undefined) {
            queryParameters['msgContains'] = requestParameters.msgContains;
        }

        if (requestParameters.anyOneOfTheMsg !== undefined) {
            queryParameters['anyOneOfTheMsg'] = requestParameters.anyOneOfTheMsg;
        }

        if (requestParameters.valuesOnly !== undefined) {
            queryParameters['valuesOnly'] = requestParameters.valuesOnly;
        }

        if (requestParameters.messageReference !== undefined) {
            queryParameters['messageReference'] = requestParameters.messageReference;
        }

        if (requestParameters.messageTypes) {
            queryParameters['messageTypes'] = requestParameters.messageTypes;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.includeErrors !== undefined) {
            queryParameters['includeErrors'] = requestParameters.includeErrors;
        }

        if (requestParameters.actionId !== undefined) {
            queryParameters['actionId'] = requestParameters.actionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/integrationSystems/{integrationSystem}/integrationOutboundMessages`.replace(`{${"integrationSystem"}}`, encodeURIComponent(String(requestParameters.integrationSystem))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchIntegrationOutboundMessagesFromJSON(jsonValue));
    }

    /**
     * API to Fetch Outbound Messages To External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationOutboundMessages</p>
     * fetch integration outbound messages
     */
    async getIntegrationOutboundMessages(requestParameters: GetIntegrationOutboundMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchIntegrationOutboundMessages> {
        const response = await this.getIntegrationOutboundMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch  Interface Controls  by Hotel Id and Interface Id <p><strong>OperationId:</strong>getInterfaceControls</p>
     * Retrieve OXI Parameters and Defaults
     */
    async getInterfaceControlsRaw(requestParameters: GetInterfaceControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchInterfaceControls>> {
        const queryParameters: any = {};

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.parameterNameWildCard !== undefined) {
            queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/interfaceControls`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchInterfaceControlsFromJSON(jsonValue));
    }

    /**
     * API to Fetch  Interface Controls  by Hotel Id and Interface Id <p><strong>OperationId:</strong>getInterfaceControls</p>
     * Retrieve OXI Parameters and Defaults
     */
    async getInterfaceControls(requestParameters: GetInterfaceControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchInterfaceControls> {
        const response = await this.getInterfaceControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch legacy OXI Interface Processor Status by Interface Id. <p><strong>OperationId:</strong>getLegacyInterfaceStatus</p>
     * Fetch legacy interface status
     */
    async getLegacyInterfaceStatusRaw(requestParameters: GetLegacyInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyInterfaceStatusDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/legacyInterfaceStatus`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyInterfaceStatusDetailsFromJSON(jsonValue));
    }

    /**
     * API to Fetch legacy OXI Interface Processor Status by Interface Id. <p><strong>OperationId:</strong>getLegacyInterfaceStatus</p>
     * Fetch legacy interface status
     */
    async getLegacyInterfaceStatus(requestParameters: GetLegacyInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyInterfaceStatusDetails> {
        const response = await this.getLegacyInterfaceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch list of values for all OXI interface type External Systems. <p><strong>OperationId:</strong>getOXIListOfValues</p>
     * Fetch list of values details for OXI
     */
    async getOXIListOfValuesRaw(requestParameters: GetOXIListOfValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchOXIListOfValues>> {
        const queryParameters: any = {};

        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }

        if (requestParameters.includeInActive !== undefined) {
            queryParameters['includeInActive'] = requestParameters.includeInActive;
        }

        if (requestParameters.parameterNames) {
            queryParameters['parameterNames'] = requestParameters.parameterNames;
        }

        if (requestParameters.parameterValues) {
            queryParameters['parameterValues'] = requestParameters.parameterValues;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/lovCode/{lovCode}/listOfValuesOXI`.replace(`{${"lovCode"}}`, encodeURIComponent(String(requestParameters.lovCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchOXIListOfValuesFromJSON(jsonValue));
    }

    /**
     * API to Fetch list of values for all OXI interface type External Systems. <p><strong>OperationId:</strong>getOXIListOfValues</p>
     * Fetch list of values details for OXI
     */
    async getOXIListOfValues(requestParameters: GetOXIListOfValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchOXIListOfValues> {
        const response = await this.getOXIListOfValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch Profile Match Rules by Interface Id and Hotel Id. <p><strong>OperationId:</strong>getProfileMatchRules</p>
     * Fetch profile match rules
     */
    async getProfileMatchRulesRaw(requestParameters: GetProfileMatchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchProfileMatchRules>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.includeXmlVersions !== undefined) {
            queryParameters['includeXmlVersions'] = requestParameters.includeXmlVersions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/profileMatchRules`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchProfileMatchRulesFromJSON(jsonValue));
    }

    /**
     * API to Fetch Profile Match Rules by Interface Id and Hotel Id. <p><strong>OperationId:</strong>getProfileMatchRules</p>
     * Fetch profile match rules
     */
    async getProfileMatchRules(requestParameters: GetProfileMatchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchProfileMatchRules> {
        const response = await this.getProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Create Automatic Transmission Schedules. <p><strong>OperationId:</strong>postAutomaticTransmissionSchedules</p>
     * Create Automatic Transmission Schedules
     */
    async postAutomaticTransmissionSchedulesRaw(requestParameters: PostAutomaticTransmissionSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/automaticTransmissionSchedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAutomaticTransmissionSchedulesRequestToJSON(requestParameters.automaticTransmissionSchedulesToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Create Automatic Transmission Schedules. <p><strong>OperationId:</strong>postAutomaticTransmissionSchedules</p>
     * Create Automatic Transmission Schedules
     */
    async postAutomaticTransmissionSchedules(requestParameters: PostAutomaticTransmissionSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Create  Interface Mapping Conversion Codes by Hotel Id, Interface Id and Conversion Code with OPERA value and External value. <p><strong>OperationId:</strong>postConversionCodeMappings</p>
     * Create Conversion Codes Mappings
     */
    async postConversionCodeMappingsRaw(requestParameters: PostConversionCodeMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedConversionCodeMappings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/operaValue/{operaValue}/externalValue/{externalValue}/conversionCodeMapping`.replace(`{${"externalValue"}}`, encodeURIComponent(String(requestParameters.externalValue))).replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostConversionCodeMappingsRequestToJSON(requestParameters.conversionCodeMappingsToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedConversionCodeMappingsFromJSON(jsonValue));
    }

    /**
     * API to Create  Interface Mapping Conversion Codes by Hotel Id, Interface Id and Conversion Code with OPERA value and External value. <p><strong>OperationId:</strong>postConversionCodeMappings</p>
     * Create Conversion Codes Mappings
     */
    async postConversionCodeMappings(requestParameters: PostConversionCodeMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedConversionCodeMappings> {
        const response = await this.postConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Create Interface Setup configuration. <p><strong>OperationId:</strong>postExternalInterfaceSetups</p>
     * Create Interface Setup details
     */
    async postExternalInterfaceSetupsRaw(requestParameters: PostExternalInterfaceSetupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalInterfaceSetups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostExternalInterfaceSetupsRequestToJSON(requestParameters.externalInterfaceSetupsToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Create Interface Setup configuration. <p><strong>OperationId:</strong>postExternalInterfaceSetups</p>
     * Create Interface Setup details
     */
    async postExternalInterfaceSetups(requestParameters: PostExternalInterfaceSetupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Create Profile Match Rules. <p><strong>OperationId:</strong>postProfileMatchRules</p>
     * Create profile match rules
     */
    async postProfileMatchRulesRaw(requestParameters: PostProfileMatchRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileMatchRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostProfileMatchRulesRequestToJSON(requestParameters.profileMatchRulesToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to Create Profile Match Rules. <p><strong>OperationId:</strong>postProfileMatchRules</p>
     * Create profile match rules
     */
    async postProfileMatchRules(requestParameters: PostProfileMatchRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify  Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>putAutomaticTransmissionSchedules</p>
     * Change Automatic Transmission Schedules
     */
    async putAutomaticTransmissionSchedulesRaw(requestParameters: PutAutomaticTransmissionSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedAutomaticTransmissionSchedules>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/automaticTransmissionSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAutomaticTransmissionSchedulesRequestToJSON(requestParameters.automaticTransmissionSchedulesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedAutomaticTransmissionSchedulesFromJSON(jsonValue));
    }

    /**
     * API to Modify  Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>putAutomaticTransmissionSchedules</p>
     * Change Automatic Transmission Schedules
     */
    async putAutomaticTransmissionSchedules(requestParameters: PutAutomaticTransmissionSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedAutomaticTransmissionSchedules> {
        const response = await this.putAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify Communication Methods. <p><strong>OperationId:</strong>putCommunicationMethods</p>
     * Modify Communication Methods 
     */
    async putCommunicationMethodsRaw(requestParameters: PutCommunicationMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedCommunicationMethods>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCommunicationMethodsRequestToJSON(requestParameters.communicationMethodsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedCommunicationMethodsFromJSON(jsonValue));
    }

    /**
     * API to Modify Communication Methods. <p><strong>OperationId:</strong>putCommunicationMethods</p>
     * Modify Communication Methods 
     */
    async putCommunicationMethods(requestParameters: PutCommunicationMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedCommunicationMethods> {
        const response = await this.putCommunicationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify  Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code Id with OPERA value and External value. <p><strong>OperationId:</strong>putConversionCodeMappings</p>
     * Change Conversion Codes Mappings
     */
    async putConversionCodeMappingsRaw(requestParameters: PutConversionCodeMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedConversionCodeMappings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/ID/{id}/operaValue/{operaValue}/externalValue/{externalValue}/conversionCodeMapping`.replace(`{${"externalValue"}}`, encodeURIComponent(String(requestParameters.externalValue))).replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutConversionCodeMappingsRequestToJSON(requestParameters.conversionCodeMappingsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedConversionCodeMappingsFromJSON(jsonValue));
    }

    /**
     * API to Modify  Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code Id with OPERA value and External value. <p><strong>OperationId:</strong>putConversionCodeMappings</p>
     * Change Conversion Codes Mappings
     */
    async putConversionCodeMappings(requestParameters: PutConversionCodeMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedConversionCodeMappings> {
        const response = await this.putConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify Interface Mapping UDF Conversion Codes. <p><strong>OperationId:</strong>putConversionCodesStatus</p>
     * Change Conversion codes Status
     */
    async putConversionCodesStatusRaw(requestParameters: PutConversionCodesStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedConversionCodesStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/conversionCodesStatus`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutConversionCodesStatusRequestToJSON(requestParameters.conversionCodesStatusToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedConversionCodesStatusFromJSON(jsonValue));
    }

    /**
     * API to Modify Interface Mapping UDF Conversion Codes. <p><strong>OperationId:</strong>putConversionCodesStatus</p>
     * Change Conversion codes Status
     */
    async putConversionCodesStatus(requestParameters: PutConversionCodesStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedConversionCodesStatus> {
        const response = await this.putConversionCodesStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify  Interface Setup configuration. <p><strong>OperationId:</strong>putExternalInterfaceSetups</p>
     * Modify external Interface Setup details
     */
    async putExternalInterfaceSetupsRaw(requestParameters: PutExternalInterfaceSetupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedExternalInterfaceSetups>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceSetups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutExternalInterfaceSetupsRequestToJSON(requestParameters.externalInterfaceSetupsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedExternalInterfaceSetupsFromJSON(jsonValue));
    }

    /**
     * API to Modify  Interface Setup configuration. <p><strong>OperationId:</strong>putExternalInterfaceSetups</p>
     * Modify external Interface Setup details
     */
    async putExternalInterfaceSetups(requestParameters: PutExternalInterfaceSetupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedExternalInterfaceSetups> {
        const response = await this.putExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify Interface Controls by Interface Id. <p><strong>OperationId:</strong>putInterfaceControls</p>
     * Change OXI Parameters and Defaults
     */
    async putInterfaceControlsRaw(requestParameters: PutInterfaceControlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceControls>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/interfaceControls`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutInterfaceControlsRequestToJSON(requestParameters.interfaceControlsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceControlsFromJSON(jsonValue));
    }

    /**
     * API to Modify Interface Controls by Interface Id. <p><strong>OperationId:</strong>putInterfaceControls</p>
     * Change OXI Parameters and Defaults
     */
    async putInterfaceControls(requestParameters: PutInterfaceControlsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceControls> {
        const response = await this.putInterfaceControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Modify Profile Match Rules. <p><strong>OperationId:</strong>putProfileMatchRules</p>
     * Change profile match rules 
     */
    async putProfileMatchRulesRaw(requestParameters: PutProfileMatchRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedProfileMatchRules>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileMatchRules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutProfileMatchRulesRequestToJSON(requestParameters.profileMatchRulesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedProfileMatchRulesFromJSON(jsonValue));
    }

    /**
     * API to Modify Profile Match Rules. <p><strong>OperationId:</strong>putProfileMatchRules</p>
     * Change profile match rules 
     */
    async putProfileMatchRules(requestParameters: PutProfileMatchRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedProfileMatchRules> {
        const response = await this.putProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccumulatedBusinessEventsModulesEnum = {
    Availability: 'Availability',
    Block: 'Block',
    BlockDetail: 'BlockDetail',
    BlockHeader: 'BlockHeader',
    Rate: 'Rate',
    Reservation: 'Reservation',
    Restriction: 'Restriction'
} as const;
export type GetAccumulatedBusinessEventsModulesEnum = typeof GetAccumulatedBusinessEventsModulesEnum[keyof typeof GetAccumulatedBusinessEventsModulesEnum];
/**
 * @export
 */
export const GetAccumulatedBusinessEventsStatusEnum = {
    New: 'New',
    Ready: 'Ready'
} as const;
export type GetAccumulatedBusinessEventsStatusEnum = typeof GetAccumulatedBusinessEventsStatusEnum[keyof typeof GetAccumulatedBusinessEventsStatusEnum];
/**
 * @export
 */
export const GetAccumulatedBusinessEventsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetAccumulatedBusinessEventsIntegrationSystemEnum = typeof GetAccumulatedBusinessEventsIntegrationSystemEnum[keyof typeof GetAccumulatedBusinessEventsIntegrationSystemEnum];
/**
 * @export
 */
export const GetConversionCodeMappingsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetConversionCodeMappingsIntegrationSystemEnum = typeof GetConversionCodeMappingsIntegrationSystemEnum[keyof typeof GetConversionCodeMappingsIntegrationSystemEnum];
/**
 * @export
 */
export const GetConversionCodeMappingsSearchByEnum = {
    OperaValue: 'OperaValue',
    ExternalValue: 'ExternalValue',
    Both: 'Both'
} as const;
export type GetConversionCodeMappingsSearchByEnum = typeof GetConversionCodeMappingsSearchByEnum[keyof typeof GetConversionCodeMappingsSearchByEnum];
/**
 * @export
 */
export const GetConversionCodesIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetConversionCodesIntegrationSystemEnum = typeof GetConversionCodesIntegrationSystemEnum[keyof typeof GetConversionCodesIntegrationSystemEnum];
/**
 * @export
 */
export const GetExternalInterfaceSetupsSystemTypeEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetExternalInterfaceSetupsSystemTypeEnum = typeof GetExternalInterfaceSetupsSystemTypeEnum[keyof typeof GetExternalInterfaceSetupsSystemTypeEnum];
/**
 * @export
 */
export const GetIntegrationInboundMessagesErrorMessageTypeEnum = {
    Error: 'Error',
    ResultException: 'ResultException',
    OptionalWarning: 'OptionalWarning',
    Warning: 'Warning'
} as const;
export type GetIntegrationInboundMessagesErrorMessageTypeEnum = typeof GetIntegrationInboundMessagesErrorMessageTypeEnum[keyof typeof GetIntegrationInboundMessagesErrorMessageTypeEnum];
/**
 * @export
 */
export const GetIntegrationOutboundMessagesErrorMessageTypeEnum = {
    Error: 'Error',
    ResultException: 'ResultException',
    OptionalWarning: 'OptionalWarning',
    Warning: 'Warning'
} as const;
export type GetIntegrationOutboundMessagesErrorMessageTypeEnum = typeof GetIntegrationOutboundMessagesErrorMessageTypeEnum[keyof typeof GetIntegrationOutboundMessagesErrorMessageTypeEnum];
/**
 * @export
 */
export const GetInterfaceControlsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetInterfaceControlsIntegrationSystemEnum = typeof GetInterfaceControlsIntegrationSystemEnum[keyof typeof GetInterfaceControlsIntegrationSystemEnum];
/**
 * @export
 */
export const GetOXIListOfValuesIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
} as const;
export type GetOXIListOfValuesIntegrationSystemEnum = typeof GetOXIListOfValuesIntegrationSystemEnum[keyof typeof GetOXIListOfValuesIntegrationSystemEnum];
/**
 * @export
 */
export const GetOXIListOfValuesIncludeInActiveEnum = {
    True: true,
    False: false
} as const;
export type GetOXIListOfValuesIncludeInActiveEnum = typeof GetOXIListOfValuesIncludeInActiveEnum[keyof typeof GetOXIListOfValuesIncludeInActiveEnum];
