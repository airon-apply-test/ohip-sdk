/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  MessageStatistics,
  OXIMessageStatistics,
  Status,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    MessageStatisticsFromJSON,
    MessageStatisticsToJSON,
    OXIMessageStatisticsFromJSON,
    OXIMessageStatisticsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface DequeueOXIMessagesRequest {
    queueName?: DequeueOXIMessagesQueueNameEnum;
    hotelId?: string;
    interfaceId?: string;
    messageStatus?: DequeueOXIMessagesMessageStatusEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endDate?: Date;
    startDate?: Date;
    module?: string;
    actionType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMessageStatisticsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Set<GetMessageStatisticsCodeEnum>;
    endDate?: Array<Date>;
    startDate?: Array<Date>;
    statCode?: Set<GetMessageStatisticsStatCodeEnum>;
    interfaceId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOXIMessageStatisticsRequest {
    queueName?: GetOXIMessageStatisticsQueueNameEnum;
    hotelId?: string;
    messageStatus?: GetOXIMessageStatisticsMessageStatusEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceId?: string;
    enqueueEndDate?: Date;
    enqueueStartDate?: Date;
    groupByModuleAndActionType?: boolean;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class OperaExchangeInterfaceStatsApi extends runtime.BaseAPI {

    /**
     * API to purge messages from inbound and outbound queues. <p><strong>OperationId:</strong>dequeueOXIMessages</p>
     * Purge the messages from OXI inbound and outbound queues.
     */
    async dequeueOXIMessagesRaw(requestParameters: DequeueOXIMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.messageStatus !== undefined) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/hotels/{hotelId}/queues/{queueName}/dequeueOXIMessages`.replace(`{${"queueName"}}`, encodeURIComponent(String(requestParameters.queueName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * API to purge messages from inbound and outbound queues. <p><strong>OperationId:</strong>dequeueOXIMessages</p>
     * Purge the messages from OXI inbound and outbound queues.
     */
    async dequeueOXIMessages(requestParameters: DequeueOXIMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.dequeueOXIMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to Fetch OXI Dashboard Tile Statistics (Upload and Download message counts by Success, Fail and Warning Status codes) by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getMessageStatistics</p>
     * Retrieves the statistics of Messages for Opera Exchange Interface.
     */
    async getMessageStatisticsRaw(requestParameters: GetMessageStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageStatistics>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.endDate) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.startDate) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.statCode) {
            queryParameters['statCode'] = requestParameters.statCode;
        }

        if (requestParameters.interfaceId !== undefined) {
            queryParameters['interfaceId'] = requestParameters.interfaceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/messageStatistics`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageStatisticsFromJSON(jsonValue));
    }

    /**
     * API to Fetch OXI Dashboard Tile Statistics (Upload and Download message counts by Success, Fail and Warning Status codes) by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getMessageStatistics</p>
     * Retrieves the statistics of Messages for Opera Exchange Interface.
     */
    async getMessageStatistics(requestParameters: GetMessageStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageStatistics> {
        const response = await this.getMessageStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to retrieve message statistics for inbound , outbound and business event queues. <p><strong>OperationId:</strong>getOXIMessageStatistics</p>
     * Retrieves the statistics of Messages in inbound,outbound and BE queues.
     */
    async getOXIMessageStatisticsRaw(requestParameters: GetOXIMessageStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OXIMessageStatistics>> {
        const queryParameters: any = {};

        if (requestParameters.messageStatus !== undefined) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }

        if (requestParameters.interfaceId !== undefined) {
            queryParameters['InterfaceId'] = requestParameters.interfaceId;
        }

        if (requestParameters.enqueueEndDate !== undefined) {
            queryParameters['enqueueEndDate'] = (requestParameters.enqueueEndDate as any).toISOString();
        }

        if (requestParameters.enqueueStartDate !== undefined) {
            queryParameters['enqueueStartDate'] = (requestParameters.enqueueStartDate as any).toISOString();
        }

        if (requestParameters.groupByModuleAndActionType !== undefined) {
            queryParameters['groupByModuleAndActionType'] = requestParameters.groupByModuleAndActionType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/queues/{queueName}/messageStatistics`.replace(`{${"queueName"}}`, encodeURIComponent(String(requestParameters.queueName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OXIMessageStatisticsFromJSON(jsonValue));
    }

    /**
     * API to retrieve message statistics for inbound , outbound and business event queues. <p><strong>OperationId:</strong>getOXIMessageStatistics</p>
     * Retrieves the statistics of Messages in inbound,outbound and BE queues.
     */
    async getOXIMessageStatistics(requestParameters: GetOXIMessageStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OXIMessageStatistics> {
        const response = await this.getOXIMessageStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DequeueOXIMessagesQueueNameEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound'
} as const;
export type DequeueOXIMessagesQueueNameEnum = typeof DequeueOXIMessagesQueueNameEnum[keyof typeof DequeueOXIMessagesQueueNameEnum];
/**
 * @export
 */
export const DequeueOXIMessagesMessageStatusEnum = {
    Processed: 'Processed',
    Failed: 'Failed',
    Ready: 'Ready',
    Expired: 'Expired'
} as const;
export type DequeueOXIMessagesMessageStatusEnum = typeof DequeueOXIMessagesMessageStatusEnum[keyof typeof DequeueOXIMessagesMessageStatusEnum];
/**
 * @export
 */
export const GetMessageStatisticsCodeEnum = {
    UploadedMessages: 'UploadedMessages',
    DownloadedMessages: 'DownloadedMessages'
} as const;
export type GetMessageStatisticsCodeEnum = typeof GetMessageStatisticsCodeEnum[keyof typeof GetMessageStatisticsCodeEnum];
/**
 * @export
 */
export const GetMessageStatisticsStatCodeEnum = {
    Success: 'Success',
    Failed: 'Failed',
    Warning: 'Warning',
    Total: 'Total'
} as const;
export type GetMessageStatisticsStatCodeEnum = typeof GetMessageStatisticsStatCodeEnum[keyof typeof GetMessageStatisticsStatCodeEnum];
/**
 * @export
 */
export const GetOXIMessageStatisticsQueueNameEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound',
    Be: 'Be'
} as const;
export type GetOXIMessageStatisticsQueueNameEnum = typeof GetOXIMessageStatisticsQueueNameEnum[keyof typeof GetOXIMessageStatisticsQueueNameEnum];
/**
 * @export
 */
export const GetOXIMessageStatisticsMessageStatusEnum = {
    Processed: 'Processed',
    Failed: 'Failed',
    Ready: 'Ready',
    Expired: 'Expired'
} as const;
export type GetOXIMessageStatisticsMessageStatusEnum = typeof GetOXIMessageStatisticsMessageStatusEnum[keyof typeof GetOXIMessageStatisticsMessageStatusEnum];
