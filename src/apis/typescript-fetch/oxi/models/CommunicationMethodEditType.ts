/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommunicationMethodType } from './CommunicationMethodType';
import {
    CommunicationMethodTypeFromJSON,
    CommunicationMethodTypeFromJSONTyped,
    CommunicationMethodTypeToJSON,
} from './CommunicationMethodType';
import type { CommunicationType } from './CommunicationType';
import {
    CommunicationTypeFromJSON,
    CommunicationTypeFromJSONTyped,
    CommunicationTypeToJSON,
} from './CommunicationType';

/**
 * Type represents the Communication Mehtod Base Type.
 * @export
 * @interface CommunicationMethodEditType
 */
export interface CommunicationMethodEditType {
    /**
     * OXI Interface ID
     * @type {string}
     * @memberof CommunicationMethodEditType
     */
    interfaceId?: string;
    /**
     * SID-RESORT for Global Level and HotelId associated with the interface for the Property Level configuration.
     * @type {string}
     * @memberof CommunicationMethodEditType
     */
    hotelId?: string;
    /**
     * 
     * @type {CommunicationType}
     * @memberof CommunicationMethodEditType
     */
    communicationType?: CommunicationType;
    /**
     * Attribute represents the communication flow like UPLOAD,DOWNLOAD.
     * @type {string}
     * @memberof CommunicationMethodEditType
     */
    communicationFlow?: string;
    /**
     * 
     * @type {CommunicationMethodType}
     * @memberof CommunicationMethodEditType
     */
    newMethod?: CommunicationMethodType;
}

/**
 * Check if a given object implements the CommunicationMethodEditType interface.
 */
export function instanceOfCommunicationMethodEditType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommunicationMethodEditTypeFromJSON(json: any): CommunicationMethodEditType {
    return CommunicationMethodEditTypeFromJSONTyped(json, false);
}

export function CommunicationMethodEditTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunicationMethodEditType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'communicationType': !exists(json, 'communicationType') ? undefined : CommunicationTypeFromJSON(json['communicationType']),
        'communicationFlow': !exists(json, 'communicationFlow') ? undefined : json['communicationFlow'],
        'newMethod': !exists(json, 'newMethod') ? undefined : CommunicationMethodTypeFromJSON(json['newMethod']),
    };
}

export function CommunicationMethodEditTypeToJSON(value?: CommunicationMethodEditType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'communicationType': CommunicationTypeToJSON(value.communicationType),
        'communicationFlow': value.communicationFlow,
        'newMethod': CommunicationMethodTypeToJSON(value.newMethod),
    };
}

