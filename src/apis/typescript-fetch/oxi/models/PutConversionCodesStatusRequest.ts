/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConversionCodeStatusType } from './ConversionCodeStatusType';
import {
    ConversionCodeStatusTypeFromJSON,
    ConversionCodeStatusTypeFromJSONTyped,
    ConversionCodeStatusTypeToJSON,
} from './ConversionCodeStatusType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { IntegrationSystemType } from './IntegrationSystemType';
import {
    IntegrationSystemTypeFromJSON,
    IntegrationSystemTypeFromJSONTyped,
    IntegrationSystemTypeToJSON,
} from './IntegrationSystemType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PutConversionCodesStatusRequest
 */
export interface PutConversionCodesStatusRequest {
    /**
     * 
     * @type {IntegrationSystemType}
     * @memberof PutConversionCodesStatusRequest
     */
    integrationSystem?: IntegrationSystemType;
    /**
     * Conversion Code and status information.
     * @type {Array<ConversionCodeStatusType>}
     * @memberof PutConversionCodesStatusRequest
     */
    conversionCodesStatus?: Array<ConversionCodeStatusType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PutConversionCodesStatusRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PutConversionCodesStatusRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PutConversionCodesStatusRequest interface.
 */
export function instanceOfPutConversionCodesStatusRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PutConversionCodesStatusRequestFromJSON(json: any): PutConversionCodesStatusRequest {
    return PutConversionCodesStatusRequestFromJSONTyped(json, false);
}

export function PutConversionCodesStatusRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutConversionCodesStatusRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'integrationSystem': !exists(json, 'integrationSystem') ? undefined : IntegrationSystemTypeFromJSON(json['integrationSystem']),
        'conversionCodesStatus': !exists(json, 'conversionCodesStatus') ? undefined : ((json['conversionCodesStatus'] as Array<any>).map(ConversionCodeStatusTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PutConversionCodesStatusRequestToJSON(value?: PutConversionCodesStatusRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'integrationSystem': IntegrationSystemTypeToJSON(value.integrationSystem),
        'conversionCodesStatus': value.conversionCodesStatus === undefined ? undefined : ((value.conversionCodesStatus as Array<any>).map(ConversionCodeStatusTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

