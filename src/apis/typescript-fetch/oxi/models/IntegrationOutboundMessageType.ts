/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PendingBusinessEventType } from './PendingBusinessEventType';
import {
    PendingBusinessEventTypeFromJSON,
    PendingBusinessEventTypeFromJSONTyped,
    PendingBusinessEventTypeToJSON,
} from './PendingBusinessEventType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Elements that uniquely identifies inbound message
 * @export
 * @interface IntegrationOutboundMessageType
 */
export interface IntegrationOutboundMessageType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof IntegrationOutboundMessageType
     */
    messageId?: UniqueIDType;
    /**
     * TimeStamp of enqueue of message in OXI Monitoring tables (Inbound/Outbound).
     * @type {Date}
     * @memberof IntegrationOutboundMessageType
     */
    enqueueTime?: Date;
    /**
     * TimeStamp of dequeue of message from OXI Monitoring tables (Inbound/Outbound).
     * @type {Date}
     * @memberof IntegrationOutboundMessageType
     */
    dequeueTime?: Date;
    /**
     * The interface this message was created for
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    _interface?: string;
    /**
     * This identifies the kind of message sent (e.g., reservation, profile, rate, block, rate restriction, inventory, and result)
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    messageType?: string;
    /**
     * Property this message was sent from.
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    hotelId?: string;
    /**
     * Status of the transmitted message.
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    messageStatus?: string;
    /**
     * Flag that tells whether the message is marked as reviewed or not
     * @type {boolean}
     * @memberof IntegrationOutboundMessageType
     */
    reviewed?: boolean;
    /**
     * Integration message reference
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    messageReference?: string;
    /**
     * Information that was obtained in a message such as guest last/first name from a reservation message or block code from a block message.
     * @type {string}
     * @memberof IntegrationOutboundMessageType
     */
    messagePrimayInfo?: string;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof IntegrationOutboundMessageType
     */
    notices?: Array<WarningType>;
    /**
     * Flag that tells whether the message has attachments or not
     * @type {boolean}
     * @memberof IntegrationOutboundMessageType
     */
    attachmentExists?: boolean;
    /**
     * 
     * @type {PendingBusinessEventType}
     * @memberof IntegrationOutboundMessageType
     */
    businessEventQueue?: PendingBusinessEventType;
    /**
     * TimeStamp of change in message processing status (PROCESSED/FAILED/RESEND_SUCCESS/REJECT).
     * @type {Date}
     * @memberof IntegrationOutboundMessageType
     */
    updateTime?: Date;
    /**
     * TimeStamp of receival of acknowledgement from external system (RESULT_SUCCESS/RESULT_FAILED).
     * @type {Date}
     * @memberof IntegrationOutboundMessageType
     */
    resultTime?: Date;
    /**
     * TimeStamp of receival of http call status intiated by the OXI processor to deliver message to the external system.
     * @type {Date}
     * @memberof IntegrationOutboundMessageType
     */
    deliveryTime?: Date;
}

/**
 * Check if a given object implements the IntegrationOutboundMessageType interface.
 */
export function instanceOfIntegrationOutboundMessageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IntegrationOutboundMessageTypeFromJSON(json: any): IntegrationOutboundMessageType {
    return IntegrationOutboundMessageTypeFromJSONTyped(json, false);
}

export function IntegrationOutboundMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationOutboundMessageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'messageId': !exists(json, 'messageId') ? undefined : UniqueIDTypeFromJSON(json['messageId']),
        'enqueueTime': !exists(json, 'enqueueTime') ? undefined : (new Date(json['enqueueTime'])),
        'dequeueTime': !exists(json, 'dequeueTime') ? undefined : (new Date(json['dequeueTime'])),
        '_interface': !exists(json, 'interface') ? undefined : json['interface'],
        'messageType': !exists(json, 'messageType') ? undefined : json['messageType'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'messageStatus': !exists(json, 'messageStatus') ? undefined : json['messageStatus'],
        'reviewed': !exists(json, 'reviewed') ? undefined : json['reviewed'],
        'messageReference': !exists(json, 'messageReference') ? undefined : json['messageReference'],
        'messagePrimayInfo': !exists(json, 'messagePrimayInfo') ? undefined : json['messagePrimayInfo'],
        'notices': !exists(json, 'notices') ? undefined : ((json['notices'] as Array<any>).map(WarningTypeFromJSON)),
        'attachmentExists': !exists(json, 'attachmentExists') ? undefined : json['attachmentExists'],
        'businessEventQueue': !exists(json, 'businessEventQueue') ? undefined : PendingBusinessEventTypeFromJSON(json['businessEventQueue']),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
        'resultTime': !exists(json, 'resultTime') ? undefined : (new Date(json['resultTime'])),
        'deliveryTime': !exists(json, 'deliveryTime') ? undefined : (new Date(json['deliveryTime'])),
    };
}

export function IntegrationOutboundMessageTypeToJSON(value?: IntegrationOutboundMessageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'messageId': UniqueIDTypeToJSON(value.messageId),
        'enqueueTime': value.enqueueTime === undefined ? undefined : (value.enqueueTime.toISOString()),
        'dequeueTime': value.dequeueTime === undefined ? undefined : (value.dequeueTime.toISOString()),
        'interface': value._interface,
        'messageType': value.messageType,
        'hotelId': value.hotelId,
        'messageStatus': value.messageStatus,
        'reviewed': value.reviewed,
        'messageReference': value.messageReference,
        'messagePrimayInfo': value.messagePrimayInfo,
        'notices': value.notices === undefined ? undefined : ((value.notices as Array<any>).map(WarningTypeToJSON)),
        'attachmentExists': value.attachmentExists,
        'businessEventQueue': PendingBusinessEventTypeToJSON(value.businessEventQueue),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
        'resultTime': value.resultTime === undefined ? undefined : (value.resultTime.toISOString()),
        'deliveryTime': value.deliveryTime === undefined ? undefined : (value.deliveryTime.toISOString()),
    };
}

