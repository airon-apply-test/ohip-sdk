/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AutomaticTransmissionScheduleFrequencyType } from './AutomaticTransmissionScheduleFrequencyType';
import {
    AutomaticTransmissionScheduleFrequencyTypeFromJSON,
    AutomaticTransmissionScheduleFrequencyTypeFromJSONTyped,
    AutomaticTransmissionScheduleFrequencyTypeToJSON,
} from './AutomaticTransmissionScheduleFrequencyType';
import type { AutomaticTransmissionScheduleModuleTypeType } from './AutomaticTransmissionScheduleModuleTypeType';
import {
    AutomaticTransmissionScheduleModuleTypeTypeFromJSON,
    AutomaticTransmissionScheduleModuleTypeTypeFromJSONTyped,
    AutomaticTransmissionScheduleModuleTypeTypeToJSON,
} from './AutomaticTransmissionScheduleModuleTypeType';

/**
 * Details which uniquely identifies transmission schedule
 * @export
 * @interface AutomaticTransmissionScheduleType
 */
export interface AutomaticTransmissionScheduleType {
    /**
     * Unique alpha numeric value which determines exact transmission schedule. Pass null when creating new transmission schedule
     * @type {string}
     * @memberof AutomaticTransmissionScheduleType
     */
    messageId?: string;
    /**
     * Hotel code for which the automatic transmission schedule is set.
     * @type {string}
     * @memberof AutomaticTransmissionScheduleType
     */
    hotelId?: string;
    /**
     * Interface configured for the property for which the automatic transmission schedule is set.
     * @type {string}
     * @memberof AutomaticTransmissionScheduleType
     */
    _interface?: string;
    /**
     * 
     * @type {AutomaticTransmissionScheduleModuleTypeType}
     * @memberof AutomaticTransmissionScheduleType
     */
    module?: AutomaticTransmissionScheduleModuleTypeType;
    /**
     * 
     * @type {AutomaticTransmissionScheduleFrequencyType}
     * @memberof AutomaticTransmissionScheduleType
     */
    frequency?: AutomaticTransmissionScheduleFrequencyType;
    /**
     * Date from which transmission schedule has to run
     * @type {Date}
     * @memberof AutomaticTransmissionScheduleType
     */
    startDate?: Date;
    /**
     * End date of transmission schedule
     * @type {Date}
     * @memberof AutomaticTransmissionScheduleType
     */
    endDate?: Date;
    /**
     * Indicates whether automatic transmission is active or not
     * @type {boolean}
     * @memberof AutomaticTransmissionScheduleType
     */
    inactive?: boolean;
    /**
     * True to modify how the header and grid information sent in the RTAV message.
     * @type {boolean}
     * @memberof AutomaticTransmissionScheduleType
     */
    delta?: boolean;
    /**
     * Date when last automatic transmission occurred.
     * @type {Date}
     * @memberof AutomaticTransmissionScheduleType
     */
    lastSend?: Date;
}

/**
 * Check if a given object implements the AutomaticTransmissionScheduleType interface.
 */
export function instanceOfAutomaticTransmissionScheduleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutomaticTransmissionScheduleTypeFromJSON(json: any): AutomaticTransmissionScheduleType {
    return AutomaticTransmissionScheduleTypeFromJSONTyped(json, false);
}

export function AutomaticTransmissionScheduleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutomaticTransmissionScheduleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'messageId': !exists(json, 'messageId') ? undefined : json['messageId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        '_interface': !exists(json, 'interface') ? undefined : json['interface'],
        'module': !exists(json, 'module') ? undefined : AutomaticTransmissionScheduleModuleTypeTypeFromJSON(json['module']),
        'frequency': !exists(json, 'frequency') ? undefined : AutomaticTransmissionScheduleFrequencyTypeFromJSON(json['frequency']),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'delta': !exists(json, 'delta') ? undefined : json['delta'],
        'lastSend': !exists(json, 'lastSend') ? undefined : (new Date(json['lastSend'])),
    };
}

export function AutomaticTransmissionScheduleTypeToJSON(value?: AutomaticTransmissionScheduleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'messageId': value.messageId,
        'hotelId': value.hotelId,
        'interface': value._interface,
        'module': AutomaticTransmissionScheduleModuleTypeTypeToJSON(value.module),
        'frequency': AutomaticTransmissionScheduleFrequencyTypeToJSON(value.frequency),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'inactive': value.inactive,
        'delta': value.delta,
        'lastSend': value.lastSend === undefined ? undefined : (value.lastSend.toISOString()),
    };
}

