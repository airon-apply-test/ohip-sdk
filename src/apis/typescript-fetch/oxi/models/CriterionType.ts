/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MatchAttributeTypeType } from './MatchAttributeTypeType';
import {
    MatchAttributeTypeTypeFromJSON,
    MatchAttributeTypeTypeFromJSONTyped,
    MatchAttributeTypeTypeToJSON,
} from './MatchAttributeTypeType';

/**
 * Type that represents Criteria such as match attributes, points and Active Flag for Profile Match Rule.
 * @export
 * @interface CriterionType
 */
export interface CriterionType {
    /**
     * Weighing points for the given match rule.
     * @type {number}
     * @memberof CriterionType
     */
    points?: number;
    /**
     * The activation flag for the match rule criteria.
     * @type {boolean}
     * @memberof CriterionType
     */
    active?: boolean;
    /**
     * Rules defining the match Attribute.
     * @type {Array<MatchAttributeTypeType>}
     * @memberof CriterionType
     */
    matchAttributes?: Array<MatchAttributeTypeType>;
}

/**
 * Check if a given object implements the CriterionType interface.
 */
export function instanceOfCriterionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CriterionTypeFromJSON(json: any): CriterionType {
    return CriterionTypeFromJSONTyped(json, false);
}

export function CriterionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CriterionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'points': !exists(json, 'points') ? undefined : json['points'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'matchAttributes': !exists(json, 'matchAttributes') ? undefined : ((json['matchAttributes'] as Array<any>).map(MatchAttributeTypeTypeFromJSON)),
    };
}

export function CriterionTypeToJSON(value?: CriterionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'points': value.points,
        'active': value.active,
        'matchAttributes': value.matchAttributes === undefined ? undefined : ((value.matchAttributes as Array<any>).map(MatchAttributeTypeTypeToJSON)),
    };
}

