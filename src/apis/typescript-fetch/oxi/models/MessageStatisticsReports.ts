/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExchangeStatReportType } from './ExchangeStatReportType';
import {
    ExchangeStatReportTypeFromJSON,
    ExchangeStatReportTypeFromJSONTyped,
    ExchangeStatReportTypeToJSON,
} from './ExchangeStatReportType';
import type { InterfaceSetupIDType } from './InterfaceSetupIDType';
import {
    InterfaceSetupIDTypeFromJSON,
    InterfaceSetupIDTypeFromJSONTyped,
    InterfaceSetupIDTypeToJSON,
} from './InterfaceSetupIDType';

/**
 * Interface Setup Details.
 * @export
 * @interface MessageStatisticsReports
 */
export interface MessageStatisticsReports {
    /**
     * 
     * @type {InterfaceSetupIDType}
     * @memberof MessageStatisticsReports
     */
    interfaceDetails?: InterfaceSetupIDType;
    /**
     * Exchange Interface Report Type.
     * @type {Array<ExchangeStatReportType>}
     * @memberof MessageStatisticsReports
     */
    statReports?: Array<ExchangeStatReportType>;
}

/**
 * Check if a given object implements the MessageStatisticsReports interface.
 */
export function instanceOfMessageStatisticsReports(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MessageStatisticsReportsFromJSON(json: any): MessageStatisticsReports {
    return MessageStatisticsReportsFromJSONTyped(json, false);
}

export function MessageStatisticsReportsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageStatisticsReports {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceDetails': !exists(json, 'interfaceDetails') ? undefined : InterfaceSetupIDTypeFromJSON(json['interfaceDetails']),
        'statReports': !exists(json, 'statReports') ? undefined : ((json['statReports'] as Array<any>).map(ExchangeStatReportTypeFromJSON)),
    };
}

export function MessageStatisticsReportsToJSON(value?: MessageStatisticsReports | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceDetails': InterfaceSetupIDTypeToJSON(value.interfaceDetails),
        'statReports': value.statReports === undefined ? undefined : ((value.statReports as Array<any>).map(ExchangeStatReportTypeToJSON)),
    };
}

