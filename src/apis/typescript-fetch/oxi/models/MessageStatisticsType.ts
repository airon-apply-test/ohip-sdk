/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OXIMessageStatusType } from './OXIMessageStatusType';
import {
    OXIMessageStatusTypeFromJSON,
    OXIMessageStatusTypeFromJSONTyped,
    OXIMessageStatusTypeToJSON,
} from './OXIMessageStatusType';

/**
 * Type for Message statistics Details.
 * @export
 * @interface MessageStatisticsType
 */
export interface MessageStatisticsType {
    /**
     * InterfaceId of the Messages.
     * @type {string}
     * @memberof MessageStatisticsType
     */
    interfaceId?: string;
    /**
     * Property of the Messages.
     * @type {string}
     * @memberof MessageStatisticsType
     */
    hotelId?: string;
    /**
     * Module name of messages.
     * @type {string}
     * @memberof MessageStatisticsType
     */
    module?: string;
    /**
     * Action Type of the messages.
     * @type {string}
     * @memberof MessageStatisticsType
     */
    actionType?: string;
    /**
     * 
     * @type {OXIMessageStatusType}
     * @memberof MessageStatisticsType
     */
    messageStatus?: OXIMessageStatusType;
    /**
     * Number of the messages
     * @type {number}
     * @memberof MessageStatisticsType
     */
    messageCount?: number;
    /**
     * Last date on which messages are processed for given criteria.
     * @type {Date}
     * @memberof MessageStatisticsType
     */
    lastProcessedDate?: Date;
}

/**
 * Check if a given object implements the MessageStatisticsType interface.
 */
export function instanceOfMessageStatisticsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MessageStatisticsTypeFromJSON(json: any): MessageStatisticsType {
    return MessageStatisticsTypeFromJSONTyped(json, false);
}

export function MessageStatisticsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageStatisticsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'module': !exists(json, 'module') ? undefined : json['module'],
        'actionType': !exists(json, 'actionType') ? undefined : json['actionType'],
        'messageStatus': !exists(json, 'messageStatus') ? undefined : OXIMessageStatusTypeFromJSON(json['messageStatus']),
        'messageCount': !exists(json, 'messageCount') ? undefined : json['messageCount'],
        'lastProcessedDate': !exists(json, 'lastProcessedDate') ? undefined : (new Date(json['lastProcessedDate'])),
    };
}

export function MessageStatisticsTypeToJSON(value?: MessageStatisticsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'module': value.module,
        'actionType': value.actionType,
        'messageStatus': OXIMessageStatusTypeToJSON(value.messageStatus),
        'messageCount': value.messageCount,
        'lastProcessedDate': value.lastProcessedDate === undefined ? undefined : (value.lastProcessedDate.toISOString()),
    };
}

