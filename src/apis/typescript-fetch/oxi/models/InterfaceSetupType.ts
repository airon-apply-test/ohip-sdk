/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InterfaceSetupMessageIndicatorType } from './InterfaceSetupMessageIndicatorType';
import {
    InterfaceSetupMessageIndicatorTypeFromJSON,
    InterfaceSetupMessageIndicatorTypeFromJSONTyped,
    InterfaceSetupMessageIndicatorTypeToJSON,
} from './InterfaceSetupMessageIndicatorType';
import type { InterfaceSetupXMLVersionType } from './InterfaceSetupXMLVersionType';
import {
    InterfaceSetupXMLVersionTypeFromJSON,
    InterfaceSetupXMLVersionTypeFromJSONTyped,
    InterfaceSetupXMLVersionTypeToJSON,
} from './InterfaceSetupXMLVersionType';
import type { InterfaceSystemType } from './InterfaceSystemType';
import {
    InterfaceSystemTypeFromJSON,
    InterfaceSystemTypeFromJSONTyped,
    InterfaceSystemTypeToJSON,
} from './InterfaceSystemType';

/**
 * Type represents ID one Interface Setup
 * @export
 * @interface InterfaceSetupType
 */
export interface InterfaceSetupType {
    /**
     * ID of the Interface Setup
     * @type {string}
     * @memberof InterfaceSetupType
     */
    interfaceId?: string;
    /**
     * Property for which the Interface Setup is defined.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    hotelId?: string;
    /**
     * Corresponding property in the external system
     * @type {string}
     * @memberof InterfaceSetupType
     */
    externalHotelCode?: string;
    /**
     * Logical Name of the machine that runs the OXIHUB
     * @type {number}
     * @memberof InterfaceSetupType
     */
    machine?: number;
    /**
     * Detailed information about the interface.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    description?: string;
    /**
     * Type of the message. (XML, TPI, AMF, etc.).
     * @type {string}
     * @memberof InterfaceSetupType
     */
    messageFormat?: string;
    /**
     * Collection of XMLTypes
     * @type {Array<InterfaceSetupXMLVersionType>}
     * @memberof InterfaceSetupType
     */
    xMLVersions?: Array<InterfaceSetupXMLVersionType>;
    /**
     * Database ID
     * @type {string}
     * @memberof InterfaceSetupType
     */
    databaseId?: string;
    /**
     * Type of the interface (UPLOAD, DOWNLOAD, EXPORT, FTCRS, HOLIDEX, etc.,).
     * @type {string}
     * @memberof InterfaceSetupType
     */
    interfaceType?: string;
    /**
     * Indicates if external system is active
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    externalSystemActivated?: boolean;
    /**
     * 
     * @type {InterfaceSystemType}
     * @memberof InterfaceSetupType
     */
    systemType?: InterfaceSystemType;
    /**
     * Select for all interfaces that send data from Opera to an external system.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    batchProcessBE?: boolean;
    /**
     * Compress all accumulated Business Events if true.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    zipData?: boolean;
    /**
     * Indicates external system does not send the full message for changes.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    deltaMode?: boolean;
    /**
     * 
     * @type {InterfaceSetupMessageIndicatorType}
     * @memberof InterfaceSetupType
     */
    deletionIndicator?: InterfaceSetupMessageIndicatorType;
    /**
     * 
     * @type {InterfaceSetupMessageIndicatorType}
     * @memberof InterfaceSetupType
     */
    keepingIndicator?: InterfaceSetupMessageIndicatorType;
    /**
     * Indicates if interface is ORS destination.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    orsDestination?: boolean;
    /**
     * Indicates if XML Versions Negotiable.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    xmlSchemaVersionsNegotiable?: boolean;
    /**
     * Indicates to set all XML Versions to Max version.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    negotiateXmlSchemaVersion?: boolean;
    /**
     * XML Version to be used by all XLM schemas.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    setAllToVersion?: string;
}

/**
 * Check if a given object implements the InterfaceSetupType interface.
 */
export function instanceOfInterfaceSetupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceSetupTypeFromJSON(json: any): InterfaceSetupType {
    return InterfaceSetupTypeFromJSONTyped(json, false);
}

export function InterfaceSetupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceSetupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'externalHotelCode': !exists(json, 'externalHotelCode') ? undefined : json['externalHotelCode'],
        'machine': !exists(json, 'machine') ? undefined : json['machine'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'messageFormat': !exists(json, 'messageFormat') ? undefined : json['messageFormat'],
        'xMLVersions': !exists(json, 'xMLVersions') ? undefined : ((json['xMLVersions'] as Array<any>).map(InterfaceSetupXMLVersionTypeFromJSON)),
        'databaseId': !exists(json, 'databaseId') ? undefined : json['databaseId'],
        'interfaceType': !exists(json, 'interfaceType') ? undefined : json['interfaceType'],
        'externalSystemActivated': !exists(json, 'externalSystemActivated') ? undefined : json['externalSystemActivated'],
        'systemType': !exists(json, 'systemType') ? undefined : InterfaceSystemTypeFromJSON(json['systemType']),
        'batchProcessBE': !exists(json, 'batchProcessBE') ? undefined : json['batchProcessBE'],
        'zipData': !exists(json, 'zipData') ? undefined : json['zipData'],
        'deltaMode': !exists(json, 'deltaMode') ? undefined : json['deltaMode'],
        'deletionIndicator': !exists(json, 'deletionIndicator') ? undefined : InterfaceSetupMessageIndicatorTypeFromJSON(json['deletionIndicator']),
        'keepingIndicator': !exists(json, 'keepingIndicator') ? undefined : InterfaceSetupMessageIndicatorTypeFromJSON(json['keepingIndicator']),
        'orsDestination': !exists(json, 'orsDestination') ? undefined : json['orsDestination'],
        'xmlSchemaVersionsNegotiable': !exists(json, 'xmlSchemaVersionsNegotiable') ? undefined : json['xmlSchemaVersionsNegotiable'],
        'negotiateXmlSchemaVersion': !exists(json, 'negotiateXmlSchemaVersion') ? undefined : json['negotiateXmlSchemaVersion'],
        'setAllToVersion': !exists(json, 'setAllToVersion') ? undefined : json['setAllToVersion'],
    };
}

export function InterfaceSetupTypeToJSON(value?: InterfaceSetupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'externalHotelCode': value.externalHotelCode,
        'machine': value.machine,
        'description': value.description,
        'messageFormat': value.messageFormat,
        'xMLVersions': value.xMLVersions === undefined ? undefined : ((value.xMLVersions as Array<any>).map(InterfaceSetupXMLVersionTypeToJSON)),
        'databaseId': value.databaseId,
        'interfaceType': value.interfaceType,
        'externalSystemActivated': value.externalSystemActivated,
        'systemType': InterfaceSystemTypeToJSON(value.systemType),
        'batchProcessBE': value.batchProcessBE,
        'zipData': value.zipData,
        'deltaMode': value.deltaMode,
        'deletionIndicator': InterfaceSetupMessageIndicatorTypeToJSON(value.deletionIndicator),
        'keepingIndicator': InterfaceSetupMessageIndicatorTypeToJSON(value.keepingIndicator),
        'orsDestination': value.orsDestination,
        'xmlSchemaVersionsNegotiable': value.xmlSchemaVersionsNegotiable,
        'negotiateXmlSchemaVersion': value.negotiateXmlSchemaVersion,
        'setAllToVersion': value.setAllToVersion,
    };
}

