/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExchangeStatCodeType } from './ExchangeStatCodeType';
import {
    ExchangeStatCodeTypeFromJSON,
    ExchangeStatCodeTypeFromJSONTyped,
    ExchangeStatCodeTypeToJSON,
} from './ExchangeStatCodeType';
import type { StatUnitCategoryType } from './StatUnitCategoryType';
import {
    StatUnitCategoryTypeFromJSON,
    StatUnitCategoryTypeFromJSONTyped,
    StatUnitCategoryTypeToJSON,
} from './StatUnitCategoryType';

/**
 * Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.
 * @export
 * @interface ExchangeStatType
 */
export interface ExchangeStatType {
    /**
     * Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.
     * @type {string}
     * @memberof ExchangeStatType
     */
    unitType?: string;
    /**
     * Statistical value.
     * @type {number}
     * @memberof ExchangeStatType
     */
    unitValue?: number;
    /**
     * 
     * @type {StatUnitCategoryType}
     * @memberof ExchangeStatType
     */
    unitCategory?: StatUnitCategoryType;
    /**
     * 
     * @type {ExchangeStatCodeType}
     * @memberof ExchangeStatType
     */
    code?: ExchangeStatCodeType;
}

/**
 * Check if a given object implements the ExchangeStatType interface.
 */
export function instanceOfExchangeStatType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExchangeStatTypeFromJSON(json: any): ExchangeStatType {
    return ExchangeStatTypeFromJSONTyped(json, false);
}

export function ExchangeStatTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeStatType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'unitType': !exists(json, 'unitType') ? undefined : json['unitType'],
        'unitValue': !exists(json, 'unitValue') ? undefined : json['unitValue'],
        'unitCategory': !exists(json, 'unitCategory') ? undefined : StatUnitCategoryTypeFromJSON(json['unitCategory']),
        'code': !exists(json, 'code') ? undefined : ExchangeStatCodeTypeFromJSON(json['code']),
    };
}

export function ExchangeStatTypeToJSON(value?: ExchangeStatType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unitType': value.unitType,
        'unitValue': value.unitValue,
        'unitCategory': StatUnitCategoryTypeToJSON(value.unitCategory),
        'code': ExchangeStatCodeTypeToJSON(value.code),
    };
}

