/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExchangeInterfaceStatusCommandType } from './ExchangeInterfaceStatusCommandType';
import {
    ExchangeInterfaceStatusCommandTypeFromJSON,
    ExchangeInterfaceStatusCommandTypeFromJSONTyped,
    ExchangeInterfaceStatusCommandTypeToJSON,
} from './ExchangeInterfaceStatusCommandType';
import type { ExchangeInterfaceStatusType } from './ExchangeInterfaceStatusType';
import {
    ExchangeInterfaceStatusTypeFromJSON,
    ExchangeInterfaceStatusTypeFromJSONTyped,
    ExchangeInterfaceStatusTypeToJSON,
} from './ExchangeInterfaceStatusType';
import type { InterfaceStatusProcessRoleType } from './InterfaceStatusProcessRoleType';
import {
    InterfaceStatusProcessRoleTypeFromJSON,
    InterfaceStatusProcessRoleTypeFromJSONTyped,
    InterfaceStatusProcessRoleTypeToJSON,
} from './InterfaceStatusProcessRoleType';
import type { InterfaceStatusProcessTypeType } from './InterfaceStatusProcessTypeType';
import {
    InterfaceStatusProcessTypeTypeFromJSON,
    InterfaceStatusProcessTypeTypeFromJSONTyped,
    InterfaceStatusProcessTypeTypeToJSON,
} from './InterfaceStatusProcessTypeType';

/**
 * Type which holds the details of Interface.
 * @export
 * @interface InterfaceStatusType
 */
export interface InterfaceStatusType {
    /**
     * Interface ID for which processor will be started.
     * @type {string}
     * @memberof InterfaceStatusType
     */
    interfaceId?: string;
    /**
     * Hotel Code which is associated with Interface ID will be processed.
     * @type {string}
     * @memberof InterfaceStatusType
     */
    hotelId?: string;
    /**
     * Description of Interface ID.
     * @type {string}
     * @memberof InterfaceStatusType
     */
    description?: string;
    /**
     * 
     * @type {InterfaceStatusProcessTypeType}
     * @memberof InterfaceStatusType
     */
    processType?: InterfaceStatusProcessTypeType;
    /**
     * 
     * @type {InterfaceStatusProcessRoleType}
     * @memberof InterfaceStatusType
     */
    processRole?: InterfaceStatusProcessRoleType;
    /**
     * 
     * @type {ExchangeInterfaceStatusType}
     * @memberof InterfaceStatusType
     */
    status?: ExchangeInterfaceStatusType;
    /**
     * 
     * @type {ExchangeInterfaceStatusCommandType}
     * @memberof InterfaceStatusType
     */
    command?: ExchangeInterfaceStatusCommandType;
    /**
     * Indicates time at which process started.
     * @type {Date}
     * @memberof InterfaceStatusType
     */
    updatedTime?: Date;
    /**
     * User who started the processor.
     * @type {string}
     * @memberof InterfaceStatusType
     */
    user?: string;
    /**
     * The System type for which Interface Setups have to be listed like OXI, OXIHub.
     * @type {string}
     * @memberof InterfaceStatusType
     */
    systemType?: string;
}

/**
 * Check if a given object implements the InterfaceStatusType interface.
 */
export function instanceOfInterfaceStatusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceStatusTypeFromJSON(json: any): InterfaceStatusType {
    return InterfaceStatusTypeFromJSONTyped(json, false);
}

export function InterfaceStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceStatusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'processType': !exists(json, 'processType') ? undefined : InterfaceStatusProcessTypeTypeFromJSON(json['processType']),
        'processRole': !exists(json, 'processRole') ? undefined : InterfaceStatusProcessRoleTypeFromJSON(json['processRole']),
        'status': !exists(json, 'status') ? undefined : ExchangeInterfaceStatusTypeFromJSON(json['status']),
        'command': !exists(json, 'command') ? undefined : ExchangeInterfaceStatusCommandTypeFromJSON(json['command']),
        'updatedTime': !exists(json, 'updatedTime') ? undefined : (new Date(json['updatedTime'])),
        'user': !exists(json, 'user') ? undefined : json['user'],
        'systemType': !exists(json, 'systemType') ? undefined : json['systemType'],
    };
}

export function InterfaceStatusTypeToJSON(value?: InterfaceStatusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'description': value.description,
        'processType': InterfaceStatusProcessTypeTypeToJSON(value.processType),
        'processRole': InterfaceStatusProcessRoleTypeToJSON(value.processRole),
        'status': ExchangeInterfaceStatusTypeToJSON(value.status),
        'command': ExchangeInterfaceStatusCommandTypeToJSON(value.command),
        'updatedTime': value.updatedTime === undefined ? undefined : (value.updatedTime.toISOString().substr(0,10)),
        'user': value.user,
        'systemType': value.systemType,
    };
}

