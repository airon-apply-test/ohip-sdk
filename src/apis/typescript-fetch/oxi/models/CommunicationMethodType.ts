/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommunicationMethodHTTPSType } from './CommunicationMethodHTTPSType';
import {
    CommunicationMethodHTTPSTypeFromJSON,
    CommunicationMethodHTTPSTypeFromJSONTyped,
    CommunicationMethodHTTPSTypeToJSON,
} from './CommunicationMethodHTTPSType';
import type { CommunicationMethodNoneType } from './CommunicationMethodNoneType';
import {
    CommunicationMethodNoneTypeFromJSON,
    CommunicationMethodNoneTypeFromJSONTyped,
    CommunicationMethodNoneTypeToJSON,
} from './CommunicationMethodNoneType';
import type { CommunicationType } from './CommunicationType';
import {
    CommunicationTypeFromJSON,
    CommunicationTypeFromJSONTyped,
    CommunicationTypeToJSON,
} from './CommunicationType';

/**
 * Type represents the Communication Method Base Type.
 * @export
 * @interface CommunicationMethodType
 */
export interface CommunicationMethodType {
    /**
     * OXI Interface ID
     * @type {string}
     * @memberof CommunicationMethodType
     */
    interfaceId?: string;
    /**
     * SID-RESORT for Global Level and HotelId associated with the interface for the Property Level configuration.
     * @type {string}
     * @memberof CommunicationMethodType
     */
    hotelId?: string;
    /**
     * 
     * @type {CommunicationType}
     * @memberof CommunicationMethodType
     */
    communicationType?: CommunicationType;
    /**
     * Attribute represents the communication flow like UPLOAD,DOWNLOAD.
     * @type {string}
     * @memberof CommunicationMethodType
     */
    communicationFlow?: string;
    /**
     * 
     * @type {CommunicationMethodNoneType}
     * @memberof CommunicationMethodType
     */
    noCommunication?: CommunicationMethodNoneType;
    /**
     * 
     * @type {CommunicationMethodHTTPSType}
     * @memberof CommunicationMethodType
     */
    hTTPS?: CommunicationMethodHTTPSType;
    /**
     * Attribute that indicates whether the communication type allowed or not.
     * @type {string}
     * @memberof CommunicationMethodType
     */
    allowedComTypes?: string;
    /**
     * Attribute represents Description of Communication Flow
     * @type {string}
     * @memberof CommunicationMethodType
     */
    displayText?: string;
    /**
     * Attribute represents Retry Count
     * @type {number}
     * @memberof CommunicationMethodType
     */
    retryCount?: number;
    /**
     * Attribute represents Interval in seconds between retries
     * @type {number}
     * @memberof CommunicationMethodType
     */
    retryInterval?: number;
    /**
     * Attribute represents Upload start time in HH:MI 24 hrs format
     * @type {string}
     * @memberof CommunicationMethodType
     */
    startTime?: string;
    /**
     * Attribute represents Number of days files to be kept in the backup folder
     * @type {number}
     * @memberof CommunicationMethodType
     */
    noOfDaysToKeep?: number;
    /**
     * Attribute represents Version Number of the PM System.
     * @type {string}
     * @memberof CommunicationMethodType
     */
    versionNumber?: string;
    /**
     * Attribute represents System Type(Production/Test)
     * @type {string}
     * @memberof CommunicationMethodType
     */
    systemType?: string;
    /**
     * Chain code.
     * @type {string}
     * @memberof CommunicationMethodType
     */
    chainCode?: string;
}

/**
 * Check if a given object implements the CommunicationMethodType interface.
 */
export function instanceOfCommunicationMethodType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommunicationMethodTypeFromJSON(json: any): CommunicationMethodType {
    return CommunicationMethodTypeFromJSONTyped(json, false);
}

export function CommunicationMethodTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunicationMethodType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'communicationType': !exists(json, 'communicationType') ? undefined : CommunicationTypeFromJSON(json['communicationType']),
        'communicationFlow': !exists(json, 'communicationFlow') ? undefined : json['communicationFlow'],
        'noCommunication': !exists(json, 'noCommunication') ? undefined : CommunicationMethodNoneTypeFromJSON(json['noCommunication']),
        'hTTPS': !exists(json, 'hTTPS') ? undefined : CommunicationMethodHTTPSTypeFromJSON(json['hTTPS']),
        'allowedComTypes': !exists(json, 'allowedComTypes') ? undefined : json['allowedComTypes'],
        'displayText': !exists(json, 'displayText') ? undefined : json['displayText'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'retryInterval': !exists(json, 'retryInterval') ? undefined : json['retryInterval'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'noOfDaysToKeep': !exists(json, 'noOfDaysToKeep') ? undefined : json['noOfDaysToKeep'],
        'versionNumber': !exists(json, 'versionNumber') ? undefined : json['versionNumber'],
        'systemType': !exists(json, 'systemType') ? undefined : json['systemType'],
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
    };
}

export function CommunicationMethodTypeToJSON(value?: CommunicationMethodType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'communicationType': CommunicationTypeToJSON(value.communicationType),
        'communicationFlow': value.communicationFlow,
        'noCommunication': CommunicationMethodNoneTypeToJSON(value.noCommunication),
        'hTTPS': CommunicationMethodHTTPSTypeToJSON(value.hTTPS),
        'allowedComTypes': value.allowedComTypes,
        'displayText': value.displayText,
        'retryCount': value.retryCount,
        'retryInterval': value.retryInterval,
        'startTime': value.startTime,
        'noOfDaysToKeep': value.noOfDaysToKeep,
        'versionNumber': value.versionNumber,
        'systemType': value.systemType,
        'chainCode': value.chainCode,
    };
}

