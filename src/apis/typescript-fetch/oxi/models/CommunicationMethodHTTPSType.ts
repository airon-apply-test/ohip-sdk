/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SystemType } from './SystemType';
import {
    SystemTypeFromJSON,
    SystemTypeFromJSONTyped,
    SystemTypeToJSON,
} from './SystemType';

/**
 * Type represents the Communication Type Base Details.
 * @export
 * @interface CommunicationMethodHTTPSType
 */
export interface CommunicationMethodHTTPSType {
    /**
     * Attribute represents Username for Types HTTP
     * @type {string}
     * @memberof CommunicationMethodHTTPSType
     */
    userName?: string;
    /**
     * Attribute represents Password for Types HTTP
     * @type {string}
     * @memberof CommunicationMethodHTTPSType
     */
    password?: string;
    /**
     * Attribute represents Idle Time(in Minutes) of HTTP,None
     * @type {number}
     * @memberof CommunicationMethodHTTPSType
     */
    sleepTime?: number;
    /**
     * Attribute is used to indentify the TimeOut(in Seconds) of HTTP,None
     * @type {number}
     * @memberof CommunicationMethodHTTPSType
     */
    timeOut?: number;
    /**
     * Attribute represents Address
     * @type {string}
     * @memberof CommunicationMethodHTTPSType
     */
    address?: string;
    /**
     * Attribute that represents Proxy URL
     * @type {string}
     * @memberof CommunicationMethodHTTPSType
     */
    proxyAddress?: string;
    /**
     * Attribute that indicates whether data to compressed or not
     * @type {boolean}
     * @memberof CommunicationMethodHTTPSType
     */
    compressData?: boolean;
    /**
     * Attribute that indicates whether to use client certificate or not
     * @type {boolean}
     * @memberof CommunicationMethodHTTPSType
     */
    useClientCertificate?: boolean;
    /**
     * 
     * @type {SystemType}
     * @memberof CommunicationMethodHTTPSType
     */
    system?: SystemType;
    /**
     * Locale(Holidex specific) Values like US,EU
     * @type {string}
     * @memberof CommunicationMethodHTTPSType
     */
    locale?: string;
    /**
     * Attribute that indicates whether to use Proxy URL or User configured URL.
     * @type {boolean}
     * @memberof CommunicationMethodHTTPSType
     */
    useVaultProxy?: boolean;
    /**
     * Attribute that indicates whether to allow compress data or not.
     * @type {boolean}
     * @memberof CommunicationMethodHTTPSType
     */
    allowCompressData?: boolean;
}

/**
 * Check if a given object implements the CommunicationMethodHTTPSType interface.
 */
export function instanceOfCommunicationMethodHTTPSType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommunicationMethodHTTPSTypeFromJSON(json: any): CommunicationMethodHTTPSType {
    return CommunicationMethodHTTPSTypeFromJSONTyped(json, false);
}

export function CommunicationMethodHTTPSTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunicationMethodHTTPSType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'sleepTime': !exists(json, 'sleepTime') ? undefined : json['sleepTime'],
        'timeOut': !exists(json, 'timeOut') ? undefined : json['timeOut'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'proxyAddress': !exists(json, 'proxyAddress') ? undefined : json['proxyAddress'],
        'compressData': !exists(json, 'compressData') ? undefined : json['compressData'],
        'useClientCertificate': !exists(json, 'useClientCertificate') ? undefined : json['useClientCertificate'],
        'system': !exists(json, 'system') ? undefined : SystemTypeFromJSON(json['system']),
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'useVaultProxy': !exists(json, 'useVaultProxy') ? undefined : json['useVaultProxy'],
        'allowCompressData': !exists(json, 'allowCompressData') ? undefined : json['allowCompressData'],
    };
}

export function CommunicationMethodHTTPSTypeToJSON(value?: CommunicationMethodHTTPSType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userName': value.userName,
        'password': value.password,
        'sleepTime': value.sleepTime,
        'timeOut': value.timeOut,
        'address': value.address,
        'proxyAddress': value.proxyAddress,
        'compressData': value.compressData,
        'useClientCertificate': value.useClientCertificate,
        'system': SystemTypeToJSON(value.system),
        'locale': value.locale,
        'useVaultProxy': value.useVaultProxy,
        'allowCompressData': value.allowCompressData,
    };
}

