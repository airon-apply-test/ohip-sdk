/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConversionCodeMasterType } from './ConversionCodeMasterType';
import {
    ConversionCodeMasterTypeFromJSON,
    ConversionCodeMasterTypeFromJSONTyped,
    ConversionCodeMasterTypeToJSON,
} from './ConversionCodeMasterType';

/**
 * A common type contains basic information about Conversion Code.
 * @export
 * @interface ConversionCodeType
 */
export interface ConversionCodeType {
    /**
     * Hotel Code of the Property.
     * @type {string}
     * @memberof ConversionCodeType
     */
    hotelId?: string;
    /**
     * Identifier of the Interface.
     * @type {string}
     * @memberof ConversionCodeType
     */
    interfaceId?: string;
    /**
     * Type of Conversion Code or user-defined function (UDF) module name configured in the system.
     * @type {string}
     * @memberof ConversionCodeType
     */
    conversionCode?: string;
    /**
     * A flag that is true if the conversion code is an user-defined function (UDF) module code.
     * @type {boolean}
     * @memberof ConversionCodeType
     */
    uDFCode?: boolean;
    /**
     * Label of the Conversion Code that is displayed in UI.
     * @type {string}
     * @memberof ConversionCodeType
     */
    label?: string;
    /**
     * Description of the Conversion Code.
     * @type {string}
     * @memberof ConversionCodeType
     */
    description?: string;
    /**
     * A field that distinguishes active and inactive Conversion Codes.
     * @type {boolean}
     * @memberof ConversionCodeType
     */
    active?: boolean;
    /**
     * XML Types for the Conversion Code.
     * @type {string}
     * @memberof ConversionCodeType
     */
    group?: string;
    /**
     * 
     * @type {ConversionCodeMasterType}
     * @memberof ConversionCodeType
     */
    master?: ConversionCodeMasterType;
}

/**
 * Check if a given object implements the ConversionCodeType interface.
 */
export function instanceOfConversionCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversionCodeTypeFromJSON(json: any): ConversionCodeType {
    return ConversionCodeTypeFromJSONTyped(json, false);
}

export function ConversionCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversionCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'conversionCode': !exists(json, 'conversionCode') ? undefined : json['conversionCode'],
        'uDFCode': !exists(json, 'uDFCode') ? undefined : json['uDFCode'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'master': !exists(json, 'master') ? undefined : ConversionCodeMasterTypeFromJSON(json['master']),
    };
}

export function ConversionCodeTypeToJSON(value?: ConversionCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'interfaceId': value.interfaceId,
        'conversionCode': value.conversionCode,
        'uDFCode': value.uDFCode,
        'label': value.label,
        'description': value.description,
        'active': value.active,
        'group': value.group,
        'master': ConversionCodeMasterTypeToJSON(value.master),
    };
}

