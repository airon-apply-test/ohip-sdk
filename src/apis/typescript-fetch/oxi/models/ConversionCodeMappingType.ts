/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A common type contains basic information about Conversion Code.
 * @export
 * @interface ConversionCodeMappingType
 */
export interface ConversionCodeMappingType {
    /**
     * Hotel Code of the Property.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    hotelId?: string;
    /**
     * Identifier of the Interface.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    interfaceId?: string;
    /**
     * Type of Conversion Code or user-defined function (UDF) module name configured in the system.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    conversionCode?: string;
    /**
     * A flag that is true if the conversion code is an user-defined function (UDF) module code.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    uDFCode?: boolean;
    /**
     * Conversion Code Detail Sequence Number, that uniquely identifies a mapping.
     * @type {number}
     * @memberof ConversionCodeMappingType
     */
    id?: number;
    /**
     * OPERA Code value or user-defined function (UDF) field name of the mapping.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    operaValue?: string;
    /**
     * A value in the External System that should be mapped to the corresponding OPERA Value or user-defined function (UDF) field.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    externalValue?: string;
    /**
     * Name of the OPERA column that is used in the user-defined function (UDF) mapping.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    operaColumn?: string;
    /**
     * Field name in the external system that is used in the user-defined function (UDF) mapping.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    externalFieldName?: string;
    /**
     * Profile type of the user-defined function (UDF) definition.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    profileType?: string;
    /**
     * When this is true, the External Value of current record is considered to be the default mapping value, where there are more than one mapping for OPERA Value.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    operaToExternalDefault?: boolean;
    /**
     * When this is true, the OPERA Value of current record is considered to be the default mapping value, where there are more than one mapping for the External System Value.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    externalToOperaDefault?: boolean;
    /**
     * A flag to indicate whether the current External Value should be considered as default, when there is already a default External Value mapped for the same OPERA Value.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    overrideExternalDefault?: boolean;
    /**
     * A flag to indicate whether the current OPERA Value should be considered as default, when there is already a default OPERA Value mapped for the same External Value.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    overrideOperaDefault?: boolean;
    /**
     * A flag to indicate whether the conversion code mapping is active in the system or not.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    active?: boolean;
    /**
     * A flag to indicate whether this conversion was manually entered or IFC created.
     * @type {boolean}
     * @memberof ConversionCodeMappingType
     */
    iFCCreated?: boolean;
    /**
     * Master Value for the Conversion Code Mapping (if any), to which the OPERA mapping value corresponds to. For user-defined function (UDF) mapping, this field represents the profile type of a profile UDF definition.
     * @type {string}
     * @memberof ConversionCodeMappingType
     */
    masterValue?: string;
}

/**
 * Check if a given object implements the ConversionCodeMappingType interface.
 */
export function instanceOfConversionCodeMappingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversionCodeMappingTypeFromJSON(json: any): ConversionCodeMappingType {
    return ConversionCodeMappingTypeFromJSONTyped(json, false);
}

export function ConversionCodeMappingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversionCodeMappingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : json['interfaceId'],
        'conversionCode': !exists(json, 'conversionCode') ? undefined : json['conversionCode'],
        'uDFCode': !exists(json, 'uDFCode') ? undefined : json['uDFCode'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'operaValue': !exists(json, 'operaValue') ? undefined : json['operaValue'],
        'externalValue': !exists(json, 'externalValue') ? undefined : json['externalValue'],
        'operaColumn': !exists(json, 'operaColumn') ? undefined : json['operaColumn'],
        'externalFieldName': !exists(json, 'externalFieldName') ? undefined : json['externalFieldName'],
        'profileType': !exists(json, 'profileType') ? undefined : json['profileType'],
        'operaToExternalDefault': !exists(json, 'operaToExternalDefault') ? undefined : json['operaToExternalDefault'],
        'externalToOperaDefault': !exists(json, 'externalToOperaDefault') ? undefined : json['externalToOperaDefault'],
        'overrideExternalDefault': !exists(json, 'overrideExternalDefault') ? undefined : json['overrideExternalDefault'],
        'overrideOperaDefault': !exists(json, 'overrideOperaDefault') ? undefined : json['overrideOperaDefault'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'iFCCreated': !exists(json, 'iFCCreated') ? undefined : json['iFCCreated'],
        'masterValue': !exists(json, 'masterValue') ? undefined : json['masterValue'],
    };
}

export function ConversionCodeMappingTypeToJSON(value?: ConversionCodeMappingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'interfaceId': value.interfaceId,
        'conversionCode': value.conversionCode,
        'uDFCode': value.uDFCode,
        'id': value.id,
        'operaValue': value.operaValue,
        'externalValue': value.externalValue,
        'operaColumn': value.operaColumn,
        'externalFieldName': value.externalFieldName,
        'profileType': value.profileType,
        'operaToExternalDefault': value.operaToExternalDefault,
        'externalToOperaDefault': value.externalToOperaDefault,
        'overrideExternalDefault': value.overrideExternalDefault,
        'overrideOperaDefault': value.overrideOperaDefault,
        'active': value.active,
        'iFCCreated': value.iFCCreated,
        'masterValue': value.masterValue,
    };
}

