/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type representing one XML Type Version for one Interface Setup
 * @export
 * @interface InterfaceSetupXMLVersionType
 */
export interface InterfaceSetupXMLVersionType {
    /**
     * XML Type for the current record
     * @type {string}
     * @memberof InterfaceSetupXMLVersionType
     */
    xMLType?: string;
    /**
     * Maximum Version
     * @type {string}
     * @memberof InterfaceSetupXMLVersionType
     */
    maximumVersion?: string;
    /**
     * Version of the current XML Type
     * @type {string}
     * @memberof InterfaceSetupXMLVersionType
     */
    version?: string;
}

/**
 * Check if a given object implements the InterfaceSetupXMLVersionType interface.
 */
export function instanceOfInterfaceSetupXMLVersionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceSetupXMLVersionTypeFromJSON(json: any): InterfaceSetupXMLVersionType {
    return InterfaceSetupXMLVersionTypeFromJSONTyped(json, false);
}

export function InterfaceSetupXMLVersionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceSetupXMLVersionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'xMLType': !exists(json, 'xMLType') ? undefined : json['xMLType'],
        'maximumVersion': !exists(json, 'maximumVersion') ? undefined : json['maximumVersion'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function InterfaceSetupXMLVersionTypeToJSON(value?: InterfaceSetupXMLVersionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'xMLType': value.xMLType,
        'maximumVersion': value.maximumVersion,
        'version': value.version,
    };
}

