/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExchangeStatReportCodeType } from './ExchangeStatReportCodeType';
import {
    ExchangeStatReportCodeTypeFromJSON,
    ExchangeStatReportCodeTypeFromJSONTyped,
    ExchangeStatReportCodeTypeToJSON,
} from './ExchangeStatReportCodeType';
import type { ExchangeStatType } from './ExchangeStatType';
import {
    ExchangeStatTypeFromJSON,
    ExchangeStatTypeFromJSONTyped,
    ExchangeStatTypeToJSON,
} from './ExchangeStatType';

/**
 * Concrete exchange interface report type.
 * @export
 * @interface ExchangeStatReportType
 */
export interface ExchangeStatReportType {
    /**
     * 
     * @type {Array<ExchangeStatType>}
     * @memberof ExchangeStatReportType
     */
    stat?: Array<ExchangeStatType>;
    /**
     * 
     * @type {ExchangeStatReportCodeType}
     * @memberof ExchangeStatReportType
     */
    reportCode?: ExchangeStatReportCodeType;
    /**
     * 
     * @type {Date}
     * @memberof ExchangeStatReportType
     */
    start?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ExchangeStatReportType
     */
    end?: Date;
}

/**
 * Check if a given object implements the ExchangeStatReportType interface.
 */
export function instanceOfExchangeStatReportType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExchangeStatReportTypeFromJSON(json: any): ExchangeStatReportType {
    return ExchangeStatReportTypeFromJSONTyped(json, false);
}

export function ExchangeStatReportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeStatReportType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stat': !exists(json, 'stat') ? undefined : ((json['stat'] as Array<any>).map(ExchangeStatTypeFromJSON)),
        'reportCode': !exists(json, 'reportCode') ? undefined : ExchangeStatReportCodeTypeFromJSON(json['reportCode']),
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
    };
}

export function ExchangeStatReportTypeToJSON(value?: ExchangeStatReportType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stat': value.stat === undefined ? undefined : ((value.stat as Array<any>).map(ExchangeStatTypeToJSON)),
        'reportCode': ExchangeStatReportCodeTypeToJSON(value.reportCode),
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0,10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0,10)),
    };
}

