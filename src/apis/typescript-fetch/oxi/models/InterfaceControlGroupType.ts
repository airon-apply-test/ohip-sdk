/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InterfaceControlType } from './InterfaceControlType';
import {
    InterfaceControlTypeFromJSON,
    InterfaceControlTypeFromJSONTyped,
    InterfaceControlTypeToJSON,
} from './InterfaceControlType';

/**
 * Type to group the different OXI Parameters/Settings.
 * @export
 * @interface InterfaceControlGroupType
 */
export interface InterfaceControlGroupType {
    /**
     * Group Name.
     * @type {string}
     * @memberof InterfaceControlGroupType
     */
    groupName?: string;
    /**
     * Group Display Name.
     * @type {string}
     * @memberof InterfaceControlGroupType
     */
    displayName?: string;
    /**
     * OXI Parameters/Settings.
     * @type {Array<InterfaceControlType>}
     * @memberof InterfaceControlGroupType
     */
    interfaceControls?: Array<InterfaceControlType>;
}

/**
 * Check if a given object implements the InterfaceControlGroupType interface.
 */
export function instanceOfInterfaceControlGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceControlGroupTypeFromJSON(json: any): InterfaceControlGroupType {
    return InterfaceControlGroupTypeFromJSONTyped(json, false);
}

export function InterfaceControlGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceControlGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'interfaceControls': !exists(json, 'interfaceControls') ? undefined : ((json['interfaceControls'] as Array<any>).map(InterfaceControlTypeFromJSON)),
    };
}

export function InterfaceControlGroupTypeToJSON(value?: InterfaceControlGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupName': value.groupName,
        'displayName': value.displayName,
        'interfaceControls': value.interfaceControls === undefined ? undefined : ((value.interfaceControls as Array<any>).map(InterfaceControlTypeToJSON)),
    };
}

