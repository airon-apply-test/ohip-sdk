/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Instructions which will be considered when creating the tour series from a source block. If this element is not sent, all the flags will be assumed to be ignored.
 * @export
 * @interface TourSeriesTypeTourInstructions
 */
export interface TourSeriesTypeTourInstructions {
    /**
     * When true, this will copy the source block's room allocation to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    rooms?: boolean;
    /**
     * When true, this will copy the source block's comments to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    blockComments?: boolean;
    /**
     * When true, this will copy the source block's events to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    events?: boolean;
    /**
     * When true, this will copy the source block's event comments to the events of the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    eventComments?: boolean;
    /**
     * When true, this will copy the source block's resources to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    resources?: boolean;
    /**
     * When true, this will copy the source block's resource comments to the resources of the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    resourceComments?: boolean;
    /**
     * When true, this will copy the source block's contract billing information to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    contractBilling?: boolean;
    /**
     * When true, this will copy the source block's group profile to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    groupProfile?: boolean;
    /**
     * When true, this will adjust the decision and followup date on the tour series blocks to the same offset as the source block.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    adjustDecisionAndFollowupDate?: boolean;
    /**
     * When true, this will copy the source block's complimentary information to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    complimentaryInfo?: boolean;
    /**
     * When true, this will copy the source block's rate codes to the tour series blocks.
     * @type {boolean}
     * @memberof TourSeriesTypeTourInstructions
     */
    rates?: boolean;
}

/**
 * Check if a given object implements the TourSeriesTypeTourInstructions interface.
 */
export function instanceOfTourSeriesTypeTourInstructions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TourSeriesTypeTourInstructionsFromJSON(json: any): TourSeriesTypeTourInstructions {
    return TourSeriesTypeTourInstructionsFromJSONTyped(json, false);
}

export function TourSeriesTypeTourInstructionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TourSeriesTypeTourInstructions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rooms': !exists(json, 'rooms') ? undefined : json['rooms'],
        'blockComments': !exists(json, 'blockComments') ? undefined : json['blockComments'],
        'events': !exists(json, 'events') ? undefined : json['events'],
        'eventComments': !exists(json, 'eventComments') ? undefined : json['eventComments'],
        'resources': !exists(json, 'resources') ? undefined : json['resources'],
        'resourceComments': !exists(json, 'resourceComments') ? undefined : json['resourceComments'],
        'contractBilling': !exists(json, 'contractBilling') ? undefined : json['contractBilling'],
        'groupProfile': !exists(json, 'groupProfile') ? undefined : json['groupProfile'],
        'adjustDecisionAndFollowupDate': !exists(json, 'adjustDecisionAndFollowupDate') ? undefined : json['adjustDecisionAndFollowupDate'],
        'complimentaryInfo': !exists(json, 'complimentaryInfo') ? undefined : json['complimentaryInfo'],
        'rates': !exists(json, 'rates') ? undefined : json['rates'],
    };
}

export function TourSeriesTypeTourInstructionsToJSON(value?: TourSeriesTypeTourInstructions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rooms': value.rooms,
        'blockComments': value.blockComments,
        'events': value.events,
        'eventComments': value.eventComments,
        'resources': value.resources,
        'resourceComments': value.resourceComments,
        'contractBilling': value.contractBilling,
        'groupProfile': value.groupProfile,
        'adjustDecisionAndFollowupDate': value.adjustDecisionAndFollowupDate,
        'complimentaryInfo': value.complimentaryInfo,
        'rates': value.rates,
    };
}

