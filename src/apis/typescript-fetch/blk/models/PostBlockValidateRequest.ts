/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockRateCodeValidationType } from './BlockRateCodeValidationType';
import {
    BlockRateCodeValidationTypeFromJSON,
    BlockRateCodeValidationTypeFromJSONTyped,
    BlockRateCodeValidationTypeToJSON,
} from './BlockRateCodeValidationType';
import type { BlocksType } from './BlocksType';
import {
    BlocksTypeFromJSON,
    BlocksTypeFromJSONTyped,
    BlocksTypeToJSON,
} from './BlocksType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PostBlockValidateRequest
 */
export interface PostBlockValidateRequest {
    /**
     * 
     * @type {BlocksType}
     * @memberof PostBlockValidateRequest
     */
    blocks?: BlocksType;
    /**
     * 
     * @type {BlockRateCodeValidationType}
     * @memberof PostBlockValidateRequest
     */
    blockRateCodeDetails?: BlockRateCodeValidationType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PostBlockValidateRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PostBlockValidateRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PostBlockValidateRequest interface.
 */
export function instanceOfPostBlockValidateRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostBlockValidateRequestFromJSON(json: any): PostBlockValidateRequest {
    return PostBlockValidateRequestFromJSONTyped(json, false);
}

export function PostBlockValidateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostBlockValidateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blocks': !exists(json, 'blocks') ? undefined : BlocksTypeFromJSON(json['blocks']),
        'blockRateCodeDetails': !exists(json, 'blockRateCodeDetails') ? undefined : BlockRateCodeValidationTypeFromJSON(json['blockRateCodeDetails']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PostBlockValidateRequestToJSON(value?: PostBlockValidateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blocks': BlocksTypeToJSON(value.blocks),
        'blockRateCodeDetails': BlockRateCodeValidationTypeToJSON(value.blockRateCodeDetails),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

