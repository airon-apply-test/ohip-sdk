/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';

/**
 * Summary of the check with line item charges posted to a guest folio.
 * @export
 * @interface BillingCheckChargesSummaryType
 */
export interface BillingCheckChargesSummaryType {
    /**
     * Indicates the check number.
     * @type {string}
     * @memberof BillingCheckChargesSummaryType
     */
    checkNumber?: string;
    /**
     * The date on which the transaction has its revenue effect.
     * @type {Date}
     * @memberof BillingCheckChargesSummaryType
     */
    revenueDate?: Date;
    /**
     * 
     * @type {ReservationId}
     * @memberof BillingCheckChargesSummaryType
     */
    reservationId?: ReservationId;
}

/**
 * Check if a given object implements the BillingCheckChargesSummaryType interface.
 */
export function instanceOfBillingCheckChargesSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingCheckChargesSummaryTypeFromJSON(json: any): BillingCheckChargesSummaryType {
    return BillingCheckChargesSummaryTypeFromJSONTyped(json, false);
}

export function BillingCheckChargesSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingCheckChargesSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checkNumber': !exists(json, 'checkNumber') ? undefined : json['checkNumber'],
        'revenueDate': !exists(json, 'revenueDate') ? undefined : (new Date(json['revenueDate'])),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
    };
}

export function BillingCheckChargesSummaryTypeToJSON(value?: BillingCheckChargesSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'checkNumber': value.checkNumber,
        'revenueDate': value.revenueDate === undefined ? undefined : (value.revenueDate.toISOString().substr(0,10)),
        'reservationId': ReservationIdToJSON(value.reservationId),
    };
}

