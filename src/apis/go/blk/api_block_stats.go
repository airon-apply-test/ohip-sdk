/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// BlockStatsApiService BlockStatsApi service
type BlockStatsApiService service

type BlockStatsApiDeleteBlockStatsServiceCacheRequest struct {
	ctx context.Context
	ApiService *BlockStatsApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) Authorization(authorization string) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) XAppKey(xAppKey string) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) XHotelid(xHotelid string) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) XExternalsystem(xExternalsystem string) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) AcceptLanguage(acceptLanguage string) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockStatsApiDeleteBlockStatsServiceCacheRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteBlockStatsServiceCacheExecute(r)
}

/*
DeleteBlockStatsServiceCache Delete Block Stat Service cache

Use this API to delete Block Stat Service cache. <p><strong>OperationId:</strong>deleteBlockStatsServiceCache</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockStatsApiDeleteBlockStatsServiceCacheRequest
*/
func (a *BlockStatsApiService) DeleteBlockStatsServiceCache(ctx context.Context) BlockStatsApiDeleteBlockStatsServiceCacheRequest {
	return BlockStatsApiDeleteBlockStatsServiceCacheRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockStatsApiService) DeleteBlockStatsServiceCacheExecute(r BlockStatsApiDeleteBlockStatsServiceCacheRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockStatsApiService.DeleteBlockStatsServiceCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/blockStats/cache"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockStatsApiGetBlockStatsRequest struct {
	ctx context.Context
	ApiService *BlockStatsApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	reportCode *[]string
	reportEndDate *[]string
	reportStartDate *[]string
	statisticalCode *[]string
	reportParametersParameterName *[]string
	reportParametersParameterValue *[]string
	blockOwnersCode *[]string
	blockStatusCode *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockStatsApiGetBlockStatsRequest) Authorization(authorization string) BlockStatsApiGetBlockStatsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r BlockStatsApiGetBlockStatsRequest) XAppKey(xAppKey string) BlockStatsApiGetBlockStatsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockStatsApiGetBlockStatsRequest) XHotelid(xHotelid string) BlockStatsApiGetBlockStatsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Property context of the request.
func (r BlockStatsApiGetBlockStatsRequest) HotelId(hotelId string) BlockStatsApiGetBlockStatsRequest {
	r.hotelId = &hotelId
	return r
}

// Supported Housekeeping report codes.
func (r BlockStatsApiGetBlockStatsRequest) ReportCode(reportCode []string) BlockStatsApiGetBlockStatsRequest {
	r.reportCode = &reportCode
	return r
}

// End date of the report.
func (r BlockStatsApiGetBlockStatsRequest) ReportEndDate(reportEndDate []string) BlockStatsApiGetBlockStatsRequest {
	r.reportEndDate = &reportEndDate
	return r
}

// Start date of the report.
func (r BlockStatsApiGetBlockStatsRequest) ReportStartDate(reportStartDate []string) BlockStatsApiGetBlockStatsRequest {
	r.reportStartDate = &reportStartDate
	return r
}

// Supported housekeeping statistical codes.
func (r BlockStatsApiGetBlockStatsRequest) StatisticalCode(statisticalCode []string) BlockStatsApiGetBlockStatsRequest {
	r.statisticalCode = &statisticalCode
	return r
}

// Name of the parameter.
func (r BlockStatsApiGetBlockStatsRequest) ReportParametersParameterName(reportParametersParameterName []string) BlockStatsApiGetBlockStatsRequest {
	r.reportParametersParameterName = &reportParametersParameterName
	return r
}

// Value of the parameter.
func (r BlockStatsApiGetBlockStatsRequest) ReportParametersParameterValue(reportParametersParameterValue []string) BlockStatsApiGetBlockStatsRequest {
	r.reportParametersParameterValue = &reportParametersParameterValue
	return r
}

// Supported Housekeeping report codes.
func (r BlockStatsApiGetBlockStatsRequest) BlockOwnersCode(blockOwnersCode []string) BlockStatsApiGetBlockStatsRequest {
	r.blockOwnersCode = &blockOwnersCode
	return r
}

// Supported Housekeeping report codes.
func (r BlockStatsApiGetBlockStatsRequest) BlockStatusCode(blockStatusCode []string) BlockStatsApiGetBlockStatsRequest {
	r.blockStatusCode = &blockStatusCode
	return r
}

// External system code.
func (r BlockStatsApiGetBlockStatsRequest) XExternalsystem(xExternalsystem string) BlockStatsApiGetBlockStatsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockStatsApiGetBlockStatsRequest) AcceptLanguage(acceptLanguage string) BlockStatsApiGetBlockStatsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockStatsApiGetBlockStatsRequest) Execute() (*BlockStats, *http.Response, error) {
	return r.ApiService.GetBlockStatsExecute(r)
}

/*
GetBlockStats Get Block statistics

This API retrieves block statistics. <p><strong>OperationId:</strong>getBlockStats</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockStatsApiGetBlockStatsRequest
*/
func (a *BlockStatsApiService) GetBlockStats(ctx context.Context) BlockStatsApiGetBlockStatsRequest {
	return BlockStatsApiGetBlockStatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlockStats
func (a *BlockStatsApiService) GetBlockStatsExecute(r BlockStatsApiGetBlockStatsRequest) (*BlockStats, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockStats
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockStatsApiService.GetBlockStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blocks/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.reportCode != nil {
		t := *r.reportCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportCode", t, "multi")
		}
	}
	if r.reportEndDate != nil {
		t := *r.reportEndDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportEndDate", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportEndDate", t, "multi")
		}
	}
	if r.reportStartDate != nil {
		t := *r.reportStartDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportStartDate", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportStartDate", t, "multi")
		}
	}
	if r.statisticalCode != nil {
		t := *r.statisticalCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statisticalCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statisticalCode", t, "multi")
		}
	}
	if r.reportParametersParameterName != nil {
		t := *r.reportParametersParameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportParametersParameterName", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportParametersParameterName", t, "multi")
		}
	}
	if r.reportParametersParameterValue != nil {
		t := *r.reportParametersParameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportParametersParameterValue", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportParametersParameterValue", t, "multi")
		}
	}
	if r.blockOwnersCode != nil {
		t := *r.blockOwnersCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwnersCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwnersCode", t, "multi")
		}
	}
	if r.blockStatusCode != nil {
		t := *r.blockStatusCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCode", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockStatsApiPingBlockStatsServiceRequest struct {
	ctx context.Context
	ApiService *BlockStatsApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockStatsApiPingBlockStatsServiceRequest) Authorization(authorization string) BlockStatsApiPingBlockStatsServiceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r BlockStatsApiPingBlockStatsServiceRequest) XAppKey(xAppKey string) BlockStatsApiPingBlockStatsServiceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockStatsApiPingBlockStatsServiceRequest) XHotelid(xHotelid string) BlockStatsApiPingBlockStatsServiceRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockStatsApiPingBlockStatsServiceRequest) XExternalsystem(xExternalsystem string) BlockStatsApiPingBlockStatsServiceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockStatsApiPingBlockStatsServiceRequest) AcceptLanguage(acceptLanguage string) BlockStatsApiPingBlockStatsServiceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockStatsApiPingBlockStatsServiceRequest) Execute() (*OperaVersion, *http.Response, error) {
	return r.ApiService.PingBlockStatsServiceExecute(r)
}

/*
PingBlockStatsService Retrieve/Ping  Block stats service

Use this API to retrieve block stats service status. <p><strong>OperationId:</strong>pingBlockStatsService</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockStatsApiPingBlockStatsServiceRequest
*/
func (a *BlockStatsApiService) PingBlockStatsService(ctx context.Context) BlockStatsApiPingBlockStatsServiceRequest {
	return BlockStatsApiPingBlockStatsServiceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OperaVersion
func (a *BlockStatsApiService) PingBlockStatsServiceExecute(r BlockStatsApiPingBlockStatsServiceRequest) (*OperaVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperaVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockStatsApiService.PingBlockStatsService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/blockStats/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
