/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatisticsType Type of statistic for which its statistics information by date and room type will be populated.
type StatisticsType string

// List of statisticsType
const (
	CONTRACT StatisticsType = "Contract"
	INITIAL StatisticsType = "Initial"
	ACTUAL StatisticsType = "Actual"
	PICKUP StatisticsType = "Pickup"
	AVAILABLE StatisticsType = "Available"
	CHANGE StatisticsType = "Change"
	RATES StatisticsType = "Rates"
	TOTALAVAILABLE StatisticsType = "Totalavailable"
	TENTATIVERESERVATIONS StatisticsType = "Tentativereservations"
	PICKUPPERSONS StatisticsType = "Pickuppersons"
	ROOMREVENUE StatisticsType = "Roomrevenue"
	TOTALREVENUE StatisticsType = "Totalrevenue"
	AVGROOMRATE StatisticsType = "Avgroomrate"
)

// All allowed values of StatisticsType enum
var AllowedStatisticsTypeEnumValues = []StatisticsType{
	"Contract",
	"Initial",
	"Actual",
	"Pickup",
	"Available",
	"Change",
	"Rates",
	"Totalavailable",
	"Tentativereservations",
	"Pickuppersons",
	"Roomrevenue",
	"Totalrevenue",
	"Avgroomrate",
}

func (v *StatisticsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatisticsType(value)
	for _, existing := range AllowedStatisticsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatisticsType", value)
}

// NewStatisticsTypeFromValue returns a pointer to a valid StatisticsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatisticsTypeFromValue(v string) (*StatisticsType, error) {
	ev := StatisticsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatisticsType: valid values are %v", v, AllowedStatisticsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatisticsType) IsValid() bool {
	for _, existing := range AllowedStatisticsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to statisticsType value
func (v StatisticsType) Ptr() *StatisticsType {
	return &v
}

type NullableStatisticsType struct {
	value *StatisticsType
	isSet bool
}

func (v NullableStatisticsType) Get() *StatisticsType {
	return v.value
}

func (v *NullableStatisticsType) Set(val *StatisticsType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsType(val *StatisticsType) *NullableStatisticsType {
	return &NullableStatisticsType{value: val, isSet: true}
}

func (v NullableStatisticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

