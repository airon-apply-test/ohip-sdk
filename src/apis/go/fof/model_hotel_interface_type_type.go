/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 21.5.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HotelInterfaceTypeType XML Posting Interface
type HotelInterfaceTypeType string

// List of hotelInterfaceTypeType
const (
	BMS HotelInterfaceTypeType = "Bms"
	CAS HotelInterfaceTypeType = "Cas"
	CCW HotelInterfaceTypeType = "Ccw"
	DLS HotelInterfaceTypeType = "Dls"
	EFT HotelInterfaceTypeType = "Eft"
	EXP HotelInterfaceTypeType = "Exp"
	MAK HotelInterfaceTypeType = "Mak"
	MBS HotelInterfaceTypeType = "Mbs"
	MSC HotelInterfaceTypeType = "Msc"
	PBX HotelInterfaceTypeType = "Pbx"
	POS HotelInterfaceTypeType = "Pos"
	SVS HotelInterfaceTypeType = "Svs"
	TIK HotelInterfaceTypeType = "Tik"
	VID HotelInterfaceTypeType = "Vid"
	VMS HotelInterfaceTypeType = "Vms"
	WWW HotelInterfaceTypeType = "Www"
	XML HotelInterfaceTypeType = "Xml"
)

// All allowed values of HotelInterfaceTypeType enum
var AllowedHotelInterfaceTypeTypeEnumValues = []HotelInterfaceTypeType{
	"Bms",
	"Cas",
	"Ccw",
	"Dls",
	"Eft",
	"Exp",
	"Mak",
	"Mbs",
	"Msc",
	"Pbx",
	"Pos",
	"Svs",
	"Tik",
	"Vid",
	"Vms",
	"Www",
	"Xml",
}

func (v *HotelInterfaceTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HotelInterfaceTypeType(value)
	for _, existing := range AllowedHotelInterfaceTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HotelInterfaceTypeType", value)
}

// NewHotelInterfaceTypeTypeFromValue returns a pointer to a valid HotelInterfaceTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHotelInterfaceTypeTypeFromValue(v string) (*HotelInterfaceTypeType, error) {
	ev := HotelInterfaceTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HotelInterfaceTypeType: valid values are %v", v, AllowedHotelInterfaceTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HotelInterfaceTypeType) IsValid() bool {
	for _, existing := range AllowedHotelInterfaceTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hotelInterfaceTypeType value
func (v HotelInterfaceTypeType) Ptr() *HotelInterfaceTypeType {
	return &v
}

type NullableHotelInterfaceTypeType struct {
	value *HotelInterfaceTypeType
	isSet bool
}

func (v NullableHotelInterfaceTypeType) Get() *HotelInterfaceTypeType {
	return v.value
}

func (v *NullableHotelInterfaceTypeType) Set(val *HotelInterfaceTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelInterfaceTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelInterfaceTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelInterfaceTypeType(val *HotelInterfaceTypeType) *NullableHotelInterfaceTypeType {
	return &NullableHotelInterfaceTypeType{value: val, isSet: true}
}

func (v NullableHotelInterfaceTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelInterfaceTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

