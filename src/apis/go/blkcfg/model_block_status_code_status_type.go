/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BlockStatusCodeStatusType Simple type for block status code's room status type and catering status type. Valid status values are Waitlist,Cancel,Lost,Refused,Actual,Inquiry,NonDeductInv,DeductInv and Referral.
type BlockStatusCodeStatusType string

// List of blockStatusCodeStatusType
const (
	WAITLIST BlockStatusCodeStatusType = "Waitlist"
	CANCEL BlockStatusCodeStatusType = "Cancel"
	LOST BlockStatusCodeStatusType = "Lost"
	REFUSED BlockStatusCodeStatusType = "Refused"
	ACTUAL BlockStatusCodeStatusType = "Actual"
	INQUIRY BlockStatusCodeStatusType = "Inquiry"
	NON_DEDUCT_INV BlockStatusCodeStatusType = "NonDeductInv"
	DEDUCT_INV BlockStatusCodeStatusType = "DeductInv"
	REFERRAL BlockStatusCodeStatusType = "Referral"
)

// All allowed values of BlockStatusCodeStatusType enum
var AllowedBlockStatusCodeStatusTypeEnumValues = []BlockStatusCodeStatusType{
	"Waitlist",
	"Cancel",
	"Lost",
	"Refused",
	"Actual",
	"Inquiry",
	"NonDeductInv",
	"DeductInv",
	"Referral",
}

func (v *BlockStatusCodeStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockStatusCodeStatusType(value)
	for _, existing := range AllowedBlockStatusCodeStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockStatusCodeStatusType", value)
}

// NewBlockStatusCodeStatusTypeFromValue returns a pointer to a valid BlockStatusCodeStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockStatusCodeStatusTypeFromValue(v string) (*BlockStatusCodeStatusType, error) {
	ev := BlockStatusCodeStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockStatusCodeStatusType: valid values are %v", v, AllowedBlockStatusCodeStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockStatusCodeStatusType) IsValid() bool {
	for _, existing := range AllowedBlockStatusCodeStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockStatusCodeStatusType value
func (v BlockStatusCodeStatusType) Ptr() *BlockStatusCodeStatusType {
	return &v
}

type NullableBlockStatusCodeStatusType struct {
	value *BlockStatusCodeStatusType
	isSet bool
}

func (v NullableBlockStatusCodeStatusType) Get() *BlockStatusCodeStatusType {
	return v.value
}

func (v *NullableBlockStatusCodeStatusType) Set(val *BlockStatusCodeStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatusCodeStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatusCodeStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatusCodeStatusType(val *BlockStatusCodeStatusType) *NullableBlockStatusCodeStatusType {
	return &NullableBlockStatusCodeStatusType{value: val, isSet: true}
}

func (v NullableBlockStatusCodeStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatusCodeStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

