/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CriterionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CriterionType{}

// CriterionType Type that represents Criteria such as match attributes, points and Active Flag for Profile Match Rule.
type CriterionType struct {
	// Weighing points for the given match rule.
	Points *float32 `json:"points,omitempty"`
	// The activation flag for the match rule criteria.
	Active *bool `json:"active,omitempty"`
	// Rules defining the match Attribute.
	MatchAttributes []MatchAttributeTypeType `json:"matchAttributes,omitempty"`
}

// NewCriterionType instantiates a new CriterionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCriterionType() *CriterionType {
	this := CriterionType{}
	return &this
}

// NewCriterionTypeWithDefaults instantiates a new CriterionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCriterionTypeWithDefaults() *CriterionType {
	this := CriterionType{}
	return &this
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *CriterionType) GetPoints() float32 {
	if o == nil || IsNil(o.Points) {
		var ret float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriterionType) GetPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *CriterionType) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float32 and assigns it to the Points field.
func (o *CriterionType) SetPoints(v float32) {
	o.Points = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CriterionType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriterionType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CriterionType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CriterionType) SetActive(v bool) {
	o.Active = &v
}

// GetMatchAttributes returns the MatchAttributes field value if set, zero value otherwise.
func (o *CriterionType) GetMatchAttributes() []MatchAttributeTypeType {
	if o == nil || IsNil(o.MatchAttributes) {
		var ret []MatchAttributeTypeType
		return ret
	}
	return o.MatchAttributes
}

// GetMatchAttributesOk returns a tuple with the MatchAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriterionType) GetMatchAttributesOk() ([]MatchAttributeTypeType, bool) {
	if o == nil || IsNil(o.MatchAttributes) {
		return nil, false
	}
	return o.MatchAttributes, true
}

// HasMatchAttributes returns a boolean if a field has been set.
func (o *CriterionType) HasMatchAttributes() bool {
	if o != nil && !IsNil(o.MatchAttributes) {
		return true
	}

	return false
}

// SetMatchAttributes gets a reference to the given []MatchAttributeTypeType and assigns it to the MatchAttributes field.
func (o *CriterionType) SetMatchAttributes(v []MatchAttributeTypeType) {
	o.MatchAttributes = v
}

func (o CriterionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CriterionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.MatchAttributes) {
		toSerialize["matchAttributes"] = o.MatchAttributes
	}
	return toSerialize, nil
}

type NullableCriterionType struct {
	value *CriterionType
	isSet bool
}

func (v NullableCriterionType) Get() *CriterionType {
	return v.value
}

func (v *NullableCriterionType) Set(val *CriterionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCriterionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCriterionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriterionType(val *CriterionType) *NullableCriterionType {
	return &NullableCriterionType{value: val, isSet: true}
}

func (v NullableCriterionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriterionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


