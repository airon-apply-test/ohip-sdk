/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IntegrationMessageAttachmentsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationMessageAttachmentsType{}

// IntegrationMessageAttachmentsType This type holds additional details related to inbound messages like XML and External message
type IntegrationMessageAttachmentsType struct {
	// XML message details
	XMLMsg *string `json:"xMLMsg,omitempty"`
	// Orignal message from external systems(From the one's that don't create XML)
	ExtMsg *string `json:"extMsg,omitempty"`
}

// NewIntegrationMessageAttachmentsType instantiates a new IntegrationMessageAttachmentsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationMessageAttachmentsType() *IntegrationMessageAttachmentsType {
	this := IntegrationMessageAttachmentsType{}
	return &this
}

// NewIntegrationMessageAttachmentsTypeWithDefaults instantiates a new IntegrationMessageAttachmentsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationMessageAttachmentsTypeWithDefaults() *IntegrationMessageAttachmentsType {
	this := IntegrationMessageAttachmentsType{}
	return &this
}

// GetXMLMsg returns the XMLMsg field value if set, zero value otherwise.
func (o *IntegrationMessageAttachmentsType) GetXMLMsg() string {
	if o == nil || IsNil(o.XMLMsg) {
		var ret string
		return ret
	}
	return *o.XMLMsg
}

// GetXMLMsgOk returns a tuple with the XMLMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMessageAttachmentsType) GetXMLMsgOk() (*string, bool) {
	if o == nil || IsNil(o.XMLMsg) {
		return nil, false
	}
	return o.XMLMsg, true
}

// HasXMLMsg returns a boolean if a field has been set.
func (o *IntegrationMessageAttachmentsType) HasXMLMsg() bool {
	if o != nil && !IsNil(o.XMLMsg) {
		return true
	}

	return false
}

// SetXMLMsg gets a reference to the given string and assigns it to the XMLMsg field.
func (o *IntegrationMessageAttachmentsType) SetXMLMsg(v string) {
	o.XMLMsg = &v
}

// GetExtMsg returns the ExtMsg field value if set, zero value otherwise.
func (o *IntegrationMessageAttachmentsType) GetExtMsg() string {
	if o == nil || IsNil(o.ExtMsg) {
		var ret string
		return ret
	}
	return *o.ExtMsg
}

// GetExtMsgOk returns a tuple with the ExtMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMessageAttachmentsType) GetExtMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ExtMsg) {
		return nil, false
	}
	return o.ExtMsg, true
}

// HasExtMsg returns a boolean if a field has been set.
func (o *IntegrationMessageAttachmentsType) HasExtMsg() bool {
	if o != nil && !IsNil(o.ExtMsg) {
		return true
	}

	return false
}

// SetExtMsg gets a reference to the given string and assigns it to the ExtMsg field.
func (o *IntegrationMessageAttachmentsType) SetExtMsg(v string) {
	o.ExtMsg = &v
}

func (o IntegrationMessageAttachmentsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationMessageAttachmentsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.XMLMsg) {
		toSerialize["xMLMsg"] = o.XMLMsg
	}
	if !IsNil(o.ExtMsg) {
		toSerialize["extMsg"] = o.ExtMsg
	}
	return toSerialize, nil
}

type NullableIntegrationMessageAttachmentsType struct {
	value *IntegrationMessageAttachmentsType
	isSet bool
}

func (v NullableIntegrationMessageAttachmentsType) Get() *IntegrationMessageAttachmentsType {
	return v.value
}

func (v *NullableIntegrationMessageAttachmentsType) Set(val *IntegrationMessageAttachmentsType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationMessageAttachmentsType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationMessageAttachmentsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationMessageAttachmentsType(val *IntegrationMessageAttachmentsType) *NullableIntegrationMessageAttachmentsType {
	return &NullableIntegrationMessageAttachmentsType{value: val, isSet: true}
}

func (v NullableIntegrationMessageAttachmentsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationMessageAttachmentsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


