/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
	"fmt"
)

// InterfaceStatusProcessTypeType Processor use Database Job.
type InterfaceStatusProcessTypeType string

// List of interfaceStatusProcessTypeType
const (
	INTERFACESTATUSPROCESSTYPETYPE_NT_SERVICE InterfaceStatusProcessTypeType = "NtService"
	INTERFACESTATUSPROCESSTYPETYPE_DBMS_JOB InterfaceStatusProcessTypeType = "DbmsJob"
)

// All allowed values of InterfaceStatusProcessTypeType enum
var AllowedInterfaceStatusProcessTypeTypeEnumValues = []InterfaceStatusProcessTypeType{
	"NtService",
	"DbmsJob",
}

func (v *InterfaceStatusProcessTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceStatusProcessTypeType(value)
	for _, existing := range AllowedInterfaceStatusProcessTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceStatusProcessTypeType", value)
}

// NewInterfaceStatusProcessTypeTypeFromValue returns a pointer to a valid InterfaceStatusProcessTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceStatusProcessTypeTypeFromValue(v string) (*InterfaceStatusProcessTypeType, error) {
	ev := InterfaceStatusProcessTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceStatusProcessTypeType: valid values are %v", v, AllowedInterfaceStatusProcessTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceStatusProcessTypeType) IsValid() bool {
	for _, existing := range AllowedInterfaceStatusProcessTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to interfaceStatusProcessTypeType value
func (v InterfaceStatusProcessTypeType) Ptr() *InterfaceStatusProcessTypeType {
	return &v
}

type NullableInterfaceStatusProcessTypeType struct {
	value *InterfaceStatusProcessTypeType
	isSet bool
}

func (v NullableInterfaceStatusProcessTypeType) Get() *InterfaceStatusProcessTypeType {
	return v.value
}

func (v *NullableInterfaceStatusProcessTypeType) Set(val *InterfaceStatusProcessTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatusProcessTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatusProcessTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatusProcessTypeType(val *InterfaceStatusProcessTypeType) *NullableInterfaceStatusProcessTypeType {
	return &NullableInterfaceStatusProcessTypeType{value: val, isSet: true}
}

func (v NullableInterfaceStatusProcessTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatusProcessTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

