/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemType{}

// ItemType struct for ItemType
type ItemType struct {
	IDs []IdType `json:"iDs,omitempty"`
	// Collection of generic Name-Value-Pair parameters.
	Flexfields []ParameterType `json:"flexfields,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Sequence *string `json:"sequence,omitempty"`
	ParentCode *string `json:"parentCode,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	Color *string `json:"color,omitempty"`
	ShortDescription *string `json:"shortDescription,omitempty"`
	ImageURL *string `json:"imageURL,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewItemType instantiates a new ItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemType() *ItemType {
	this := ItemType{}
	return &this
}

// NewItemTypeWithDefaults instantiates a new ItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemTypeWithDefaults() *ItemType {
	this := ItemType{}
	return &this
}

// GetIDs returns the IDs field value if set, zero value otherwise.
func (o *ItemType) GetIDs() []IdType {
	if o == nil || IsNil(o.IDs) {
		var ret []IdType
		return ret
	}
	return o.IDs
}

// GetIDsOk returns a tuple with the IDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetIDsOk() ([]IdType, bool) {
	if o == nil || IsNil(o.IDs) {
		return nil, false
	}
	return o.IDs, true
}

// HasIDs returns a boolean if a field has been set.
func (o *ItemType) HasIDs() bool {
	if o != nil && !IsNil(o.IDs) {
		return true
	}

	return false
}

// SetIDs gets a reference to the given []IdType and assigns it to the IDs field.
func (o *ItemType) SetIDs(v []IdType) {
	o.IDs = v
}

// GetFlexfields returns the Flexfields field value if set, zero value otherwise.
func (o *ItemType) GetFlexfields() []ParameterType {
	if o == nil || IsNil(o.Flexfields) {
		var ret []ParameterType
		return ret
	}
	return o.Flexfields
}

// GetFlexfieldsOk returns a tuple with the Flexfields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetFlexfieldsOk() ([]ParameterType, bool) {
	if o == nil || IsNil(o.Flexfields) {
		return nil, false
	}
	return o.Flexfields, true
}

// HasFlexfields returns a boolean if a field has been set.
func (o *ItemType) HasFlexfields() bool {
	if o != nil && !IsNil(o.Flexfields) {
		return true
	}

	return false
}

// SetFlexfields gets a reference to the given []ParameterType and assigns it to the Flexfields field.
func (o *ItemType) SetFlexfields(v []ParameterType) {
	o.Flexfields = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ItemType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ItemType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ItemType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ItemType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ItemType) SetDescription(v string) {
	o.Description = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ItemType) GetSequence() string {
	if o == nil || IsNil(o.Sequence) {
		var ret string
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetSequenceOk() (*string, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ItemType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given string and assigns it to the Sequence field.
func (o *ItemType) SetSequence(v string) {
	o.Sequence = &v
}

// GetParentCode returns the ParentCode field value if set, zero value otherwise.
func (o *ItemType) GetParentCode() string {
	if o == nil || IsNil(o.ParentCode) {
		var ret string
		return ret
	}
	return *o.ParentCode
}

// GetParentCodeOk returns a tuple with the ParentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetParentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ParentCode) {
		return nil, false
	}
	return o.ParentCode, true
}

// HasParentCode returns a boolean if a field has been set.
func (o *ItemType) HasParentCode() bool {
	if o != nil && !IsNil(o.ParentCode) {
		return true
	}

	return false
}

// SetParentCode gets a reference to the given string and assigns it to the ParentCode field.
func (o *ItemType) SetParentCode(v string) {
	o.ParentCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ItemType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ItemType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ItemType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ItemType) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ItemType) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ItemType) SetColor(v string) {
	o.Color = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ItemType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ItemType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ItemType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetImageURL returns the ImageURL field value if set, zero value otherwise.
func (o *ItemType) GetImageURL() string {
	if o == nil || IsNil(o.ImageURL) {
		var ret string
		return ret
	}
	return *o.ImageURL
}

// GetImageURLOk returns a tuple with the ImageURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetImageURLOk() (*string, bool) {
	if o == nil || IsNil(o.ImageURL) {
		return nil, false
	}
	return o.ImageURL, true
}

// HasImageURL returns a boolean if a field has been set.
func (o *ItemType) HasImageURL() bool {
	if o != nil && !IsNil(o.ImageURL) {
		return true
	}

	return false
}

// SetImageURL gets a reference to the given string and assigns it to the ImageURL field.
func (o *ItemType) SetImageURL(v string) {
	o.ImageURL = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ItemType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ItemType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ItemType) SetActive(v bool) {
	o.Active = &v
}

func (o ItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IDs) {
		toSerialize["iDs"] = o.IDs
	}
	if !IsNil(o.Flexfields) {
		toSerialize["flexfields"] = o.Flexfields
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.ParentCode) {
		toSerialize["parentCode"] = o.ParentCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.ImageURL) {
		toSerialize["imageURL"] = o.ImageURL
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableItemType struct {
	value *ItemType
	isSet bool
}

func (v NullableItemType) Get() *ItemType {
	return v.value
}

func (v *NullableItemType) Set(val *ItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemType(val *ItemType) *NullableItemType {
	return &NullableItemType{value: val, isSet: true}
}

func (v NullableItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


