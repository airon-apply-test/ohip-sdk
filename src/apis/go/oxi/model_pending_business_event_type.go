/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PendingBusinessEventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingBusinessEventType{}

// PendingBusinessEventType Business event queue status common details
type PendingBusinessEventType struct {
	// Module name where the change occurred
	Module *string `json:"module,omitempty"`
	// Name of the external system that the message was created for
	ExternalSystem *string `json:"externalSystem,omitempty"`
	// Type of action that the outbound message is pertaining to
	ActionType *string `json:"actionType,omitempty"`
	// Action Id number that is automatically assigned to the action when it happened
	ActionId *string `json:"actionId,omitempty"`
	// Date when the business event change occurred
	EnquiryDate *time.Time `json:"enquiryDate,omitempty"`
	// Hotel Code associated with business event
	HotelId *string `json:"hotelId,omitempty"`
	// Date and time that the change happened
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// Alpha-numeric key to uniquely identify the data applicable to that particular action
	PrimaryKey *string `json:"primaryKey,omitempty"`
	// Name of the external system that the message was created for and needs to picked up by.
	Consumer *string `json:"consumer,omitempty"`
}

// NewPendingBusinessEventType instantiates a new PendingBusinessEventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingBusinessEventType() *PendingBusinessEventType {
	this := PendingBusinessEventType{}
	return &this
}

// NewPendingBusinessEventTypeWithDefaults instantiates a new PendingBusinessEventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingBusinessEventTypeWithDefaults() *PendingBusinessEventType {
	this := PendingBusinessEventType{}
	return &this
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetModule() string {
	if o == nil || IsNil(o.Module) {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetModuleOk() (*string, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *PendingBusinessEventType) SetModule(v string) {
	o.Module = &v
}

// GetExternalSystem returns the ExternalSystem field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetExternalSystem() string {
	if o == nil || IsNil(o.ExternalSystem) {
		var ret string
		return ret
	}
	return *o.ExternalSystem
}

// GetExternalSystemOk returns a tuple with the ExternalSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetExternalSystemOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSystem) {
		return nil, false
	}
	return o.ExternalSystem, true
}

// HasExternalSystem returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasExternalSystem() bool {
	if o != nil && !IsNil(o.ExternalSystem) {
		return true
	}

	return false
}

// SetExternalSystem gets a reference to the given string and assigns it to the ExternalSystem field.
func (o *PendingBusinessEventType) SetExternalSystem(v string) {
	o.ExternalSystem = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *PendingBusinessEventType) SetActionType(v string) {
	o.ActionType = &v
}

// GetActionId returns the ActionId field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetActionId() string {
	if o == nil || IsNil(o.ActionId) {
		var ret string
		return ret
	}
	return *o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetActionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActionId) {
		return nil, false
	}
	return o.ActionId, true
}

// HasActionId returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasActionId() bool {
	if o != nil && !IsNil(o.ActionId) {
		return true
	}

	return false
}

// SetActionId gets a reference to the given string and assigns it to the ActionId field.
func (o *PendingBusinessEventType) SetActionId(v string) {
	o.ActionId = &v
}

// GetEnquiryDate returns the EnquiryDate field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetEnquiryDate() time.Time {
	if o == nil || IsNil(o.EnquiryDate) {
		var ret time.Time
		return ret
	}
	return *o.EnquiryDate
}

// GetEnquiryDateOk returns a tuple with the EnquiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetEnquiryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EnquiryDate) {
		return nil, false
	}
	return o.EnquiryDate, true
}

// HasEnquiryDate returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasEnquiryDate() bool {
	if o != nil && !IsNil(o.EnquiryDate) {
		return true
	}

	return false
}

// SetEnquiryDate gets a reference to the given time.Time and assigns it to the EnquiryDate field.
func (o *PendingBusinessEventType) SetEnquiryDate(v time.Time) {
	o.EnquiryDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PendingBusinessEventType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *PendingBusinessEventType) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetPrimaryKey returns the PrimaryKey field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetPrimaryKey() string {
	if o == nil || IsNil(o.PrimaryKey) {
		var ret string
		return ret
	}
	return *o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetPrimaryKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryKey) {
		return nil, false
	}
	return o.PrimaryKey, true
}

// HasPrimaryKey returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasPrimaryKey() bool {
	if o != nil && !IsNil(o.PrimaryKey) {
		return true
	}

	return false
}

// SetPrimaryKey gets a reference to the given string and assigns it to the PrimaryKey field.
func (o *PendingBusinessEventType) SetPrimaryKey(v string) {
	o.PrimaryKey = &v
}

// GetConsumer returns the Consumer field value if set, zero value otherwise.
func (o *PendingBusinessEventType) GetConsumer() string {
	if o == nil || IsNil(o.Consumer) {
		var ret string
		return ret
	}
	return *o.Consumer
}

// GetConsumerOk returns a tuple with the Consumer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingBusinessEventType) GetConsumerOk() (*string, bool) {
	if o == nil || IsNil(o.Consumer) {
		return nil, false
	}
	return o.Consumer, true
}

// HasConsumer returns a boolean if a field has been set.
func (o *PendingBusinessEventType) HasConsumer() bool {
	if o != nil && !IsNil(o.Consumer) {
		return true
	}

	return false
}

// SetConsumer gets a reference to the given string and assigns it to the Consumer field.
func (o *PendingBusinessEventType) SetConsumer(v string) {
	o.Consumer = &v
}

func (o PendingBusinessEventType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingBusinessEventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !IsNil(o.ExternalSystem) {
		toSerialize["externalSystem"] = o.ExternalSystem
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.ActionId) {
		toSerialize["actionId"] = o.ActionId
	}
	if !IsNil(o.EnquiryDate) {
		toSerialize["enquiryDate"] = o.EnquiryDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.PrimaryKey) {
		toSerialize["primaryKey"] = o.PrimaryKey
	}
	if !IsNil(o.Consumer) {
		toSerialize["consumer"] = o.Consumer
	}
	return toSerialize, nil
}

type NullablePendingBusinessEventType struct {
	value *PendingBusinessEventType
	isSet bool
}

func (v NullablePendingBusinessEventType) Get() *PendingBusinessEventType {
	return v.value
}

func (v *NullablePendingBusinessEventType) Set(val *PendingBusinessEventType) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingBusinessEventType) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingBusinessEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingBusinessEventType(val *PendingBusinessEventType) *NullablePendingBusinessEventType {
	return &NullablePendingBusinessEventType{value: val, isSet: true}
}

func (v NullablePendingBusinessEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingBusinessEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


