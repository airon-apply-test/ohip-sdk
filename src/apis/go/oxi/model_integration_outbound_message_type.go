/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
	"time"
)

// checks if the IntegrationOutboundMessageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationOutboundMessageType{}

// IntegrationOutboundMessageType Elements that uniquely identifies inbound message
type IntegrationOutboundMessageType struct {
	MessageId *UniqueIDType `json:"messageId,omitempty"`
	// TimeStamp of enqueue of message in OXI Monitoring tables (Inbound/Outbound).
	EnqueueTime *time.Time `json:"enqueueTime,omitempty"`
	// TimeStamp of dequeue of message from OXI Monitoring tables (Inbound/Outbound).
	DequeueTime *time.Time `json:"dequeueTime,omitempty"`
	// The interface this message was created for
	Interface *string `json:"interface,omitempty"`
	// This identifies the kind of message sent (e.g., reservation, profile, rate, block, rate restriction, inventory, and result)
	MessageType *string `json:"messageType,omitempty"`
	// Property this message was sent from.
	HotelId *string `json:"hotelId,omitempty"`
	// Status of the transmitted message.
	MessageStatus *string `json:"messageStatus,omitempty"`
	// Flag that tells whether the message is marked as reviewed or not
	Reviewed *bool `json:"reviewed,omitempty"`
	// Integration message reference
	MessageReference *string `json:"messageReference,omitempty"`
	// Information that was obtained in a message such as guest last/first name from a reservation message or block code from a block message.
	MessagePrimayInfo *string `json:"messagePrimayInfo,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Notices []WarningType `json:"notices,omitempty"`
	// Flag that tells whether the message has attachments or not
	AttachmentExists *bool `json:"attachmentExists,omitempty"`
	BusinessEventQueue *PendingBusinessEventType `json:"businessEventQueue,omitempty"`
	// TimeStamp of change in message processing status (PROCESSED/FAILED/RESEND_SUCCESS/REJECT).
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	// TimeStamp of receival of acknowledgement from external system (RESULT_SUCCESS/RESULT_FAILED).
	ResultTime *time.Time `json:"resultTime,omitempty"`
	// TimeStamp of receival of http call status intiated by the OXI processor to deliver message to the external system.
	DeliveryTime *time.Time `json:"deliveryTime,omitempty"`
}

// NewIntegrationOutboundMessageType instantiates a new IntegrationOutboundMessageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOutboundMessageType() *IntegrationOutboundMessageType {
	this := IntegrationOutboundMessageType{}
	return &this
}

// NewIntegrationOutboundMessageTypeWithDefaults instantiates a new IntegrationOutboundMessageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOutboundMessageTypeWithDefaults() *IntegrationOutboundMessageType {
	this := IntegrationOutboundMessageType{}
	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetMessageId() UniqueIDType {
	if o == nil || IsNil(o.MessageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetMessageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given UniqueIDType and assigns it to the MessageId field.
func (o *IntegrationOutboundMessageType) SetMessageId(v UniqueIDType) {
	o.MessageId = &v
}

// GetEnqueueTime returns the EnqueueTime field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetEnqueueTime() time.Time {
	if o == nil || IsNil(o.EnqueueTime) {
		var ret time.Time
		return ret
	}
	return *o.EnqueueTime
}

// GetEnqueueTimeOk returns a tuple with the EnqueueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetEnqueueTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EnqueueTime) {
		return nil, false
	}
	return o.EnqueueTime, true
}

// HasEnqueueTime returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasEnqueueTime() bool {
	if o != nil && !IsNil(o.EnqueueTime) {
		return true
	}

	return false
}

// SetEnqueueTime gets a reference to the given time.Time and assigns it to the EnqueueTime field.
func (o *IntegrationOutboundMessageType) SetEnqueueTime(v time.Time) {
	o.EnqueueTime = &v
}

// GetDequeueTime returns the DequeueTime field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetDequeueTime() time.Time {
	if o == nil || IsNil(o.DequeueTime) {
		var ret time.Time
		return ret
	}
	return *o.DequeueTime
}

// GetDequeueTimeOk returns a tuple with the DequeueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetDequeueTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DequeueTime) {
		return nil, false
	}
	return o.DequeueTime, true
}

// HasDequeueTime returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasDequeueTime() bool {
	if o != nil && !IsNil(o.DequeueTime) {
		return true
	}

	return false
}

// SetDequeueTime gets a reference to the given time.Time and assigns it to the DequeueTime field.
func (o *IntegrationOutboundMessageType) SetDequeueTime(v time.Time) {
	o.DequeueTime = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *IntegrationOutboundMessageType) SetInterface(v string) {
	o.Interface = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *IntegrationOutboundMessageType) SetMessageType(v string) {
	o.MessageType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *IntegrationOutboundMessageType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMessageStatus returns the MessageStatus field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetMessageStatus() string {
	if o == nil || IsNil(o.MessageStatus) {
		var ret string
		return ret
	}
	return *o.MessageStatus
}

// GetMessageStatusOk returns a tuple with the MessageStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetMessageStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MessageStatus) {
		return nil, false
	}
	return o.MessageStatus, true
}

// HasMessageStatus returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasMessageStatus() bool {
	if o != nil && !IsNil(o.MessageStatus) {
		return true
	}

	return false
}

// SetMessageStatus gets a reference to the given string and assigns it to the MessageStatus field.
func (o *IntegrationOutboundMessageType) SetMessageStatus(v string) {
	o.MessageStatus = &v
}

// GetReviewed returns the Reviewed field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetReviewed() bool {
	if o == nil || IsNil(o.Reviewed) {
		var ret bool
		return ret
	}
	return *o.Reviewed
}

// GetReviewedOk returns a tuple with the Reviewed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetReviewedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reviewed) {
		return nil, false
	}
	return o.Reviewed, true
}

// HasReviewed returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasReviewed() bool {
	if o != nil && !IsNil(o.Reviewed) {
		return true
	}

	return false
}

// SetReviewed gets a reference to the given bool and assigns it to the Reviewed field.
func (o *IntegrationOutboundMessageType) SetReviewed(v bool) {
	o.Reviewed = &v
}

// GetMessageReference returns the MessageReference field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetMessageReference() string {
	if o == nil || IsNil(o.MessageReference) {
		var ret string
		return ret
	}
	return *o.MessageReference
}

// GetMessageReferenceOk returns a tuple with the MessageReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetMessageReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.MessageReference) {
		return nil, false
	}
	return o.MessageReference, true
}

// HasMessageReference returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasMessageReference() bool {
	if o != nil && !IsNil(o.MessageReference) {
		return true
	}

	return false
}

// SetMessageReference gets a reference to the given string and assigns it to the MessageReference field.
func (o *IntegrationOutboundMessageType) SetMessageReference(v string) {
	o.MessageReference = &v
}

// GetMessagePrimayInfo returns the MessagePrimayInfo field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetMessagePrimayInfo() string {
	if o == nil || IsNil(o.MessagePrimayInfo) {
		var ret string
		return ret
	}
	return *o.MessagePrimayInfo
}

// GetMessagePrimayInfoOk returns a tuple with the MessagePrimayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetMessagePrimayInfoOk() (*string, bool) {
	if o == nil || IsNil(o.MessagePrimayInfo) {
		return nil, false
	}
	return o.MessagePrimayInfo, true
}

// HasMessagePrimayInfo returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasMessagePrimayInfo() bool {
	if o != nil && !IsNil(o.MessagePrimayInfo) {
		return true
	}

	return false
}

// SetMessagePrimayInfo gets a reference to the given string and assigns it to the MessagePrimayInfo field.
func (o *IntegrationOutboundMessageType) SetMessagePrimayInfo(v string) {
	o.MessagePrimayInfo = &v
}

// GetNotices returns the Notices field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetNotices() []WarningType {
	if o == nil || IsNil(o.Notices) {
		var ret []WarningType
		return ret
	}
	return o.Notices
}

// GetNoticesOk returns a tuple with the Notices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetNoticesOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Notices) {
		return nil, false
	}
	return o.Notices, true
}

// HasNotices returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasNotices() bool {
	if o != nil && !IsNil(o.Notices) {
		return true
	}

	return false
}

// SetNotices gets a reference to the given []WarningType and assigns it to the Notices field.
func (o *IntegrationOutboundMessageType) SetNotices(v []WarningType) {
	o.Notices = v
}

// GetAttachmentExists returns the AttachmentExists field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetAttachmentExists() bool {
	if o == nil || IsNil(o.AttachmentExists) {
		var ret bool
		return ret
	}
	return *o.AttachmentExists
}

// GetAttachmentExistsOk returns a tuple with the AttachmentExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetAttachmentExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachmentExists) {
		return nil, false
	}
	return o.AttachmentExists, true
}

// HasAttachmentExists returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasAttachmentExists() bool {
	if o != nil && !IsNil(o.AttachmentExists) {
		return true
	}

	return false
}

// SetAttachmentExists gets a reference to the given bool and assigns it to the AttachmentExists field.
func (o *IntegrationOutboundMessageType) SetAttachmentExists(v bool) {
	o.AttachmentExists = &v
}

// GetBusinessEventQueue returns the BusinessEventQueue field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetBusinessEventQueue() PendingBusinessEventType {
	if o == nil || IsNil(o.BusinessEventQueue) {
		var ret PendingBusinessEventType
		return ret
	}
	return *o.BusinessEventQueue
}

// GetBusinessEventQueueOk returns a tuple with the BusinessEventQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetBusinessEventQueueOk() (*PendingBusinessEventType, bool) {
	if o == nil || IsNil(o.BusinessEventQueue) {
		return nil, false
	}
	return o.BusinessEventQueue, true
}

// HasBusinessEventQueue returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasBusinessEventQueue() bool {
	if o != nil && !IsNil(o.BusinessEventQueue) {
		return true
	}

	return false
}

// SetBusinessEventQueue gets a reference to the given PendingBusinessEventType and assigns it to the BusinessEventQueue field.
func (o *IntegrationOutboundMessageType) SetBusinessEventQueue(v PendingBusinessEventType) {
	o.BusinessEventQueue = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *IntegrationOutboundMessageType) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetResultTime returns the ResultTime field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetResultTime() time.Time {
	if o == nil || IsNil(o.ResultTime) {
		var ret time.Time
		return ret
	}
	return *o.ResultTime
}

// GetResultTimeOk returns a tuple with the ResultTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetResultTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResultTime) {
		return nil, false
	}
	return o.ResultTime, true
}

// HasResultTime returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasResultTime() bool {
	if o != nil && !IsNil(o.ResultTime) {
		return true
	}

	return false
}

// SetResultTime gets a reference to the given time.Time and assigns it to the ResultTime field.
func (o *IntegrationOutboundMessageType) SetResultTime(v time.Time) {
	o.ResultTime = &v
}

// GetDeliveryTime returns the DeliveryTime field value if set, zero value otherwise.
func (o *IntegrationOutboundMessageType) GetDeliveryTime() time.Time {
	if o == nil || IsNil(o.DeliveryTime) {
		var ret time.Time
		return ret
	}
	return *o.DeliveryTime
}

// GetDeliveryTimeOk returns a tuple with the DeliveryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOutboundMessageType) GetDeliveryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeliveryTime) {
		return nil, false
	}
	return o.DeliveryTime, true
}

// HasDeliveryTime returns a boolean if a field has been set.
func (o *IntegrationOutboundMessageType) HasDeliveryTime() bool {
	if o != nil && !IsNil(o.DeliveryTime) {
		return true
	}

	return false
}

// SetDeliveryTime gets a reference to the given time.Time and assigns it to the DeliveryTime field.
func (o *IntegrationOutboundMessageType) SetDeliveryTime(v time.Time) {
	o.DeliveryTime = &v
}

func (o IntegrationOutboundMessageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationOutboundMessageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.EnqueueTime) {
		toSerialize["enqueueTime"] = o.EnqueueTime
	}
	if !IsNil(o.DequeueTime) {
		toSerialize["dequeueTime"] = o.DequeueTime
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MessageStatus) {
		toSerialize["messageStatus"] = o.MessageStatus
	}
	if !IsNil(o.Reviewed) {
		toSerialize["reviewed"] = o.Reviewed
	}
	if !IsNil(o.MessageReference) {
		toSerialize["messageReference"] = o.MessageReference
	}
	if !IsNil(o.MessagePrimayInfo) {
		toSerialize["messagePrimayInfo"] = o.MessagePrimayInfo
	}
	if !IsNil(o.Notices) {
		toSerialize["notices"] = o.Notices
	}
	if !IsNil(o.AttachmentExists) {
		toSerialize["attachmentExists"] = o.AttachmentExists
	}
	if !IsNil(o.BusinessEventQueue) {
		toSerialize["businessEventQueue"] = o.BusinessEventQueue
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.ResultTime) {
		toSerialize["resultTime"] = o.ResultTime
	}
	if !IsNil(o.DeliveryTime) {
		toSerialize["deliveryTime"] = o.DeliveryTime
	}
	return toSerialize, nil
}

type NullableIntegrationOutboundMessageType struct {
	value *IntegrationOutboundMessageType
	isSet bool
}

func (v NullableIntegrationOutboundMessageType) Get() *IntegrationOutboundMessageType {
	return v.value
}

func (v *NullableIntegrationOutboundMessageType) Set(val *IntegrationOutboundMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOutboundMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOutboundMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOutboundMessageType(val *IntegrationOutboundMessageType) *NullableIntegrationOutboundMessageType {
	return &NullableIntegrationOutboundMessageType{value: val, isSet: true}
}

func (v NullableIntegrationOutboundMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOutboundMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


