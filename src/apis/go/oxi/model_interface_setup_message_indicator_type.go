/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InterfaceSetupMessageIndicatorType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceSetupMessageIndicatorType{}

// InterfaceSetupMessageIndicatorType Type represents indicators for deleting/keeping data in the OPERA system from an incoming message.
type InterfaceSetupMessageIndicatorType struct {
	// Character Indicator
	CharacterIndicator *string `json:"characterIndicator,omitempty"`
	// Numeric Indicator
	NumericIndicator *float32 `json:"numericIndicator,omitempty"`
	// Date Indicator.
	DateIndicator *string `json:"dateIndicator,omitempty"`
}

// NewInterfaceSetupMessageIndicatorType instantiates a new InterfaceSetupMessageIndicatorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceSetupMessageIndicatorType() *InterfaceSetupMessageIndicatorType {
	this := InterfaceSetupMessageIndicatorType{}
	return &this
}

// NewInterfaceSetupMessageIndicatorTypeWithDefaults instantiates a new InterfaceSetupMessageIndicatorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceSetupMessageIndicatorTypeWithDefaults() *InterfaceSetupMessageIndicatorType {
	this := InterfaceSetupMessageIndicatorType{}
	return &this
}

// GetCharacterIndicator returns the CharacterIndicator field value if set, zero value otherwise.
func (o *InterfaceSetupMessageIndicatorType) GetCharacterIndicator() string {
	if o == nil || IsNil(o.CharacterIndicator) {
		var ret string
		return ret
	}
	return *o.CharacterIndicator
}

// GetCharacterIndicatorOk returns a tuple with the CharacterIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupMessageIndicatorType) GetCharacterIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.CharacterIndicator) {
		return nil, false
	}
	return o.CharacterIndicator, true
}

// HasCharacterIndicator returns a boolean if a field has been set.
func (o *InterfaceSetupMessageIndicatorType) HasCharacterIndicator() bool {
	if o != nil && !IsNil(o.CharacterIndicator) {
		return true
	}

	return false
}

// SetCharacterIndicator gets a reference to the given string and assigns it to the CharacterIndicator field.
func (o *InterfaceSetupMessageIndicatorType) SetCharacterIndicator(v string) {
	o.CharacterIndicator = &v
}

// GetNumericIndicator returns the NumericIndicator field value if set, zero value otherwise.
func (o *InterfaceSetupMessageIndicatorType) GetNumericIndicator() float32 {
	if o == nil || IsNil(o.NumericIndicator) {
		var ret float32
		return ret
	}
	return *o.NumericIndicator
}

// GetNumericIndicatorOk returns a tuple with the NumericIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupMessageIndicatorType) GetNumericIndicatorOk() (*float32, bool) {
	if o == nil || IsNil(o.NumericIndicator) {
		return nil, false
	}
	return o.NumericIndicator, true
}

// HasNumericIndicator returns a boolean if a field has been set.
func (o *InterfaceSetupMessageIndicatorType) HasNumericIndicator() bool {
	if o != nil && !IsNil(o.NumericIndicator) {
		return true
	}

	return false
}

// SetNumericIndicator gets a reference to the given float32 and assigns it to the NumericIndicator field.
func (o *InterfaceSetupMessageIndicatorType) SetNumericIndicator(v float32) {
	o.NumericIndicator = &v
}

// GetDateIndicator returns the DateIndicator field value if set, zero value otherwise.
func (o *InterfaceSetupMessageIndicatorType) GetDateIndicator() string {
	if o == nil || IsNil(o.DateIndicator) {
		var ret string
		return ret
	}
	return *o.DateIndicator
}

// GetDateIndicatorOk returns a tuple with the DateIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupMessageIndicatorType) GetDateIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.DateIndicator) {
		return nil, false
	}
	return o.DateIndicator, true
}

// HasDateIndicator returns a boolean if a field has been set.
func (o *InterfaceSetupMessageIndicatorType) HasDateIndicator() bool {
	if o != nil && !IsNil(o.DateIndicator) {
		return true
	}

	return false
}

// SetDateIndicator gets a reference to the given string and assigns it to the DateIndicator field.
func (o *InterfaceSetupMessageIndicatorType) SetDateIndicator(v string) {
	o.DateIndicator = &v
}

func (o InterfaceSetupMessageIndicatorType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceSetupMessageIndicatorType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterIndicator) {
		toSerialize["characterIndicator"] = o.CharacterIndicator
	}
	if !IsNil(o.NumericIndicator) {
		toSerialize["numericIndicator"] = o.NumericIndicator
	}
	if !IsNil(o.DateIndicator) {
		toSerialize["dateIndicator"] = o.DateIndicator
	}
	return toSerialize, nil
}

type NullableInterfaceSetupMessageIndicatorType struct {
	value *InterfaceSetupMessageIndicatorType
	isSet bool
}

func (v NullableInterfaceSetupMessageIndicatorType) Get() *InterfaceSetupMessageIndicatorType {
	return v.value
}

func (v *NullableInterfaceSetupMessageIndicatorType) Set(val *InterfaceSetupMessageIndicatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceSetupMessageIndicatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceSetupMessageIndicatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceSetupMessageIndicatorType(val *InterfaceSetupMessageIndicatorType) *NullableInterfaceSetupMessageIndicatorType {
	return &NullableInterfaceSetupMessageIndicatorType{value: val, isSet: true}
}

func (v NullableInterfaceSetupMessageIndicatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceSetupMessageIndicatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


