/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AccumulatedBusinessEventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccumulatedBusinessEventType{}

// AccumulatedBusinessEventType Business Event message details
type AccumulatedBusinessEventType struct {
	// Primary Key identifier assigned to the business event.
	PrimaryKey *string `json:"primaryKey,omitempty"`
	Status *AccumulatedBusinessEventStatusType `json:"status,omitempty"`
	// Data when the message was created by external systems
	CreateDate *time.Time `json:"createDate,omitempty"`
	// The interface this message was created for
	Interface *string `json:"interface,omitempty"`
	// Data module of outgoing message. This identifies the kind of message sent (e.g., reservation, profile, rate, block, rate restriction, inventory, and result)
	Module *string `json:"module,omitempty"`
	// Property this message was sent from.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewAccumulatedBusinessEventType instantiates a new AccumulatedBusinessEventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccumulatedBusinessEventType() *AccumulatedBusinessEventType {
	this := AccumulatedBusinessEventType{}
	return &this
}

// NewAccumulatedBusinessEventTypeWithDefaults instantiates a new AccumulatedBusinessEventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccumulatedBusinessEventTypeWithDefaults() *AccumulatedBusinessEventType {
	this := AccumulatedBusinessEventType{}
	return &this
}

// GetPrimaryKey returns the PrimaryKey field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetPrimaryKey() string {
	if o == nil || IsNil(o.PrimaryKey) {
		var ret string
		return ret
	}
	return *o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetPrimaryKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryKey) {
		return nil, false
	}
	return o.PrimaryKey, true
}

// HasPrimaryKey returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasPrimaryKey() bool {
	if o != nil && !IsNil(o.PrimaryKey) {
		return true
	}

	return false
}

// SetPrimaryKey gets a reference to the given string and assigns it to the PrimaryKey field.
func (o *AccumulatedBusinessEventType) SetPrimaryKey(v string) {
	o.PrimaryKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetStatus() AccumulatedBusinessEventStatusType {
	if o == nil || IsNil(o.Status) {
		var ret AccumulatedBusinessEventStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetStatusOk() (*AccumulatedBusinessEventStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AccumulatedBusinessEventStatusType and assigns it to the Status field.
func (o *AccumulatedBusinessEventType) SetStatus(v AccumulatedBusinessEventStatusType) {
	o.Status = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetCreateDate() time.Time {
	if o == nil || IsNil(o.CreateDate) {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasCreateDate() bool {
	if o != nil && !IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *AccumulatedBusinessEventType) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *AccumulatedBusinessEventType) SetInterface(v string) {
	o.Interface = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetModule() string {
	if o == nil || IsNil(o.Module) {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetModuleOk() (*string, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *AccumulatedBusinessEventType) SetModule(v string) {
	o.Module = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AccumulatedBusinessEventType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccumulatedBusinessEventType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AccumulatedBusinessEventType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AccumulatedBusinessEventType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o AccumulatedBusinessEventType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccumulatedBusinessEventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrimaryKey) {
		toSerialize["primaryKey"] = o.PrimaryKey
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableAccumulatedBusinessEventType struct {
	value *AccumulatedBusinessEventType
	isSet bool
}

func (v NullableAccumulatedBusinessEventType) Get() *AccumulatedBusinessEventType {
	return v.value
}

func (v *NullableAccumulatedBusinessEventType) Set(val *AccumulatedBusinessEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccumulatedBusinessEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccumulatedBusinessEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccumulatedBusinessEventType(val *AccumulatedBusinessEventType) *NullableAccumulatedBusinessEventType {
	return &NullableAccumulatedBusinessEventType{value: val, isSet: true}
}

func (v NullableAccumulatedBusinessEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccumulatedBusinessEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


