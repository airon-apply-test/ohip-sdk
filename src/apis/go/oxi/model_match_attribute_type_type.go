/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MatchAttributeTypeType Profiles to match with Alternate Last Name. Alternate Last Name is not for OXI.
type MatchAttributeTypeType string

// List of matchAttributeTypeType
const (
	ADDRESS_LINE1 MatchAttributeTypeType = "AddressLine1"
	AR_NUMBER MatchAttributeTypeType = "ARNumber"
	BIRTHDAY MatchAttributeTypeType = "Birthday"
	CITY MatchAttributeTypeType = "City"
	CLIENT_ID MatchAttributeTypeType = "ClientID"
	CORP_NUMBER MatchAttributeTypeType = "CorpNumber"
	COUNTRY MatchAttributeTypeType = "Country"
	CREDIT_CARD MatchAttributeTypeType = "CreditCard"
	EMAIL MatchAttributeTypeType = "Email"
	FAX MatchAttributeTypeType = "Fax"
	FIRST_NAME MatchAttributeTypeType = "FirstName"
	IATA_NUMBER MatchAttributeTypeType = "IATANumber"
	MEMBERSHIP_NUMBER MatchAttributeTypeType = "MembershipNumber"
	LAST_NAME MatchAttributeTypeType = "LastName"
	PASSPORT_NUMBER MatchAttributeTypeType = "PassportNumber"
	PHONE_NUMBER MatchAttributeTypeType = "PhoneNumber"
	POSTAL_CODE MatchAttributeTypeType = "PostalCode"
	STATE MatchAttributeTypeType = "State"
	SUBSCRIPTION_ID MatchAttributeTypeType = "SubscriptionID"
	ALTERNATE_FIRST_NAME MatchAttributeTypeType = "AlternateFirstName"
	ALTERNATE_LAST_NAME MatchAttributeTypeType = "AlternateLastName"
)

// All allowed values of MatchAttributeTypeType enum
var AllowedMatchAttributeTypeTypeEnumValues = []MatchAttributeTypeType{
	"AddressLine1",
	"ARNumber",
	"Birthday",
	"City",
	"ClientID",
	"CorpNumber",
	"Country",
	"CreditCard",
	"Email",
	"Fax",
	"FirstName",
	"IATANumber",
	"MembershipNumber",
	"LastName",
	"PassportNumber",
	"PhoneNumber",
	"PostalCode",
	"State",
	"SubscriptionID",
	"AlternateFirstName",
	"AlternateLastName",
}

func (v *MatchAttributeTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatchAttributeTypeType(value)
	for _, existing := range AllowedMatchAttributeTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatchAttributeTypeType", value)
}

// NewMatchAttributeTypeTypeFromValue returns a pointer to a valid MatchAttributeTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchAttributeTypeTypeFromValue(v string) (*MatchAttributeTypeType, error) {
	ev := MatchAttributeTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatchAttributeTypeType: valid values are %v", v, AllowedMatchAttributeTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchAttributeTypeType) IsValid() bool {
	for _, existing := range AllowedMatchAttributeTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to matchAttributeTypeType value
func (v MatchAttributeTypeType) Ptr() *MatchAttributeTypeType {
	return &v
}

type NullableMatchAttributeTypeType struct {
	value *MatchAttributeTypeType
	isSet bool
}

func (v NullableMatchAttributeTypeType) Get() *MatchAttributeTypeType {
	return v.value
}

func (v *NullableMatchAttributeTypeType) Set(val *MatchAttributeTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchAttributeTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchAttributeTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchAttributeTypeType(val *MatchAttributeTypeType) *NullableMatchAttributeTypeType {
	return &NullableMatchAttributeTypeType{value: val, isSet: true}
}

func (v NullableMatchAttributeTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchAttributeTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

