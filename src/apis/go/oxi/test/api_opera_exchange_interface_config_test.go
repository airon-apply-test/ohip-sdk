/*
OPERA Cloud Xchange Interface OXI API

Testing OperaExchangeInterfaceConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OperaExchangeInterfaceConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OperaExchangeInterfaceConfigApiService DeleteAutomaticTransmissionSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.DeleteAutomaticTransmissionSchedules(context.Background(), messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService DeleteConversionCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.DeleteConversionCodeMappings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService DeleteExternalInterfaceSetups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.DeleteExternalInterfaceSetups(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService DeleteProfileMatchRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileType string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.DeleteProfileMatchRules(context.Background(), profileType, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService DeleteUDFMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operaValue string
		var conversionCode string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.DeleteUDFMappings(context.Background(), operaValue, conversionCode, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetAccumulatedBusinessEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetAccumulatedBusinessEvents(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetAutomaticTransmissionSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetAutomaticTransmissionSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetCommunicationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetCommunicationMethods(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetConversionCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversionCode string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetConversionCodeMappings(context.Background(), conversionCode, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetConversionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetConversionCodes(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetExternalInterfaceSetups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetExternalInterfaceSetups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetIntegrationInboundMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationSystem string
		var interfaceId string
		var externalHotelCode string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetIntegrationInboundMessages(context.Background(), integrationSystem, interfaceId, externalHotelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetIntegrationOutboundMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationSystem string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetIntegrationOutboundMessages(context.Background(), integrationSystem, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetInterfaceControls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetInterfaceControls(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetLegacyInterfaceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetLegacyInterfaceStatus(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetOXIListOfValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lovCode string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetOXIListOfValues(context.Background(), lovCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService GetProfileMatchRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.GetProfileMatchRules(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PostAutomaticTransmissionSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PostAutomaticTransmissionSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PostConversionCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalValue string
		var operaValue string
		var conversionCode string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PostConversionCodeMappings(context.Background(), externalValue, operaValue, conversionCode, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PostExternalInterfaceSetups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PostExternalInterfaceSetups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PostProfileMatchRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PostProfileMatchRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutAutomaticTransmissionSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutAutomaticTransmissionSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutCommunicationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutCommunicationMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutConversionCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalValue string
		var operaValue string
		var id string
		var conversionCode string
		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutConversionCodeMappings(context.Background(), externalValue, operaValue, id, conversionCode, interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutConversionCodesStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutConversionCodesStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutExternalInterfaceSetups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutExternalInterfaceSetups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutInterfaceControls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutInterfaceControls(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperaExchangeInterfaceConfigApiService PutProfileMatchRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OperaExchangeInterfaceConfigApi.PutProfileMatchRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
