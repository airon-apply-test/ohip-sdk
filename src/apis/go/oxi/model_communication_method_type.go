/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
)

// checks if the CommunicationMethodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunicationMethodType{}

// CommunicationMethodType Type represents the Communication Method Base Type.
type CommunicationMethodType struct {
	// OXI Interface ID
	InterfaceId *string `json:"interfaceId,omitempty"`
	// SID-RESORT for Global Level and HotelId associated with the interface for the Property Level configuration.
	HotelId *string `json:"hotelId,omitempty"`
	CommunicationType *CommunicationType `json:"communicationType,omitempty"`
	// Attribute represents the communication flow like UPLOAD,DOWNLOAD.
	CommunicationFlow *string `json:"communicationFlow,omitempty"`
	NoCommunication *CommunicationMethodNoneType `json:"noCommunication,omitempty"`
	HTTPS *CommunicationMethodHTTPSType `json:"hTTPS,omitempty"`
	// Attribute that indicates whether the communication type allowed or not.
	AllowedComTypes *string `json:"allowedComTypes,omitempty"`
	// Attribute represents Description of Communication Flow
	DisplayText *string `json:"displayText,omitempty"`
	// Attribute represents Retry Count
	RetryCount *int32 `json:"retryCount,omitempty"`
	// Attribute represents Interval in seconds between retries
	RetryInterval *int32 `json:"retryInterval,omitempty"`
	// Attribute represents Upload start time in HH:MI 24 hrs format
	StartTime *string `json:"startTime,omitempty"`
	// Attribute represents Number of days files to be kept in the backup folder
	NoOfDaysToKeep *int32 `json:"noOfDaysToKeep,omitempty"`
	// Attribute represents Version Number of the PM System.
	VersionNumber *string `json:"versionNumber,omitempty"`
	// Attribute represents System Type(Production/Test)
	SystemType *string `json:"systemType,omitempty"`
	// Chain code.
	ChainCode *string `json:"chainCode,omitempty"`
}

// NewCommunicationMethodType instantiates a new CommunicationMethodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunicationMethodType() *CommunicationMethodType {
	this := CommunicationMethodType{}
	return &this
}

// NewCommunicationMethodTypeWithDefaults instantiates a new CommunicationMethodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunicationMethodTypeWithDefaults() *CommunicationMethodType {
	this := CommunicationMethodType{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *CommunicationMethodType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CommunicationMethodType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCommunicationType returns the CommunicationType field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetCommunicationType() CommunicationType {
	if o == nil || IsNil(o.CommunicationType) {
		var ret CommunicationType
		return ret
	}
	return *o.CommunicationType
}

// GetCommunicationTypeOk returns a tuple with the CommunicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetCommunicationTypeOk() (*CommunicationType, bool) {
	if o == nil || IsNil(o.CommunicationType) {
		return nil, false
	}
	return o.CommunicationType, true
}

// HasCommunicationType returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasCommunicationType() bool {
	if o != nil && !IsNil(o.CommunicationType) {
		return true
	}

	return false
}

// SetCommunicationType gets a reference to the given CommunicationType and assigns it to the CommunicationType field.
func (o *CommunicationMethodType) SetCommunicationType(v CommunicationType) {
	o.CommunicationType = &v
}

// GetCommunicationFlow returns the CommunicationFlow field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetCommunicationFlow() string {
	if o == nil || IsNil(o.CommunicationFlow) {
		var ret string
		return ret
	}
	return *o.CommunicationFlow
}

// GetCommunicationFlowOk returns a tuple with the CommunicationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetCommunicationFlowOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationFlow) {
		return nil, false
	}
	return o.CommunicationFlow, true
}

// HasCommunicationFlow returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasCommunicationFlow() bool {
	if o != nil && !IsNil(o.CommunicationFlow) {
		return true
	}

	return false
}

// SetCommunicationFlow gets a reference to the given string and assigns it to the CommunicationFlow field.
func (o *CommunicationMethodType) SetCommunicationFlow(v string) {
	o.CommunicationFlow = &v
}

// GetNoCommunication returns the NoCommunication field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetNoCommunication() CommunicationMethodNoneType {
	if o == nil || IsNil(o.NoCommunication) {
		var ret CommunicationMethodNoneType
		return ret
	}
	return *o.NoCommunication
}

// GetNoCommunicationOk returns a tuple with the NoCommunication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetNoCommunicationOk() (*CommunicationMethodNoneType, bool) {
	if o == nil || IsNil(o.NoCommunication) {
		return nil, false
	}
	return o.NoCommunication, true
}

// HasNoCommunication returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasNoCommunication() bool {
	if o != nil && !IsNil(o.NoCommunication) {
		return true
	}

	return false
}

// SetNoCommunication gets a reference to the given CommunicationMethodNoneType and assigns it to the NoCommunication field.
func (o *CommunicationMethodType) SetNoCommunication(v CommunicationMethodNoneType) {
	o.NoCommunication = &v
}

// GetHTTPS returns the HTTPS field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetHTTPS() CommunicationMethodHTTPSType {
	if o == nil || IsNil(o.HTTPS) {
		var ret CommunicationMethodHTTPSType
		return ret
	}
	return *o.HTTPS
}

// GetHTTPSOk returns a tuple with the HTTPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetHTTPSOk() (*CommunicationMethodHTTPSType, bool) {
	if o == nil || IsNil(o.HTTPS) {
		return nil, false
	}
	return o.HTTPS, true
}

// HasHTTPS returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasHTTPS() bool {
	if o != nil && !IsNil(o.HTTPS) {
		return true
	}

	return false
}

// SetHTTPS gets a reference to the given CommunicationMethodHTTPSType and assigns it to the HTTPS field.
func (o *CommunicationMethodType) SetHTTPS(v CommunicationMethodHTTPSType) {
	o.HTTPS = &v
}

// GetAllowedComTypes returns the AllowedComTypes field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetAllowedComTypes() string {
	if o == nil || IsNil(o.AllowedComTypes) {
		var ret string
		return ret
	}
	return *o.AllowedComTypes
}

// GetAllowedComTypesOk returns a tuple with the AllowedComTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetAllowedComTypesOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedComTypes) {
		return nil, false
	}
	return o.AllowedComTypes, true
}

// HasAllowedComTypes returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasAllowedComTypes() bool {
	if o != nil && !IsNil(o.AllowedComTypes) {
		return true
	}

	return false
}

// SetAllowedComTypes gets a reference to the given string and assigns it to the AllowedComTypes field.
func (o *CommunicationMethodType) SetAllowedComTypes(v string) {
	o.AllowedComTypes = &v
}

// GetDisplayText returns the DisplayText field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetDisplayText() string {
	if o == nil || IsNil(o.DisplayText) {
		var ret string
		return ret
	}
	return *o.DisplayText
}

// GetDisplayTextOk returns a tuple with the DisplayText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetDisplayTextOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayText) {
		return nil, false
	}
	return o.DisplayText, true
}

// HasDisplayText returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasDisplayText() bool {
	if o != nil && !IsNil(o.DisplayText) {
		return true
	}

	return false
}

// SetDisplayText gets a reference to the given string and assigns it to the DisplayText field.
func (o *CommunicationMethodType) SetDisplayText(v string) {
	o.DisplayText = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetRetryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *CommunicationMethodType) SetRetryCount(v int32) {
	o.RetryCount = &v
}

// GetRetryInterval returns the RetryInterval field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetRetryInterval() int32 {
	if o == nil || IsNil(o.RetryInterval) {
		var ret int32
		return ret
	}
	return *o.RetryInterval
}

// GetRetryIntervalOk returns a tuple with the RetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetRetryIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryInterval) {
		return nil, false
	}
	return o.RetryInterval, true
}

// HasRetryInterval returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasRetryInterval() bool {
	if o != nil && !IsNil(o.RetryInterval) {
		return true
	}

	return false
}

// SetRetryInterval gets a reference to the given int32 and assigns it to the RetryInterval field.
func (o *CommunicationMethodType) SetRetryInterval(v int32) {
	o.RetryInterval = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *CommunicationMethodType) SetStartTime(v string) {
	o.StartTime = &v
}

// GetNoOfDaysToKeep returns the NoOfDaysToKeep field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetNoOfDaysToKeep() int32 {
	if o == nil || IsNil(o.NoOfDaysToKeep) {
		var ret int32
		return ret
	}
	return *o.NoOfDaysToKeep
}

// GetNoOfDaysToKeepOk returns a tuple with the NoOfDaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetNoOfDaysToKeepOk() (*int32, bool) {
	if o == nil || IsNil(o.NoOfDaysToKeep) {
		return nil, false
	}
	return o.NoOfDaysToKeep, true
}

// HasNoOfDaysToKeep returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasNoOfDaysToKeep() bool {
	if o != nil && !IsNil(o.NoOfDaysToKeep) {
		return true
	}

	return false
}

// SetNoOfDaysToKeep gets a reference to the given int32 and assigns it to the NoOfDaysToKeep field.
func (o *CommunicationMethodType) SetNoOfDaysToKeep(v int32) {
	o.NoOfDaysToKeep = &v
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetVersionNumber() string {
	if o == nil || IsNil(o.VersionNumber) {
		var ret string
		return ret
	}
	return *o.VersionNumber
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetVersionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VersionNumber) {
		return nil, false
	}
	return o.VersionNumber, true
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasVersionNumber() bool {
	if o != nil && !IsNil(o.VersionNumber) {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given string and assigns it to the VersionNumber field.
func (o *CommunicationMethodType) SetVersionNumber(v string) {
	o.VersionNumber = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *CommunicationMethodType) SetSystemType(v string) {
	o.SystemType = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *CommunicationMethodType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *CommunicationMethodType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *CommunicationMethodType) SetChainCode(v string) {
	o.ChainCode = &v
}

func (o CommunicationMethodType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunicationMethodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.CommunicationType) {
		toSerialize["communicationType"] = o.CommunicationType
	}
	if !IsNil(o.CommunicationFlow) {
		toSerialize["communicationFlow"] = o.CommunicationFlow
	}
	if !IsNil(o.NoCommunication) {
		toSerialize["noCommunication"] = o.NoCommunication
	}
	if !IsNil(o.HTTPS) {
		toSerialize["hTTPS"] = o.HTTPS
	}
	if !IsNil(o.AllowedComTypes) {
		toSerialize["allowedComTypes"] = o.AllowedComTypes
	}
	if !IsNil(o.DisplayText) {
		toSerialize["displayText"] = o.DisplayText
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.RetryInterval) {
		toSerialize["retryInterval"] = o.RetryInterval
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.NoOfDaysToKeep) {
		toSerialize["noOfDaysToKeep"] = o.NoOfDaysToKeep
	}
	if !IsNil(o.VersionNumber) {
		toSerialize["versionNumber"] = o.VersionNumber
	}
	if !IsNil(o.SystemType) {
		toSerialize["systemType"] = o.SystemType
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	return toSerialize, nil
}

type NullableCommunicationMethodType struct {
	value *CommunicationMethodType
	isSet bool
}

func (v NullableCommunicationMethodType) Get() *CommunicationMethodType {
	return v.value
}

func (v *NullableCommunicationMethodType) Set(val *CommunicationMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationMethodType(val *CommunicationMethodType) *NullableCommunicationMethodType {
	return &NullableCommunicationMethodType{value: val, isSet: true}
}

func (v NullableCommunicationMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


