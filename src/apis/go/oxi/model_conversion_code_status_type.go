/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
)

// checks if the ConversionCodeStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionCodeStatusType{}

// ConversionCodeStatusType A common type contains basic information about Conversion Code.
type ConversionCodeStatusType struct {
	// Hotel Code of the Property.
	HotelId *string `json:"hotelId,omitempty"`
	// Identifier of the Interface.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Type of Conversion Code or user-defined function (UDF) module name configured in the system.
	ConversionCode *string `json:"conversionCode,omitempty"`
	// A flag that is true if the conversion code is an user-defined function (UDF) module code.
	UDFCode *bool `json:"uDFCode,omitempty"`
	// A flag that indicates whether the Conversion Code should be activated or inactivated.
	Activate *bool `json:"activate,omitempty"`
}

// NewConversionCodeStatusType instantiates a new ConversionCodeStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionCodeStatusType() *ConversionCodeStatusType {
	this := ConversionCodeStatusType{}
	return &this
}

// NewConversionCodeStatusTypeWithDefaults instantiates a new ConversionCodeStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionCodeStatusTypeWithDefaults() *ConversionCodeStatusType {
	this := ConversionCodeStatusType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ConversionCodeStatusType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeStatusType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ConversionCodeStatusType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ConversionCodeStatusType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *ConversionCodeStatusType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeStatusType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *ConversionCodeStatusType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *ConversionCodeStatusType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetConversionCode returns the ConversionCode field value if set, zero value otherwise.
func (o *ConversionCodeStatusType) GetConversionCode() string {
	if o == nil || IsNil(o.ConversionCode) {
		var ret string
		return ret
	}
	return *o.ConversionCode
}

// GetConversionCodeOk returns a tuple with the ConversionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeStatusType) GetConversionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ConversionCode) {
		return nil, false
	}
	return o.ConversionCode, true
}

// HasConversionCode returns a boolean if a field has been set.
func (o *ConversionCodeStatusType) HasConversionCode() bool {
	if o != nil && !IsNil(o.ConversionCode) {
		return true
	}

	return false
}

// SetConversionCode gets a reference to the given string and assigns it to the ConversionCode field.
func (o *ConversionCodeStatusType) SetConversionCode(v string) {
	o.ConversionCode = &v
}

// GetUDFCode returns the UDFCode field value if set, zero value otherwise.
func (o *ConversionCodeStatusType) GetUDFCode() bool {
	if o == nil || IsNil(o.UDFCode) {
		var ret bool
		return ret
	}
	return *o.UDFCode
}

// GetUDFCodeOk returns a tuple with the UDFCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeStatusType) GetUDFCodeOk() (*bool, bool) {
	if o == nil || IsNil(o.UDFCode) {
		return nil, false
	}
	return o.UDFCode, true
}

// HasUDFCode returns a boolean if a field has been set.
func (o *ConversionCodeStatusType) HasUDFCode() bool {
	if o != nil && !IsNil(o.UDFCode) {
		return true
	}

	return false
}

// SetUDFCode gets a reference to the given bool and assigns it to the UDFCode field.
func (o *ConversionCodeStatusType) SetUDFCode(v bool) {
	o.UDFCode = &v
}

// GetActivate returns the Activate field value if set, zero value otherwise.
func (o *ConversionCodeStatusType) GetActivate() bool {
	if o == nil || IsNil(o.Activate) {
		var ret bool
		return ret
	}
	return *o.Activate
}

// GetActivateOk returns a tuple with the Activate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeStatusType) GetActivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Activate) {
		return nil, false
	}
	return o.Activate, true
}

// HasActivate returns a boolean if a field has been set.
func (o *ConversionCodeStatusType) HasActivate() bool {
	if o != nil && !IsNil(o.Activate) {
		return true
	}

	return false
}

// SetActivate gets a reference to the given bool and assigns it to the Activate field.
func (o *ConversionCodeStatusType) SetActivate(v bool) {
	o.Activate = &v
}

func (o ConversionCodeStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionCodeStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.ConversionCode) {
		toSerialize["conversionCode"] = o.ConversionCode
	}
	if !IsNil(o.UDFCode) {
		toSerialize["uDFCode"] = o.UDFCode
	}
	if !IsNil(o.Activate) {
		toSerialize["activate"] = o.Activate
	}
	return toSerialize, nil
}

type NullableConversionCodeStatusType struct {
	value *ConversionCodeStatusType
	isSet bool
}

func (v NullableConversionCodeStatusType) Get() *ConversionCodeStatusType {
	return v.value
}

func (v *NullableConversionCodeStatusType) Set(val *ConversionCodeStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionCodeStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionCodeStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionCodeStatusType(val *ConversionCodeStatusType) *NullableConversionCodeStatusType {
	return &NullableConversionCodeStatusType{value: val, isSet: true}
}

func (v NullableConversionCodeStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionCodeStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


