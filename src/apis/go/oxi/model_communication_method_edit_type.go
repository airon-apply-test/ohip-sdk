/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommunicationMethodEditType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunicationMethodEditType{}

// CommunicationMethodEditType Type represents the Communication Mehtod Base Type.
type CommunicationMethodEditType struct {
	// OXI Interface ID
	InterfaceId *string `json:"interfaceId,omitempty"`
	// SID-RESORT for Global Level and HotelId associated with the interface for the Property Level configuration.
	HotelId *string `json:"hotelId,omitempty"`
	CommunicationType *CommunicationType `json:"communicationType,omitempty"`
	// Attribute represents the communication flow like UPLOAD,DOWNLOAD.
	CommunicationFlow *string `json:"communicationFlow,omitempty"`
	NewMethod *CommunicationMethodType `json:"newMethod,omitempty"`
}

// NewCommunicationMethodEditType instantiates a new CommunicationMethodEditType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunicationMethodEditType() *CommunicationMethodEditType {
	this := CommunicationMethodEditType{}
	return &this
}

// NewCommunicationMethodEditTypeWithDefaults instantiates a new CommunicationMethodEditType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunicationMethodEditTypeWithDefaults() *CommunicationMethodEditType {
	this := CommunicationMethodEditType{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *CommunicationMethodEditType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodEditType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *CommunicationMethodEditType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *CommunicationMethodEditType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CommunicationMethodEditType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodEditType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CommunicationMethodEditType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CommunicationMethodEditType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCommunicationType returns the CommunicationType field value if set, zero value otherwise.
func (o *CommunicationMethodEditType) GetCommunicationType() CommunicationType {
	if o == nil || IsNil(o.CommunicationType) {
		var ret CommunicationType
		return ret
	}
	return *o.CommunicationType
}

// GetCommunicationTypeOk returns a tuple with the CommunicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodEditType) GetCommunicationTypeOk() (*CommunicationType, bool) {
	if o == nil || IsNil(o.CommunicationType) {
		return nil, false
	}
	return o.CommunicationType, true
}

// HasCommunicationType returns a boolean if a field has been set.
func (o *CommunicationMethodEditType) HasCommunicationType() bool {
	if o != nil && !IsNil(o.CommunicationType) {
		return true
	}

	return false
}

// SetCommunicationType gets a reference to the given CommunicationType and assigns it to the CommunicationType field.
func (o *CommunicationMethodEditType) SetCommunicationType(v CommunicationType) {
	o.CommunicationType = &v
}

// GetCommunicationFlow returns the CommunicationFlow field value if set, zero value otherwise.
func (o *CommunicationMethodEditType) GetCommunicationFlow() string {
	if o == nil || IsNil(o.CommunicationFlow) {
		var ret string
		return ret
	}
	return *o.CommunicationFlow
}

// GetCommunicationFlowOk returns a tuple with the CommunicationFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodEditType) GetCommunicationFlowOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationFlow) {
		return nil, false
	}
	return o.CommunicationFlow, true
}

// HasCommunicationFlow returns a boolean if a field has been set.
func (o *CommunicationMethodEditType) HasCommunicationFlow() bool {
	if o != nil && !IsNil(o.CommunicationFlow) {
		return true
	}

	return false
}

// SetCommunicationFlow gets a reference to the given string and assigns it to the CommunicationFlow field.
func (o *CommunicationMethodEditType) SetCommunicationFlow(v string) {
	o.CommunicationFlow = &v
}

// GetNewMethod returns the NewMethod field value if set, zero value otherwise.
func (o *CommunicationMethodEditType) GetNewMethod() CommunicationMethodType {
	if o == nil || IsNil(o.NewMethod) {
		var ret CommunicationMethodType
		return ret
	}
	return *o.NewMethod
}

// GetNewMethodOk returns a tuple with the NewMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationMethodEditType) GetNewMethodOk() (*CommunicationMethodType, bool) {
	if o == nil || IsNil(o.NewMethod) {
		return nil, false
	}
	return o.NewMethod, true
}

// HasNewMethod returns a boolean if a field has been set.
func (o *CommunicationMethodEditType) HasNewMethod() bool {
	if o != nil && !IsNil(o.NewMethod) {
		return true
	}

	return false
}

// SetNewMethod gets a reference to the given CommunicationMethodType and assigns it to the NewMethod field.
func (o *CommunicationMethodEditType) SetNewMethod(v CommunicationMethodType) {
	o.NewMethod = &v
}

func (o CommunicationMethodEditType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunicationMethodEditType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.CommunicationType) {
		toSerialize["communicationType"] = o.CommunicationType
	}
	if !IsNil(o.CommunicationFlow) {
		toSerialize["communicationFlow"] = o.CommunicationFlow
	}
	if !IsNil(o.NewMethod) {
		toSerialize["newMethod"] = o.NewMethod
	}
	return toSerialize, nil
}

type NullableCommunicationMethodEditType struct {
	value *CommunicationMethodEditType
	isSet bool
}

func (v NullableCommunicationMethodEditType) Get() *CommunicationMethodEditType {
	return v.value
}

func (v *NullableCommunicationMethodEditType) Set(val *CommunicationMethodEditType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationMethodEditType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationMethodEditType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationMethodEditType(val *CommunicationMethodEditType) *NullableCommunicationMethodEditType {
	return &NullableCommunicationMethodEditType{value: val, isSet: true}
}

func (v NullableCommunicationMethodEditType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationMethodEditType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


