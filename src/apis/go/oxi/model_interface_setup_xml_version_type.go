/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InterfaceSetupXMLVersionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceSetupXMLVersionType{}

// InterfaceSetupXMLVersionType Type representing one XML Type Version for one Interface Setup
type InterfaceSetupXMLVersionType struct {
	// XML Type for the current record
	XMLType *string `json:"xMLType,omitempty"`
	// Maximum Version
	MaximumVersion *string `json:"maximumVersion,omitempty"`
	// Version of the current XML Type
	Version *string `json:"version,omitempty"`
}

// NewInterfaceSetupXMLVersionType instantiates a new InterfaceSetupXMLVersionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceSetupXMLVersionType() *InterfaceSetupXMLVersionType {
	this := InterfaceSetupXMLVersionType{}
	return &this
}

// NewInterfaceSetupXMLVersionTypeWithDefaults instantiates a new InterfaceSetupXMLVersionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceSetupXMLVersionTypeWithDefaults() *InterfaceSetupXMLVersionType {
	this := InterfaceSetupXMLVersionType{}
	return &this
}

// GetXMLType returns the XMLType field value if set, zero value otherwise.
func (o *InterfaceSetupXMLVersionType) GetXMLType() string {
	if o == nil || IsNil(o.XMLType) {
		var ret string
		return ret
	}
	return *o.XMLType
}

// GetXMLTypeOk returns a tuple with the XMLType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupXMLVersionType) GetXMLTypeOk() (*string, bool) {
	if o == nil || IsNil(o.XMLType) {
		return nil, false
	}
	return o.XMLType, true
}

// HasXMLType returns a boolean if a field has been set.
func (o *InterfaceSetupXMLVersionType) HasXMLType() bool {
	if o != nil && !IsNil(o.XMLType) {
		return true
	}

	return false
}

// SetXMLType gets a reference to the given string and assigns it to the XMLType field.
func (o *InterfaceSetupXMLVersionType) SetXMLType(v string) {
	o.XMLType = &v
}

// GetMaximumVersion returns the MaximumVersion field value if set, zero value otherwise.
func (o *InterfaceSetupXMLVersionType) GetMaximumVersion() string {
	if o == nil || IsNil(o.MaximumVersion) {
		var ret string
		return ret
	}
	return *o.MaximumVersion
}

// GetMaximumVersionOk returns a tuple with the MaximumVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupXMLVersionType) GetMaximumVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumVersion) {
		return nil, false
	}
	return o.MaximumVersion, true
}

// HasMaximumVersion returns a boolean if a field has been set.
func (o *InterfaceSetupXMLVersionType) HasMaximumVersion() bool {
	if o != nil && !IsNil(o.MaximumVersion) {
		return true
	}

	return false
}

// SetMaximumVersion gets a reference to the given string and assigns it to the MaximumVersion field.
func (o *InterfaceSetupXMLVersionType) SetMaximumVersion(v string) {
	o.MaximumVersion = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InterfaceSetupXMLVersionType) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceSetupXMLVersionType) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InterfaceSetupXMLVersionType) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InterfaceSetupXMLVersionType) SetVersion(v string) {
	o.Version = &v
}

func (o InterfaceSetupXMLVersionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceSetupXMLVersionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.XMLType) {
		toSerialize["xMLType"] = o.XMLType
	}
	if !IsNil(o.MaximumVersion) {
		toSerialize["maximumVersion"] = o.MaximumVersion
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableInterfaceSetupXMLVersionType struct {
	value *InterfaceSetupXMLVersionType
	isSet bool
}

func (v NullableInterfaceSetupXMLVersionType) Get() *InterfaceSetupXMLVersionType {
	return v.value
}

func (v *NullableInterfaceSetupXMLVersionType) Set(val *InterfaceSetupXMLVersionType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceSetupXMLVersionType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceSetupXMLVersionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceSetupXMLVersionType(val *InterfaceSetupXMLVersionType) *NullableInterfaceSetupXMLVersionType {
	return &NullableInterfaceSetupXMLVersionType{value: val, isSet: true}
}

func (v NullableInterfaceSetupXMLVersionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceSetupXMLVersionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


