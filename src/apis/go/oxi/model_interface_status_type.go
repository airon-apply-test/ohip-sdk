/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InterfaceStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceStatusType{}

// InterfaceStatusType Type which holds the details of Interface.
type InterfaceStatusType struct {
	// Interface ID for which processor will be started.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Hotel Code which is associated with Interface ID will be processed.
	HotelId *string `json:"hotelId,omitempty"`
	// Description of Interface ID.
	Description *string `json:"description,omitempty"`
	ProcessType *InterfaceStatusProcessTypeType `json:"processType,omitempty"`
	ProcessRole *InterfaceStatusProcessRoleType `json:"processRole,omitempty"`
	Status *ExchangeInterfaceStatusType `json:"status,omitempty"`
	Command *ExchangeInterfaceStatusCommandType `json:"command,omitempty"`
	// Indicates time at which process started.
	UpdatedTime *string `json:"updatedTime,omitempty"`
	// User who started the processor.
	User *string `json:"user,omitempty"`
	// The System type for which Interface Setups have to be listed like OXI, OXIHub.
	SystemType *string `json:"systemType,omitempty"`
}

// NewInterfaceStatusType instantiates a new InterfaceStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceStatusType() *InterfaceStatusType {
	this := InterfaceStatusType{}
	return &this
}

// NewInterfaceStatusTypeWithDefaults instantiates a new InterfaceStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceStatusTypeWithDefaults() *InterfaceStatusType {
	this := InterfaceStatusType{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *InterfaceStatusType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceStatusType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterfaceStatusType) SetDescription(v string) {
	o.Description = &v
}

// GetProcessType returns the ProcessType field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetProcessType() InterfaceStatusProcessTypeType {
	if o == nil || IsNil(o.ProcessType) {
		var ret InterfaceStatusProcessTypeType
		return ret
	}
	return *o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetProcessTypeOk() (*InterfaceStatusProcessTypeType, bool) {
	if o == nil || IsNil(o.ProcessType) {
		return nil, false
	}
	return o.ProcessType, true
}

// HasProcessType returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasProcessType() bool {
	if o != nil && !IsNil(o.ProcessType) {
		return true
	}

	return false
}

// SetProcessType gets a reference to the given InterfaceStatusProcessTypeType and assigns it to the ProcessType field.
func (o *InterfaceStatusType) SetProcessType(v InterfaceStatusProcessTypeType) {
	o.ProcessType = &v
}

// GetProcessRole returns the ProcessRole field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetProcessRole() InterfaceStatusProcessRoleType {
	if o == nil || IsNil(o.ProcessRole) {
		var ret InterfaceStatusProcessRoleType
		return ret
	}
	return *o.ProcessRole
}

// GetProcessRoleOk returns a tuple with the ProcessRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetProcessRoleOk() (*InterfaceStatusProcessRoleType, bool) {
	if o == nil || IsNil(o.ProcessRole) {
		return nil, false
	}
	return o.ProcessRole, true
}

// HasProcessRole returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasProcessRole() bool {
	if o != nil && !IsNil(o.ProcessRole) {
		return true
	}

	return false
}

// SetProcessRole gets a reference to the given InterfaceStatusProcessRoleType and assigns it to the ProcessRole field.
func (o *InterfaceStatusType) SetProcessRole(v InterfaceStatusProcessRoleType) {
	o.ProcessRole = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetStatus() ExchangeInterfaceStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ExchangeInterfaceStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetStatusOk() (*ExchangeInterfaceStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ExchangeInterfaceStatusType and assigns it to the Status field.
func (o *InterfaceStatusType) SetStatus(v ExchangeInterfaceStatusType) {
	o.Status = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetCommand() ExchangeInterfaceStatusCommandType {
	if o == nil || IsNil(o.Command) {
		var ret ExchangeInterfaceStatusCommandType
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetCommandOk() (*ExchangeInterfaceStatusCommandType, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given ExchangeInterfaceStatusCommandType and assigns it to the Command field.
func (o *InterfaceStatusType) SetCommand(v ExchangeInterfaceStatusCommandType) {
	o.Command = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetUpdatedTime() string {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret string
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given string and assigns it to the UpdatedTime field.
func (o *InterfaceStatusType) SetUpdatedTime(v string) {
	o.UpdatedTime = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *InterfaceStatusType) SetUser(v string) {
	o.User = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *InterfaceStatusType) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceStatusType) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *InterfaceStatusType) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *InterfaceStatusType) SetSystemType(v string) {
	o.SystemType = &v
}

func (o InterfaceStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProcessType) {
		toSerialize["processType"] = o.ProcessType
	}
	if !IsNil(o.ProcessRole) {
		toSerialize["processRole"] = o.ProcessRole
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.SystemType) {
		toSerialize["systemType"] = o.SystemType
	}
	return toSerialize, nil
}

type NullableInterfaceStatusType struct {
	value *InterfaceStatusType
	isSet bool
}

func (v NullableInterfaceStatusType) Get() *InterfaceStatusType {
	return v.value
}

func (v *NullableInterfaceStatusType) Set(val *InterfaceStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStatusType(val *InterfaceStatusType) *NullableInterfaceStatusType {
	return &NullableInterfaceStatusType{value: val, isSet: true}
}

func (v NullableInterfaceStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


