/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CommunicationType Define values for Communication Types. e.g. NO_COMMUNICATION for None, HTTP for HTTP/S.
type CommunicationType string

// List of communicationType
const (
	NONE CommunicationType = "None"
	HTTP CommunicationType = "Http"
)

// All allowed values of CommunicationType enum
var AllowedCommunicationTypeEnumValues = []CommunicationType{
	"None",
	"Http",
}

func (v *CommunicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommunicationType(value)
	for _, existing := range AllowedCommunicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommunicationType", value)
}

// NewCommunicationTypeFromValue returns a pointer to a valid CommunicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommunicationTypeFromValue(v string) (*CommunicationType, error) {
	ev := CommunicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommunicationType: valid values are %v", v, AllowedCommunicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommunicationType) IsValid() bool {
	for _, existing := range AllowedCommunicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to communicationType value
func (v CommunicationType) Ptr() *CommunicationType {
	return &v
}

type NullableCommunicationType struct {
	value *CommunicationType
	isSet bool
}

func (v NullableCommunicationType) Get() *CommunicationType {
	return v.value
}

func (v *NullableCommunicationType) Set(val *CommunicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationType(val *CommunicationType) *NullableCommunicationType {
	return &NullableCommunicationType{value: val, isSet: true}
}

func (v NullableCommunicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

