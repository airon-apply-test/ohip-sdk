/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExchangeStatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeStatType{}

// ExchangeStatType Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.
type ExchangeStatType struct {
	// Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.
	UnitType *string `json:"unitType,omitempty"`
	// Statistical value.
	UnitValue *float32 `json:"unitValue,omitempty"`
	UnitCategory *StatUnitCategoryType `json:"unitCategory,omitempty"`
	Code *ExchangeStatCodeType `json:"code,omitempty"`
}

// NewExchangeStatType instantiates a new ExchangeStatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeStatType() *ExchangeStatType {
	this := ExchangeStatType{}
	return &this
}

// NewExchangeStatTypeWithDefaults instantiates a new ExchangeStatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeStatTypeWithDefaults() *ExchangeStatType {
	this := ExchangeStatType{}
	return &this
}

// GetUnitType returns the UnitType field value if set, zero value otherwise.
func (o *ExchangeStatType) GetUnitType() string {
	if o == nil || IsNil(o.UnitType) {
		var ret string
		return ret
	}
	return *o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeStatType) GetUnitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitType) {
		return nil, false
	}
	return o.UnitType, true
}

// HasUnitType returns a boolean if a field has been set.
func (o *ExchangeStatType) HasUnitType() bool {
	if o != nil && !IsNil(o.UnitType) {
		return true
	}

	return false
}

// SetUnitType gets a reference to the given string and assigns it to the UnitType field.
func (o *ExchangeStatType) SetUnitType(v string) {
	o.UnitType = &v
}

// GetUnitValue returns the UnitValue field value if set, zero value otherwise.
func (o *ExchangeStatType) GetUnitValue() float32 {
	if o == nil || IsNil(o.UnitValue) {
		var ret float32
		return ret
	}
	return *o.UnitValue
}

// GetUnitValueOk returns a tuple with the UnitValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeStatType) GetUnitValueOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitValue) {
		return nil, false
	}
	return o.UnitValue, true
}

// HasUnitValue returns a boolean if a field has been set.
func (o *ExchangeStatType) HasUnitValue() bool {
	if o != nil && !IsNil(o.UnitValue) {
		return true
	}

	return false
}

// SetUnitValue gets a reference to the given float32 and assigns it to the UnitValue field.
func (o *ExchangeStatType) SetUnitValue(v float32) {
	o.UnitValue = &v
}

// GetUnitCategory returns the UnitCategory field value if set, zero value otherwise.
func (o *ExchangeStatType) GetUnitCategory() StatUnitCategoryType {
	if o == nil || IsNil(o.UnitCategory) {
		var ret StatUnitCategoryType
		return ret
	}
	return *o.UnitCategory
}

// GetUnitCategoryOk returns a tuple with the UnitCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeStatType) GetUnitCategoryOk() (*StatUnitCategoryType, bool) {
	if o == nil || IsNil(o.UnitCategory) {
		return nil, false
	}
	return o.UnitCategory, true
}

// HasUnitCategory returns a boolean if a field has been set.
func (o *ExchangeStatType) HasUnitCategory() bool {
	if o != nil && !IsNil(o.UnitCategory) {
		return true
	}

	return false
}

// SetUnitCategory gets a reference to the given StatUnitCategoryType and assigns it to the UnitCategory field.
func (o *ExchangeStatType) SetUnitCategory(v StatUnitCategoryType) {
	o.UnitCategory = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ExchangeStatType) GetCode() ExchangeStatCodeType {
	if o == nil || IsNil(o.Code) {
		var ret ExchangeStatCodeType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeStatType) GetCodeOk() (*ExchangeStatCodeType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ExchangeStatType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given ExchangeStatCodeType and assigns it to the Code field.
func (o *ExchangeStatType) SetCode(v ExchangeStatCodeType) {
	o.Code = &v
}

func (o ExchangeStatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeStatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitType) {
		toSerialize["unitType"] = o.UnitType
	}
	if !IsNil(o.UnitValue) {
		toSerialize["unitValue"] = o.UnitValue
	}
	if !IsNil(o.UnitCategory) {
		toSerialize["unitCategory"] = o.UnitCategory
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableExchangeStatType struct {
	value *ExchangeStatType
	isSet bool
}

func (v NullableExchangeStatType) Get() *ExchangeStatType {
	return v.value
}

func (v *NullableExchangeStatType) Set(val *ExchangeStatType) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeStatType) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeStatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeStatType(val *ExchangeStatType) *NullableExchangeStatType {
	return &NullableExchangeStatType{value: val, isSet: true}
}

func (v NullableExchangeStatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeStatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


