/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
)

// checks if the ConversionCodeMappingStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionCodeMappingStatusType{}

// ConversionCodeMappingStatusType A type that holds status after creating/changing a conversion code mapping.
type ConversionCodeMappingStatusType struct {
	// A flag that indicates if another Opera Value is marked as External->OPERA default for the same External Value mapping.
	OperaDefaultExists *bool `json:"operaDefaultExists,omitempty"`
	// A flag that indicates if another External Value is marked as OPERA->External default for the same Opera Value mapping.
	ExternalDefaultExists *bool `json:"externalDefaultExists,omitempty"`
}

// NewConversionCodeMappingStatusType instantiates a new ConversionCodeMappingStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionCodeMappingStatusType() *ConversionCodeMappingStatusType {
	this := ConversionCodeMappingStatusType{}
	return &this
}

// NewConversionCodeMappingStatusTypeWithDefaults instantiates a new ConversionCodeMappingStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionCodeMappingStatusTypeWithDefaults() *ConversionCodeMappingStatusType {
	this := ConversionCodeMappingStatusType{}
	return &this
}

// GetOperaDefaultExists returns the OperaDefaultExists field value if set, zero value otherwise.
func (o *ConversionCodeMappingStatusType) GetOperaDefaultExists() bool {
	if o == nil || IsNil(o.OperaDefaultExists) {
		var ret bool
		return ret
	}
	return *o.OperaDefaultExists
}

// GetOperaDefaultExistsOk returns a tuple with the OperaDefaultExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingStatusType) GetOperaDefaultExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.OperaDefaultExists) {
		return nil, false
	}
	return o.OperaDefaultExists, true
}

// HasOperaDefaultExists returns a boolean if a field has been set.
func (o *ConversionCodeMappingStatusType) HasOperaDefaultExists() bool {
	if o != nil && !IsNil(o.OperaDefaultExists) {
		return true
	}

	return false
}

// SetOperaDefaultExists gets a reference to the given bool and assigns it to the OperaDefaultExists field.
func (o *ConversionCodeMappingStatusType) SetOperaDefaultExists(v bool) {
	o.OperaDefaultExists = &v
}

// GetExternalDefaultExists returns the ExternalDefaultExists field value if set, zero value otherwise.
func (o *ConversionCodeMappingStatusType) GetExternalDefaultExists() bool {
	if o == nil || IsNil(o.ExternalDefaultExists) {
		var ret bool
		return ret
	}
	return *o.ExternalDefaultExists
}

// GetExternalDefaultExistsOk returns a tuple with the ExternalDefaultExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingStatusType) GetExternalDefaultExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalDefaultExists) {
		return nil, false
	}
	return o.ExternalDefaultExists, true
}

// HasExternalDefaultExists returns a boolean if a field has been set.
func (o *ConversionCodeMappingStatusType) HasExternalDefaultExists() bool {
	if o != nil && !IsNil(o.ExternalDefaultExists) {
		return true
	}

	return false
}

// SetExternalDefaultExists gets a reference to the given bool and assigns it to the ExternalDefaultExists field.
func (o *ConversionCodeMappingStatusType) SetExternalDefaultExists(v bool) {
	o.ExternalDefaultExists = &v
}

func (o ConversionCodeMappingStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionCodeMappingStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperaDefaultExists) {
		toSerialize["operaDefaultExists"] = o.OperaDefaultExists
	}
	if !IsNil(o.ExternalDefaultExists) {
		toSerialize["externalDefaultExists"] = o.ExternalDefaultExists
	}
	return toSerialize, nil
}

type NullableConversionCodeMappingStatusType struct {
	value *ConversionCodeMappingStatusType
	isSet bool
}

func (v NullableConversionCodeMappingStatusType) Get() *ConversionCodeMappingStatusType {
	return v.value
}

func (v *NullableConversionCodeMappingStatusType) Set(val *ConversionCodeMappingStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionCodeMappingStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionCodeMappingStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionCodeMappingStatusType(val *ConversionCodeMappingStatusType) *NullableConversionCodeMappingStatusType {
	return &NullableConversionCodeMappingStatusType{value: val, isSet: true}
}

func (v NullableConversionCodeMappingStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionCodeMappingStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


