/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConversionCodeMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionCodeMappingType{}

// ConversionCodeMappingType A common type contains basic information about Conversion Code.
type ConversionCodeMappingType struct {
	// Hotel Code of the Property.
	HotelId *string `json:"hotelId,omitempty"`
	// Identifier of the Interface.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Type of Conversion Code or user-defined function (UDF) module name configured in the system.
	ConversionCode *string `json:"conversionCode,omitempty"`
	// A flag that is true if the conversion code is an user-defined function (UDF) module code.
	UDFCode *bool `json:"uDFCode,omitempty"`
	// Conversion Code Detail Sequence Number, that uniquely identifies a mapping.
	Id *float32 `json:"id,omitempty"`
	// OPERA Code value or user-defined function (UDF) field name of the mapping.
	OperaValue *string `json:"operaValue,omitempty"`
	// A value in the External System that should be mapped to the corresponding OPERA Value or user-defined function (UDF) field.
	ExternalValue *string `json:"externalValue,omitempty"`
	// Name of the OPERA column that is used in the user-defined function (UDF) mapping.
	OperaColumn *string `json:"operaColumn,omitempty"`
	// Field name in the external system that is used in the user-defined function (UDF) mapping.
	ExternalFieldName *string `json:"externalFieldName,omitempty"`
	// Profile type of the user-defined function (UDF) definition.
	ProfileType *string `json:"profileType,omitempty"`
	// When this is true, the External Value of current record is considered to be the default mapping value, where there are more than one mapping for OPERA Value.
	OperaToExternalDefault *bool `json:"operaToExternalDefault,omitempty"`
	// When this is true, the OPERA Value of current record is considered to be the default mapping value, where there are more than one mapping for the External System Value.
	ExternalToOperaDefault *bool `json:"externalToOperaDefault,omitempty"`
	// A flag to indicate whether the current External Value should be considered as default, when there is already a default External Value mapped for the same OPERA Value.
	OverrideExternalDefault *bool `json:"overrideExternalDefault,omitempty"`
	// A flag to indicate whether the current OPERA Value should be considered as default, when there is already a default OPERA Value mapped for the same External Value.
	OverrideOperaDefault *bool `json:"overrideOperaDefault,omitempty"`
	// A flag to indicate whether the conversion code mapping is active in the system or not.
	Active *bool `json:"active,omitempty"`
	// A flag to indicate whether this conversion was manually entered or IFC created.
	IFCCreated *bool `json:"iFCCreated,omitempty"`
	// Master Value for the Conversion Code Mapping (if any), to which the OPERA mapping value corresponds to. For user-defined function (UDF) mapping, this field represents the profile type of a profile UDF definition.
	MasterValue *string `json:"masterValue,omitempty"`
}

// NewConversionCodeMappingType instantiates a new ConversionCodeMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionCodeMappingType() *ConversionCodeMappingType {
	this := ConversionCodeMappingType{}
	return &this
}

// NewConversionCodeMappingTypeWithDefaults instantiates a new ConversionCodeMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionCodeMappingTypeWithDefaults() *ConversionCodeMappingType {
	this := ConversionCodeMappingType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ConversionCodeMappingType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *ConversionCodeMappingType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetConversionCode returns the ConversionCode field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetConversionCode() string {
	if o == nil || IsNil(o.ConversionCode) {
		var ret string
		return ret
	}
	return *o.ConversionCode
}

// GetConversionCodeOk returns a tuple with the ConversionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetConversionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ConversionCode) {
		return nil, false
	}
	return o.ConversionCode, true
}

// HasConversionCode returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasConversionCode() bool {
	if o != nil && !IsNil(o.ConversionCode) {
		return true
	}

	return false
}

// SetConversionCode gets a reference to the given string and assigns it to the ConversionCode field.
func (o *ConversionCodeMappingType) SetConversionCode(v string) {
	o.ConversionCode = &v
}

// GetUDFCode returns the UDFCode field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetUDFCode() bool {
	if o == nil || IsNil(o.UDFCode) {
		var ret bool
		return ret
	}
	return *o.UDFCode
}

// GetUDFCodeOk returns a tuple with the UDFCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetUDFCodeOk() (*bool, bool) {
	if o == nil || IsNil(o.UDFCode) {
		return nil, false
	}
	return o.UDFCode, true
}

// HasUDFCode returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasUDFCode() bool {
	if o != nil && !IsNil(o.UDFCode) {
		return true
	}

	return false
}

// SetUDFCode gets a reference to the given bool and assigns it to the UDFCode field.
func (o *ConversionCodeMappingType) SetUDFCode(v bool) {
	o.UDFCode = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ConversionCodeMappingType) SetId(v float32) {
	o.Id = &v
}

// GetOperaValue returns the OperaValue field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetOperaValue() string {
	if o == nil || IsNil(o.OperaValue) {
		var ret string
		return ret
	}
	return *o.OperaValue
}

// GetOperaValueOk returns a tuple with the OperaValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetOperaValueOk() (*string, bool) {
	if o == nil || IsNil(o.OperaValue) {
		return nil, false
	}
	return o.OperaValue, true
}

// HasOperaValue returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasOperaValue() bool {
	if o != nil && !IsNil(o.OperaValue) {
		return true
	}

	return false
}

// SetOperaValue gets a reference to the given string and assigns it to the OperaValue field.
func (o *ConversionCodeMappingType) SetOperaValue(v string) {
	o.OperaValue = &v
}

// GetExternalValue returns the ExternalValue field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetExternalValue() string {
	if o == nil || IsNil(o.ExternalValue) {
		var ret string
		return ret
	}
	return *o.ExternalValue
}

// GetExternalValueOk returns a tuple with the ExternalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetExternalValueOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalValue) {
		return nil, false
	}
	return o.ExternalValue, true
}

// HasExternalValue returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasExternalValue() bool {
	if o != nil && !IsNil(o.ExternalValue) {
		return true
	}

	return false
}

// SetExternalValue gets a reference to the given string and assigns it to the ExternalValue field.
func (o *ConversionCodeMappingType) SetExternalValue(v string) {
	o.ExternalValue = &v
}

// GetOperaColumn returns the OperaColumn field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetOperaColumn() string {
	if o == nil || IsNil(o.OperaColumn) {
		var ret string
		return ret
	}
	return *o.OperaColumn
}

// GetOperaColumnOk returns a tuple with the OperaColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetOperaColumnOk() (*string, bool) {
	if o == nil || IsNil(o.OperaColumn) {
		return nil, false
	}
	return o.OperaColumn, true
}

// HasOperaColumn returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasOperaColumn() bool {
	if o != nil && !IsNil(o.OperaColumn) {
		return true
	}

	return false
}

// SetOperaColumn gets a reference to the given string and assigns it to the OperaColumn field.
func (o *ConversionCodeMappingType) SetOperaColumn(v string) {
	o.OperaColumn = &v
}

// GetExternalFieldName returns the ExternalFieldName field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetExternalFieldName() string {
	if o == nil || IsNil(o.ExternalFieldName) {
		var ret string
		return ret
	}
	return *o.ExternalFieldName
}

// GetExternalFieldNameOk returns a tuple with the ExternalFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetExternalFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFieldName) {
		return nil, false
	}
	return o.ExternalFieldName, true
}

// HasExternalFieldName returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasExternalFieldName() bool {
	if o != nil && !IsNil(o.ExternalFieldName) {
		return true
	}

	return false
}

// SetExternalFieldName gets a reference to the given string and assigns it to the ExternalFieldName field.
func (o *ConversionCodeMappingType) SetExternalFieldName(v string) {
	o.ExternalFieldName = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetProfileType() string {
	if o == nil || IsNil(o.ProfileType) {
		var ret string
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetProfileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given string and assigns it to the ProfileType field.
func (o *ConversionCodeMappingType) SetProfileType(v string) {
	o.ProfileType = &v
}

// GetOperaToExternalDefault returns the OperaToExternalDefault field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetOperaToExternalDefault() bool {
	if o == nil || IsNil(o.OperaToExternalDefault) {
		var ret bool
		return ret
	}
	return *o.OperaToExternalDefault
}

// GetOperaToExternalDefaultOk returns a tuple with the OperaToExternalDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetOperaToExternalDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.OperaToExternalDefault) {
		return nil, false
	}
	return o.OperaToExternalDefault, true
}

// HasOperaToExternalDefault returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasOperaToExternalDefault() bool {
	if o != nil && !IsNil(o.OperaToExternalDefault) {
		return true
	}

	return false
}

// SetOperaToExternalDefault gets a reference to the given bool and assigns it to the OperaToExternalDefault field.
func (o *ConversionCodeMappingType) SetOperaToExternalDefault(v bool) {
	o.OperaToExternalDefault = &v
}

// GetExternalToOperaDefault returns the ExternalToOperaDefault field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetExternalToOperaDefault() bool {
	if o == nil || IsNil(o.ExternalToOperaDefault) {
		var ret bool
		return ret
	}
	return *o.ExternalToOperaDefault
}

// GetExternalToOperaDefaultOk returns a tuple with the ExternalToOperaDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetExternalToOperaDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalToOperaDefault) {
		return nil, false
	}
	return o.ExternalToOperaDefault, true
}

// HasExternalToOperaDefault returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasExternalToOperaDefault() bool {
	if o != nil && !IsNil(o.ExternalToOperaDefault) {
		return true
	}

	return false
}

// SetExternalToOperaDefault gets a reference to the given bool and assigns it to the ExternalToOperaDefault field.
func (o *ConversionCodeMappingType) SetExternalToOperaDefault(v bool) {
	o.ExternalToOperaDefault = &v
}

// GetOverrideExternalDefault returns the OverrideExternalDefault field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetOverrideExternalDefault() bool {
	if o == nil || IsNil(o.OverrideExternalDefault) {
		var ret bool
		return ret
	}
	return *o.OverrideExternalDefault
}

// GetOverrideExternalDefaultOk returns a tuple with the OverrideExternalDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetOverrideExternalDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideExternalDefault) {
		return nil, false
	}
	return o.OverrideExternalDefault, true
}

// HasOverrideExternalDefault returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasOverrideExternalDefault() bool {
	if o != nil && !IsNil(o.OverrideExternalDefault) {
		return true
	}

	return false
}

// SetOverrideExternalDefault gets a reference to the given bool and assigns it to the OverrideExternalDefault field.
func (o *ConversionCodeMappingType) SetOverrideExternalDefault(v bool) {
	o.OverrideExternalDefault = &v
}

// GetOverrideOperaDefault returns the OverrideOperaDefault field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetOverrideOperaDefault() bool {
	if o == nil || IsNil(o.OverrideOperaDefault) {
		var ret bool
		return ret
	}
	return *o.OverrideOperaDefault
}

// GetOverrideOperaDefaultOk returns a tuple with the OverrideOperaDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetOverrideOperaDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideOperaDefault) {
		return nil, false
	}
	return o.OverrideOperaDefault, true
}

// HasOverrideOperaDefault returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasOverrideOperaDefault() bool {
	if o != nil && !IsNil(o.OverrideOperaDefault) {
		return true
	}

	return false
}

// SetOverrideOperaDefault gets a reference to the given bool and assigns it to the OverrideOperaDefault field.
func (o *ConversionCodeMappingType) SetOverrideOperaDefault(v bool) {
	o.OverrideOperaDefault = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ConversionCodeMappingType) SetActive(v bool) {
	o.Active = &v
}

// GetIFCCreated returns the IFCCreated field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetIFCCreated() bool {
	if o == nil || IsNil(o.IFCCreated) {
		var ret bool
		return ret
	}
	return *o.IFCCreated
}

// GetIFCCreatedOk returns a tuple with the IFCCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetIFCCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IFCCreated) {
		return nil, false
	}
	return o.IFCCreated, true
}

// HasIFCCreated returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasIFCCreated() bool {
	if o != nil && !IsNil(o.IFCCreated) {
		return true
	}

	return false
}

// SetIFCCreated gets a reference to the given bool and assigns it to the IFCCreated field.
func (o *ConversionCodeMappingType) SetIFCCreated(v bool) {
	o.IFCCreated = &v
}

// GetMasterValue returns the MasterValue field value if set, zero value otherwise.
func (o *ConversionCodeMappingType) GetMasterValue() string {
	if o == nil || IsNil(o.MasterValue) {
		var ret string
		return ret
	}
	return *o.MasterValue
}

// GetMasterValueOk returns a tuple with the MasterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMappingType) GetMasterValueOk() (*string, bool) {
	if o == nil || IsNil(o.MasterValue) {
		return nil, false
	}
	return o.MasterValue, true
}

// HasMasterValue returns a boolean if a field has been set.
func (o *ConversionCodeMappingType) HasMasterValue() bool {
	if o != nil && !IsNil(o.MasterValue) {
		return true
	}

	return false
}

// SetMasterValue gets a reference to the given string and assigns it to the MasterValue field.
func (o *ConversionCodeMappingType) SetMasterValue(v string) {
	o.MasterValue = &v
}

func (o ConversionCodeMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionCodeMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.ConversionCode) {
		toSerialize["conversionCode"] = o.ConversionCode
	}
	if !IsNil(o.UDFCode) {
		toSerialize["uDFCode"] = o.UDFCode
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OperaValue) {
		toSerialize["operaValue"] = o.OperaValue
	}
	if !IsNil(o.ExternalValue) {
		toSerialize["externalValue"] = o.ExternalValue
	}
	if !IsNil(o.OperaColumn) {
		toSerialize["operaColumn"] = o.OperaColumn
	}
	if !IsNil(o.ExternalFieldName) {
		toSerialize["externalFieldName"] = o.ExternalFieldName
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	if !IsNil(o.OperaToExternalDefault) {
		toSerialize["operaToExternalDefault"] = o.OperaToExternalDefault
	}
	if !IsNil(o.ExternalToOperaDefault) {
		toSerialize["externalToOperaDefault"] = o.ExternalToOperaDefault
	}
	if !IsNil(o.OverrideExternalDefault) {
		toSerialize["overrideExternalDefault"] = o.OverrideExternalDefault
	}
	if !IsNil(o.OverrideOperaDefault) {
		toSerialize["overrideOperaDefault"] = o.OverrideOperaDefault
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.IFCCreated) {
		toSerialize["iFCCreated"] = o.IFCCreated
	}
	if !IsNil(o.MasterValue) {
		toSerialize["masterValue"] = o.MasterValue
	}
	return toSerialize, nil
}

type NullableConversionCodeMappingType struct {
	value *ConversionCodeMappingType
	isSet bool
}

func (v NullableConversionCodeMappingType) Get() *ConversionCodeMappingType {
	return v.value
}

func (v *NullableConversionCodeMappingType) Set(val *ConversionCodeMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionCodeMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionCodeMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionCodeMappingType(val *ConversionCodeMappingType) *NullableConversionCodeMappingType {
	return &NullableConversionCodeMappingType{value: val, isSet: true}
}

func (v NullableConversionCodeMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionCodeMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


