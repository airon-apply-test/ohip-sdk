/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
)

// checks if the IdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdType{}

// IdType struct for IdType
type IdType struct {
	// Used for Character Strings, length 0 to 20.
	Value *string `json:"value,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewIdType instantiates a new IdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdType() *IdType {
	this := IdType{}
	return &this
}

// NewIdTypeWithDefaults instantiates a new IdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdTypeWithDefaults() *IdType {
	this := IdType{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IdType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IdType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IdType) SetValue(v string) {
	o.Value = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IdType) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdType) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IdType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *IdType) SetSource(v string) {
	o.Source = &v
}

func (o IdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableIdType struct {
	value *IdType
	isSet bool
}

func (v NullableIdType) Get() *IdType {
	return v.value
}

func (v *NullableIdType) Set(val *IdType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdType(val *IdType) *NullableIdType {
	return &NullableIdType{value: val, isSet: true}
}

func (v NullableIdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


