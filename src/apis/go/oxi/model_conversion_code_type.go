/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxi

import (
	"encoding/json"
)

// checks if the ConversionCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionCodeType{}

// ConversionCodeType A common type contains basic information about Conversion Code.
type ConversionCodeType struct {
	// Hotel Code of the Property.
	HotelId *string `json:"hotelId,omitempty"`
	// Identifier of the Interface.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Type of Conversion Code or user-defined function (UDF) module name configured in the system.
	ConversionCode *string `json:"conversionCode,omitempty"`
	// A flag that is true if the conversion code is an user-defined function (UDF) module code.
	UDFCode *bool `json:"uDFCode,omitempty"`
	// Label of the Conversion Code that is displayed in UI.
	Label *string `json:"label,omitempty"`
	// Description of the Conversion Code.
	Description *string `json:"description,omitempty"`
	// A field that distinguishes active and inactive Conversion Codes.
	Active *bool `json:"active,omitempty"`
	// XML Types for the Conversion Code.
	Group *string `json:"group,omitempty"`
	Master *ConversionCodeMasterType `json:"master,omitempty"`
}

// NewConversionCodeType instantiates a new ConversionCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionCodeType() *ConversionCodeType {
	this := ConversionCodeType{}
	return &this
}

// NewConversionCodeTypeWithDefaults instantiates a new ConversionCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionCodeTypeWithDefaults() *ConversionCodeType {
	this := ConversionCodeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ConversionCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ConversionCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ConversionCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *ConversionCodeType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *ConversionCodeType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *ConversionCodeType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetConversionCode returns the ConversionCode field value if set, zero value otherwise.
func (o *ConversionCodeType) GetConversionCode() string {
	if o == nil || IsNil(o.ConversionCode) {
		var ret string
		return ret
	}
	return *o.ConversionCode
}

// GetConversionCodeOk returns a tuple with the ConversionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetConversionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ConversionCode) {
		return nil, false
	}
	return o.ConversionCode, true
}

// HasConversionCode returns a boolean if a field has been set.
func (o *ConversionCodeType) HasConversionCode() bool {
	if o != nil && !IsNil(o.ConversionCode) {
		return true
	}

	return false
}

// SetConversionCode gets a reference to the given string and assigns it to the ConversionCode field.
func (o *ConversionCodeType) SetConversionCode(v string) {
	o.ConversionCode = &v
}

// GetUDFCode returns the UDFCode field value if set, zero value otherwise.
func (o *ConversionCodeType) GetUDFCode() bool {
	if o == nil || IsNil(o.UDFCode) {
		var ret bool
		return ret
	}
	return *o.UDFCode
}

// GetUDFCodeOk returns a tuple with the UDFCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetUDFCodeOk() (*bool, bool) {
	if o == nil || IsNil(o.UDFCode) {
		return nil, false
	}
	return o.UDFCode, true
}

// HasUDFCode returns a boolean if a field has been set.
func (o *ConversionCodeType) HasUDFCode() bool {
	if o != nil && !IsNil(o.UDFCode) {
		return true
	}

	return false
}

// SetUDFCode gets a reference to the given bool and assigns it to the UDFCode field.
func (o *ConversionCodeType) SetUDFCode(v bool) {
	o.UDFCode = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ConversionCodeType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ConversionCodeType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ConversionCodeType) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConversionCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConversionCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConversionCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ConversionCodeType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ConversionCodeType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ConversionCodeType) SetActive(v bool) {
	o.Active = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ConversionCodeType) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ConversionCodeType) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ConversionCodeType) SetGroup(v string) {
	o.Group = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *ConversionCodeType) GetMaster() ConversionCodeMasterType {
	if o == nil || IsNil(o.Master) {
		var ret ConversionCodeMasterType
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeType) GetMasterOk() (*ConversionCodeMasterType, bool) {
	if o == nil || IsNil(o.Master) {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *ConversionCodeType) HasMaster() bool {
	if o != nil && !IsNil(o.Master) {
		return true
	}

	return false
}

// SetMaster gets a reference to the given ConversionCodeMasterType and assigns it to the Master field.
func (o *ConversionCodeType) SetMaster(v ConversionCodeMasterType) {
	o.Master = &v
}

func (o ConversionCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.ConversionCode) {
		toSerialize["conversionCode"] = o.ConversionCode
	}
	if !IsNil(o.UDFCode) {
		toSerialize["uDFCode"] = o.UDFCode
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Master) {
		toSerialize["master"] = o.Master
	}
	return toSerialize, nil
}

type NullableConversionCodeType struct {
	value *ConversionCodeType
	isSet bool
}

func (v NullableConversionCodeType) Get() *ConversionCodeType {
	return v.value
}

func (v *NullableConversionCodeType) Set(val *ConversionCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionCodeType(val *ConversionCodeType) *NullableConversionCodeType {
	return &NullableConversionCodeType{value: val, isSet: true}
}

func (v NullableConversionCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


