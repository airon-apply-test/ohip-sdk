/*
OPERA Cloud Xchange Interface OXI API

APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 23.0.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConversionCodeMasterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionCodeMasterType{}

// ConversionCodeMasterType A type that holds details of master code, that the conversion code depends on.
type ConversionCodeMasterType struct {
	// Value of the master code that the conversion code depends on.
	Code *string `json:"code,omitempty"`
	// Label of the master code.
	Label *string `json:"label,omitempty"`
}

// NewConversionCodeMasterType instantiates a new ConversionCodeMasterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionCodeMasterType() *ConversionCodeMasterType {
	this := ConversionCodeMasterType{}
	return &this
}

// NewConversionCodeMasterTypeWithDefaults instantiates a new ConversionCodeMasterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionCodeMasterTypeWithDefaults() *ConversionCodeMasterType {
	this := ConversionCodeMasterType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConversionCodeMasterType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMasterType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConversionCodeMasterType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ConversionCodeMasterType) SetCode(v string) {
	o.Code = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ConversionCodeMasterType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionCodeMasterType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ConversionCodeMasterType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ConversionCodeMasterType) SetLabel(v string) {
	o.Label = &v
}

func (o ConversionCodeMasterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionCodeMasterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableConversionCodeMasterType struct {
	value *ConversionCodeMasterType
	isSet bool
}

func (v NullableConversionCodeMasterType) Get() *ConversionCodeMasterType {
	return v.value
}

func (v *NullableConversionCodeMasterType) Set(val *ConversionCodeMasterType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionCodeMasterType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionCodeMasterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionCodeMasterType(val *ConversionCodeMasterType) *NullableConversionCodeMasterType {
	return &NullableConversionCodeMasterType{value: val, isSet: true}
}

func (v NullableConversionCodeMasterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionCodeMasterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


