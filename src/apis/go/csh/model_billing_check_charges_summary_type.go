/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BillingCheckChargesSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingCheckChargesSummaryType{}

// BillingCheckChargesSummaryType Summary of the check with line item charges posted to a guest folio.
type BillingCheckChargesSummaryType struct {
	// Indicates the check number.
	CheckNumber *string `json:"checkNumber,omitempty"`
	// The date on which the transaction has its revenue effect.
	RevenueDate *string `json:"revenueDate,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
}

// NewBillingCheckChargesSummaryType instantiates a new BillingCheckChargesSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingCheckChargesSummaryType() *BillingCheckChargesSummaryType {
	this := BillingCheckChargesSummaryType{}
	return &this
}

// NewBillingCheckChargesSummaryTypeWithDefaults instantiates a new BillingCheckChargesSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingCheckChargesSummaryTypeWithDefaults() *BillingCheckChargesSummaryType {
	this := BillingCheckChargesSummaryType{}
	return &this
}

// GetCheckNumber returns the CheckNumber field value if set, zero value otherwise.
func (o *BillingCheckChargesSummaryType) GetCheckNumber() string {
	if o == nil || IsNil(o.CheckNumber) {
		var ret string
		return ret
	}
	return *o.CheckNumber
}

// GetCheckNumberOk returns a tuple with the CheckNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummaryType) GetCheckNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CheckNumber) {
		return nil, false
	}
	return o.CheckNumber, true
}

// HasCheckNumber returns a boolean if a field has been set.
func (o *BillingCheckChargesSummaryType) HasCheckNumber() bool {
	if o != nil && !IsNil(o.CheckNumber) {
		return true
	}

	return false
}

// SetCheckNumber gets a reference to the given string and assigns it to the CheckNumber field.
func (o *BillingCheckChargesSummaryType) SetCheckNumber(v string) {
	o.CheckNumber = &v
}

// GetRevenueDate returns the RevenueDate field value if set, zero value otherwise.
func (o *BillingCheckChargesSummaryType) GetRevenueDate() string {
	if o == nil || IsNil(o.RevenueDate) {
		var ret string
		return ret
	}
	return *o.RevenueDate
}

// GetRevenueDateOk returns a tuple with the RevenueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummaryType) GetRevenueDateOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueDate) {
		return nil, false
	}
	return o.RevenueDate, true
}

// HasRevenueDate returns a boolean if a field has been set.
func (o *BillingCheckChargesSummaryType) HasRevenueDate() bool {
	if o != nil && !IsNil(o.RevenueDate) {
		return true
	}

	return false
}

// SetRevenueDate gets a reference to the given string and assigns it to the RevenueDate field.
func (o *BillingCheckChargesSummaryType) SetRevenueDate(v string) {
	o.RevenueDate = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *BillingCheckChargesSummaryType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummaryType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *BillingCheckChargesSummaryType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *BillingCheckChargesSummaryType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

func (o BillingCheckChargesSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingCheckChargesSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckNumber) {
		toSerialize["checkNumber"] = o.CheckNumber
	}
	if !IsNil(o.RevenueDate) {
		toSerialize["revenueDate"] = o.RevenueDate
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	return toSerialize, nil
}

type NullableBillingCheckChargesSummaryType struct {
	value *BillingCheckChargesSummaryType
	isSet bool
}

func (v NullableBillingCheckChargesSummaryType) Get() *BillingCheckChargesSummaryType {
	return v.value
}

func (v *NullableBillingCheckChargesSummaryType) Set(val *BillingCheckChargesSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCheckChargesSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCheckChargesSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCheckChargesSummaryType(val *BillingCheckChargesSummaryType) *NullableBillingCheckChargesSummaryType {
	return &NullableBillingCheckChargesSummaryType{value: val, isSet: true}
}

func (v NullableBillingCheckChargesSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCheckChargesSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


