/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the BillingCheckChargesSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingCheckChargesSummary{}

// BillingCheckChargesSummary Response object for PostBillingCheckCharges operation.
type BillingCheckChargesSummary struct {
	Check *BillingCheckChargesSummaryType `json:"check,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewBillingCheckChargesSummary instantiates a new BillingCheckChargesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingCheckChargesSummary() *BillingCheckChargesSummary {
	this := BillingCheckChargesSummary{}
	return &this
}

// NewBillingCheckChargesSummaryWithDefaults instantiates a new BillingCheckChargesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingCheckChargesSummaryWithDefaults() *BillingCheckChargesSummary {
	this := BillingCheckChargesSummary{}
	return &this
}

// GetCheck returns the Check field value if set, zero value otherwise.
func (o *BillingCheckChargesSummary) GetCheck() BillingCheckChargesSummaryType {
	if o == nil || IsNil(o.Check) {
		var ret BillingCheckChargesSummaryType
		return ret
	}
	return *o.Check
}

// GetCheckOk returns a tuple with the Check field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummary) GetCheckOk() (*BillingCheckChargesSummaryType, bool) {
	if o == nil || IsNil(o.Check) {
		return nil, false
	}
	return o.Check, true
}

// HasCheck returns a boolean if a field has been set.
func (o *BillingCheckChargesSummary) HasCheck() bool {
	if o != nil && !IsNil(o.Check) {
		return true
	}

	return false
}

// SetCheck gets a reference to the given BillingCheckChargesSummaryType and assigns it to the Check field.
func (o *BillingCheckChargesSummary) SetCheck(v BillingCheckChargesSummaryType) {
	o.Check = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BillingCheckChargesSummary) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummary) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BillingCheckChargesSummary) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *BillingCheckChargesSummary) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BillingCheckChargesSummary) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingCheckChargesSummary) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BillingCheckChargesSummary) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *BillingCheckChargesSummary) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o BillingCheckChargesSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingCheckChargesSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Check) {
		toSerialize["check"] = o.Check
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBillingCheckChargesSummary struct {
	value *BillingCheckChargesSummary
	isSet bool
}

func (v NullableBillingCheckChargesSummary) Get() *BillingCheckChargesSummary {
	return v.value
}

func (v *NullableBillingCheckChargesSummary) Set(val *BillingCheckChargesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCheckChargesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCheckChargesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCheckChargesSummary(val *BillingCheckChargesSummary) *NullableBillingCheckChargesSummary {
	return &NullableBillingCheckChargesSummary{value: val, isSet: true}
}

func (v NullableBillingCheckChargesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCheckChargesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


