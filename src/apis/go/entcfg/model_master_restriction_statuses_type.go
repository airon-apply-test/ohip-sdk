/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 21.5.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MasterRestrictionStatusesType the model 'MasterRestrictionStatusesType'
type MasterRestrictionStatusesType string

// List of masterRestrictionStatusesType
const (
	CLOSED MasterRestrictionStatusesType = "Closed"
	CLOSED_FOR_ARRIVAL MasterRestrictionStatusesType = "ClosedForArrival"
	CLOSED_FOR_DEPARTURE MasterRestrictionStatusesType = "ClosedForDeparture"
	MINIMUM_STAY_THROUGH MasterRestrictionStatusesType = "MinimumStayThrough"
	MAXIMUM_STAY_THROUGH MasterRestrictionStatusesType = "MaximumStayThrough"
	MINIMUM_LENGTH_OF_STAY MasterRestrictionStatusesType = "MinimumLengthOfStay"
	MAXIMUM_LENGTH_OF_STAY MasterRestrictionStatusesType = "MaximumLengthOfStay"
	LOS_NOT_AVAILABLE MasterRestrictionStatusesType = "LOSNotAvailable"
	MINIMUM_ADVANCE_BOOKING MasterRestrictionStatusesType = "MinimumAdvanceBooking"
	MAXIMUM_ADVANCE_BOOKING MasterRestrictionStatusesType = "MaximumAdvanceBooking"
	OPEN MasterRestrictionStatusesType = "Open"
	OPEN_FOR_ARRIVAL MasterRestrictionStatusesType = "OpenForArrival"
	OPEN_FOR_DEPARTURE MasterRestrictionStatusesType = "OpenForDeparture"
	HURDLE MasterRestrictionStatusesType = "Hurdle"
	MINIMUM_OCCUPANCY MasterRestrictionStatusesType = "MinimumOccupancy"
	MAXIMUM_OCCUPANCY MasterRestrictionStatusesType = "MaximumOccupancy"
	RATE_STRATEGY MasterRestrictionStatusesType = "RateStrategy"
	RATE_DETAILS_NOT_SET MasterRestrictionStatusesType = "RateDetailsNotSet"
	INVENTORY_ITEM_NOT_AVAILABLE MasterRestrictionStatusesType = "InventoryItemNotAvailable"
	RANK_RESTRICTION MasterRestrictionStatusesType = "RankRestriction"
	MAXIMUM_AUTH MasterRestrictionStatusesType = "MaximumAuth"
	INVENTORY_NOT_AVAILABLE MasterRestrictionStatusesType = "InventoryNotAvailable"
	ROOM_CLASS_NOT_AVAILABLE MasterRestrictionStatusesType = "RoomClassNotAvailable"
	ROOM_TYPE_NOT_AVAILABLE MasterRestrictionStatusesType = "RoomTypeNotAvailable"
	BLOCK_SELL_LIMIT MasterRestrictionStatusesType = "BlockSellLimit"
	ON_REQUEST MasterRestrictionStatusesType = "OnRequest"
)

// All allowed values of MasterRestrictionStatusesType enum
var AllowedMasterRestrictionStatusesTypeEnumValues = []MasterRestrictionStatusesType{
	"Closed",
	"ClosedForArrival",
	"ClosedForDeparture",
	"MinimumStayThrough",
	"MaximumStayThrough",
	"MinimumLengthOfStay",
	"MaximumLengthOfStay",
	"LOSNotAvailable",
	"MinimumAdvanceBooking",
	"MaximumAdvanceBooking",
	"Open",
	"OpenForArrival",
	"OpenForDeparture",
	"Hurdle",
	"MinimumOccupancy",
	"MaximumOccupancy",
	"RateStrategy",
	"RateDetailsNotSet",
	"InventoryItemNotAvailable",
	"RankRestriction",
	"MaximumAuth",
	"InventoryNotAvailable",
	"RoomClassNotAvailable",
	"RoomTypeNotAvailable",
	"BlockSellLimit",
	"OnRequest",
}

func (v *MasterRestrictionStatusesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MasterRestrictionStatusesType(value)
	for _, existing := range AllowedMasterRestrictionStatusesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MasterRestrictionStatusesType", value)
}

// NewMasterRestrictionStatusesTypeFromValue returns a pointer to a valid MasterRestrictionStatusesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMasterRestrictionStatusesTypeFromValue(v string) (*MasterRestrictionStatusesType, error) {
	ev := MasterRestrictionStatusesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MasterRestrictionStatusesType: valid values are %v", v, AllowedMasterRestrictionStatusesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MasterRestrictionStatusesType) IsValid() bool {
	for _, existing := range AllowedMasterRestrictionStatusesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to masterRestrictionStatusesType value
func (v MasterRestrictionStatusesType) Ptr() *MasterRestrictionStatusesType {
	return &v
}

type NullableMasterRestrictionStatusesType struct {
	value *MasterRestrictionStatusesType
	isSet bool
}

func (v NullableMasterRestrictionStatusesType) Get() *MasterRestrictionStatusesType {
	return v.value
}

func (v *NullableMasterRestrictionStatusesType) Set(val *MasterRestrictionStatusesType) {
	v.value = val
	v.isSet = true
}

func (v NullableMasterRestrictionStatusesType) IsSet() bool {
	return v.isSet
}

func (v *NullableMasterRestrictionStatusesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMasterRestrictionStatusesType(val *MasterRestrictionStatusesType) *NullableMasterRestrictionStatusesType {
	return &NullableMasterRestrictionStatusesType{value: val, isSet: true}
}

func (v NullableMasterRestrictionStatusesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMasterRestrictionStatusesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

