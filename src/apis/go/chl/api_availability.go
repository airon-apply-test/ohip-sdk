/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AvailabilityApiService AvailabilityApi service
type AvailabilityApiService service

type ApiGetChannelInventorySnapshotRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	fromDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	endDate *string
	duration *string
	bookingChannelCodes *[]string
	channelRoomTypes *[]string
	snapshotLevel *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r ApiGetChannelInventorySnapshotRequest) FromDate(fromDate string) ApiGetChannelInventorySnapshotRequest {
	r.fromDate = &fromDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetChannelInventorySnapshotRequest) Authorization(authorization string) ApiGetChannelInventorySnapshotRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetChannelInventorySnapshotRequest) XAppKey(xAppKey string) ApiGetChannelInventorySnapshotRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetChannelInventorySnapshotRequest) XHotelid(xHotelid string) ApiGetChannelInventorySnapshotRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Friday(friday bool) ApiGetChannelInventorySnapshotRequest {
	r.friday = &friday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Monday(monday bool) ApiGetChannelInventorySnapshotRequest {
	r.monday = &monday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Saturday(saturday bool) ApiGetChannelInventorySnapshotRequest {
	r.saturday = &saturday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Sunday(sunday bool) ApiGetChannelInventorySnapshotRequest {
	r.sunday = &sunday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Thursday(thursday bool) ApiGetChannelInventorySnapshotRequest {
	r.thursday = &thursday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Tuesday(tuesday bool) ApiGetChannelInventorySnapshotRequest {
	r.tuesday = &tuesday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Wednesday(wednesday bool) ApiGetChannelInventorySnapshotRequest {
	r.wednesday = &wednesday
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) EndDate(endDate string) ApiGetChannelInventorySnapshotRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Duration(duration string) ApiGetChannelInventorySnapshotRequest {
	r.duration = &duration
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) BookingChannelCodes(bookingChannelCodes []string) ApiGetChannelInventorySnapshotRequest {
	r.bookingChannelCodes = &bookingChannelCodes
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) ChannelRoomTypes(channelRoomTypes []string) ApiGetChannelInventorySnapshotRequest {
	r.channelRoomTypes = &channelRoomTypes
	return r
}

// Indicates to evaluate statistics for house, channel, and room type level. Must include the specific booking channel in the search criteria.
func (r ApiGetChannelInventorySnapshotRequest) SnapshotLevel(snapshotLevel string) ApiGetChannelInventorySnapshotRequest {
	r.snapshotLevel = &snapshotLevel
	return r
}

// External system code.
func (r ApiGetChannelInventorySnapshotRequest) XExternalsystem(xExternalsystem string) ApiGetChannelInventorySnapshotRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetChannelInventorySnapshotRequest) AcceptLanguage(acceptLanguage string) ApiGetChannelInventorySnapshotRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetChannelInventorySnapshotRequest) Execute() (*ChannelInventorySnapshot, *http.Response, error) {
	return r.ApiService.GetChannelInventorySnapshotExecute(r)
}

/*
GetChannelInventorySnapshot Gets hotel's rooms and restrictions channel availability

Operation to fetch the room availability and restrictions for a given property in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshot</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetChannelInventorySnapshotRequest
*/
func (a *AvailabilityApiService) GetChannelInventorySnapshot(ctx context.Context, hotelId string) ApiGetChannelInventorySnapshotRequest {
	return ApiGetChannelInventorySnapshotRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChannelInventorySnapshot
func (a *AvailabilityApiService) GetChannelInventorySnapshotExecute(r ApiGetChannelInventorySnapshotRequest) (*ChannelInventorySnapshot, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChannelInventorySnapshot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetChannelInventorySnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/inventorySnapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.fromDate == nil {
		return localVarReturnValue, nil, reportError("fromDate is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
	}
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
	}
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
	}
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
	}
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
	}
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
	}
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.bookingChannelCodes != nil {
		t := *r.bookingChannelCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bookingChannelCodes", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bookingChannelCodes", t, "multi")
		}
	}
	if r.channelRoomTypes != nil {
		t := *r.channelRoomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelRoomTypes", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelRoomTypes", t, "multi")
		}
	}
	if r.snapshotLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "snapshotLevel", r.snapshotLevel, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChannelInventorySnapshotByRoomTypeRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	roomTypeCode string
	channelCode string
	hotelId string
	fromDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	endDate *string
	duration *string
	snapshotLevel *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) FromDate(fromDate string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.fromDate = &fromDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Authorization(authorization string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) XAppKey(xAppKey string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) XHotelid(xHotelid string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Friday(friday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.friday = &friday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Monday(monday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.monday = &monday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Saturday(saturday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.saturday = &saturday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Sunday(sunday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.sunday = &sunday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Thursday(thursday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.thursday = &thursday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Tuesday(tuesday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.tuesday = &tuesday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Wednesday(wednesday bool) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.wednesday = &wednesday
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) EndDate(endDate string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Duration(duration string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.duration = &duration
	return r
}

// Indicates to evaluate statistics for house, channel, and room type level. Must include the specific booking channel in the search criteria.
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) SnapshotLevel(snapshotLevel string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.snapshotLevel = &snapshotLevel
	return r
}

// External system code.
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) XExternalsystem(xExternalsystem string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) AcceptLanguage(acceptLanguage string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetChannelInventorySnapshotByRoomTypeRequest) Execute() (*ChannelInventorySnapshot, *http.Response, error) {
	return r.ApiService.GetChannelInventorySnapshotByRoomTypeExecute(r)
}

/*
GetChannelInventorySnapshotByRoomType Gets hotel room's restrictions and channel availability

Operation to fetch the room availability and restrictions for a given property and room type in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshotByRoomType</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomTypeCode Room Type Code.
 @param channelCode Channel Code.
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetChannelInventorySnapshotByRoomTypeRequest
*/
func (a *AvailabilityApiService) GetChannelInventorySnapshotByRoomType(ctx context.Context, roomTypeCode string, channelCode string, hotelId string) ApiGetChannelInventorySnapshotByRoomTypeRequest {
	return ApiGetChannelInventorySnapshotByRoomTypeRequest{
		ApiService: a,
		ctx: ctx,
		roomTypeCode: roomTypeCode,
		channelCode: channelCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChannelInventorySnapshot
func (a *AvailabilityApiService) GetChannelInventorySnapshotByRoomTypeExecute(r ApiGetChannelInventorySnapshotByRoomTypeRequest) (*ChannelInventorySnapshot, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChannelInventorySnapshot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetChannelInventorySnapshotByRoomType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}/inventorySnapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"roomTypeCode"+"}", url.PathEscape(parameterValueToString(r.roomTypeCode, "roomTypeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"channelCode"+"}", url.PathEscape(parameterValueToString(r.channelCode, "channelCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.roomTypeCode) < 1 {
		return localVarReturnValue, nil, reportError("roomTypeCode must have at least 1 elements")
	}
	if strlen(r.roomTypeCode) > 2000 {
		return localVarReturnValue, nil, reportError("roomTypeCode must have less than 2000 elements")
	}
	if strlen(r.channelCode) < 1 {
		return localVarReturnValue, nil, reportError("channelCode must have at least 1 elements")
	}
	if strlen(r.channelCode) > 2000 {
		return localVarReturnValue, nil, reportError("channelCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.fromDate == nil {
		return localVarReturnValue, nil, reportError("fromDate is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
	}
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
	}
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
	}
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
	}
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
	}
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
	}
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.snapshotLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "snapshotLevel", r.snapshotLevel, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGeneralAvailabilitySimulatorRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	bookingChannelCode *string
	arrival *string
	adults *int32
	nights *int32
	children *int32
	noOfRooms *int32
	channelRatePlanCode *[]string
	rateAccessCode *string
	corpIdIATA *string
	inventoryBlockCode *string
	promotionCode *string
	currencyCode *string
	language *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetGeneralAvailabilitySimulatorRequest) Authorization(authorization string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetGeneralAvailabilitySimulatorRequest) XAppKey(xAppKey string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetGeneralAvailabilitySimulatorRequest) XHotelid(xHotelid string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ApiGetGeneralAvailabilitySimulatorRequest) Limit(limit int32) ApiGetGeneralAvailabilitySimulatorRequest {
	r.limit = &limit
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) BookingChannelCode(bookingChannelCode string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.bookingChannelCode = &bookingChannelCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Arrival(arrival string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.arrival = &arrival
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Adults(adults int32) ApiGetGeneralAvailabilitySimulatorRequest {
	r.adults = &adults
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Nights(nights int32) ApiGetGeneralAvailabilitySimulatorRequest {
	r.nights = &nights
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Children(children int32) ApiGetGeneralAvailabilitySimulatorRequest {
	r.children = &children
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) NoOfRooms(noOfRooms int32) ApiGetGeneralAvailabilitySimulatorRequest {
	r.noOfRooms = &noOfRooms
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) ChannelRatePlanCode(channelRatePlanCode []string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.channelRatePlanCode = &channelRatePlanCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) RateAccessCode(rateAccessCode string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.rateAccessCode = &rateAccessCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) CorpIdIATA(corpIdIATA string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.corpIdIATA = &corpIdIATA
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) InventoryBlockCode(inventoryBlockCode string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.inventoryBlockCode = &inventoryBlockCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) PromotionCode(promotionCode string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.promotionCode = &promotionCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) CurrencyCode(currencyCode string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.currencyCode = &currencyCode
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Language(language string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.language = &language
	return r
}

// External system code.
func (r ApiGetGeneralAvailabilitySimulatorRequest) XExternalsystem(xExternalsystem string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetGeneralAvailabilitySimulatorRequest) AcceptLanguage(acceptLanguage string) ApiGetGeneralAvailabilitySimulatorRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetGeneralAvailabilitySimulatorRequest) Execute() (*GeneralAvailabilitySimulator, *http.Response, error) {
	return r.ApiService.GetGeneralAvailabilitySimulatorExecute(r)
}

/*
GetGeneralAvailabilitySimulator Gets the General Availability

Use this API to fetch the General Availability Simulator. <p><strong>OperationId:</strong>getGeneralAvailabilitySimulator</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetGeneralAvailabilitySimulatorRequest
*/
func (a *AvailabilityApiService) GetGeneralAvailabilitySimulator(ctx context.Context, hotelId string) ApiGetGeneralAvailabilitySimulatorRequest {
	return ApiGetGeneralAvailabilitySimulatorRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GeneralAvailabilitySimulator
func (a *AvailabilityApiService) GetGeneralAvailabilitySimulatorExecute(r ApiGetGeneralAvailabilitySimulatorRequest) (*GeneralAvailabilitySimulator, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GeneralAvailabilitySimulator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetGeneralAvailabilitySimulator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/generalAvailabilitySimulator"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.bookingChannelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookingChannelCode", r.bookingChannelCode, "")
	}
	if r.arrival != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrival", r.arrival, "")
	}
	if r.adults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adults", r.adults, "")
	}
	if r.nights != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nights", r.nights, "")
	}
	if r.children != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "children", r.children, "")
	}
	if r.noOfRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "noOfRooms", r.noOfRooms, "")
	}
	if r.channelRatePlanCode != nil {
		t := *r.channelRatePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", t, "multi")
		}
	}
	if r.rateAccessCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateAccessCode", r.rateAccessCode, "")
	}
	if r.corpIdIATA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "corpIdIATA", r.corpIdIATA, "")
	}
	if r.inventoryBlockCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryBlockCode", r.inventoryBlockCode, "")
	}
	if r.promotionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", r.promotionCode, "")
	}
	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRateParityRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	comparisonType *string
	language *string
	limit *int32
	numberOfDays *int32
	channelCode *[]string
	roomType *[]string
	ratePlanCode *[]string
	channelRoomType *[]string
	channelRatePlanCode *[]string
	chainCode *[]string
	rateAccessCode *string
	inventoryBlockCode *string
	promotionCode *string
	qualifyingProfileCategory *string
	qualifyingProfileId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetRateParityRequest) Authorization(authorization string) ApiGetRateParityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetRateParityRequest) XAppKey(xAppKey string) ApiGetRateParityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetRateParityRequest) XHotelid(xHotelid string) ApiGetRateParityRequest {
	r.xHotelid = &xHotelid
	return r
}

// An enumerated type defining the Parity Comparison type. Values: FIRST_RATES, CHANNEL_RATES. CHANNEL_RATES requires HotelCode and BookingChannelCode as part of request.
func (r ApiGetRateParityRequest) ComparisonType(comparisonType string) ApiGetRateParityRequest {
	r.comparisonType = &comparisonType
	return r
}

// Language identification.
func (r ApiGetRateParityRequest) Language(language string) ApiGetRateParityRequest {
	r.language = &language
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ApiGetRateParityRequest) Limit(limit int32) ApiGetRateParityRequest {
	r.limit = &limit
	return r
}

func (r ApiGetRateParityRequest) NumberOfDays(numberOfDays int32) ApiGetRateParityRequest {
	r.numberOfDays = &numberOfDays
	return r
}

func (r ApiGetRateParityRequest) ChannelCode(channelCode []string) ApiGetRateParityRequest {
	r.channelCode = &channelCode
	return r
}

func (r ApiGetRateParityRequest) RoomType(roomType []string) ApiGetRateParityRequest {
	r.roomType = &roomType
	return r
}

func (r ApiGetRateParityRequest) RatePlanCode(ratePlanCode []string) ApiGetRateParityRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

func (r ApiGetRateParityRequest) ChannelRoomType(channelRoomType []string) ApiGetRateParityRequest {
	r.channelRoomType = &channelRoomType
	return r
}

func (r ApiGetRateParityRequest) ChannelRatePlanCode(channelRatePlanCode []string) ApiGetRateParityRequest {
	r.channelRatePlanCode = &channelRatePlanCode
	return r
}

func (r ApiGetRateParityRequest) ChainCode(chainCode []string) ApiGetRateParityRequest {
	r.chainCode = &chainCode
	return r
}

func (r ApiGetRateParityRequest) RateAccessCode(rateAccessCode string) ApiGetRateParityRequest {
	r.rateAccessCode = &rateAccessCode
	return r
}

func (r ApiGetRateParityRequest) InventoryBlockCode(inventoryBlockCode string) ApiGetRateParityRequest {
	r.inventoryBlockCode = &inventoryBlockCode
	return r
}

func (r ApiGetRateParityRequest) PromotionCode(promotionCode string) ApiGetRateParityRequest {
	r.promotionCode = &promotionCode
	return r
}

func (r ApiGetRateParityRequest) QualifyingProfileCategory(qualifyingProfileCategory string) ApiGetRateParityRequest {
	r.qualifyingProfileCategory = &qualifyingProfileCategory
	return r
}

func (r ApiGetRateParityRequest) QualifyingProfileId(qualifyingProfileId string) ApiGetRateParityRequest {
	r.qualifyingProfileId = &qualifyingProfileId
	return r
}

// External system code.
func (r ApiGetRateParityRequest) XExternalsystem(xExternalsystem string) ApiGetRateParityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetRateParityRequest) AcceptLanguage(acceptLanguage string) ApiGetRateParityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetRateParityRequest) Execute() (*RateParity, *http.Response, error) {
	return r.ApiService.GetRateParityExecute(r)
}

/*
GetRateParity Gets channel's rate configuration

Operation to Fetch the Rate Parity. The rate parity search criteria can include room types, rate plans, promotion code, rate access code or chain codes. <p><strong>OperationId:</strong>getRateParity</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetRateParityRequest
*/
func (a *AvailabilityApiService) GetRateParity(ctx context.Context, hotelId string) ApiGetRateParityRequest {
	return ApiGetRateParityRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateParity
func (a *AvailabilityApiService) GetRateParityExecute(r ApiGetRateParityRequest) (*RateParity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateParity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetRateParity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateParity"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	if r.comparisonType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comparisonType", r.comparisonType, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.numberOfDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfDays", r.numberOfDays, "")
	}
	if r.channelCode != nil {
		t := *r.channelCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelCode", t, "multi")
		}
	}
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
	}
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
	}
	if r.channelRoomType != nil {
		t := *r.channelRoomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelRoomType", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelRoomType", t, "multi")
		}
	}
	if r.channelRatePlanCode != nil {
		t := *r.channelRatePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", t, "multi")
		}
	}
	if r.chainCode != nil {
		t := *r.chainCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "chainCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "chainCode", t, "multi")
		}
	}
	if r.rateAccessCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateAccessCode", r.rateAccessCode, "")
	}
	if r.inventoryBlockCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventoryBlockCode", r.inventoryBlockCode, "")
	}
	if r.promotionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", r.promotionCode, "")
	}
	if r.qualifyingProfileCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualifyingProfileCategory", r.qualifyingProfileCategory, "")
	}
	if r.qualifyingProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualifyingProfileId", r.qualifyingProfileId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRegionalRateParityRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	language *string
	limit *int32
	numberOfDays *int32
	hotelIds *[]string
	channelCode *[]string
	ratePlanCode *[]string
	channelRatePlanCode *[]string
	chainCode *string
	rateAccessCode *string
	qualifyingProfileCategory *string
	qualifyingProfileId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetRegionalRateParityRequest) Authorization(authorization string) ApiGetRegionalRateParityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetRegionalRateParityRequest) XAppKey(xAppKey string) ApiGetRegionalRateParityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetRegionalRateParityRequest) XHotelid(xHotelid string) ApiGetRegionalRateParityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Language identification.
func (r ApiGetRegionalRateParityRequest) Language(language string) ApiGetRegionalRateParityRequest {
	r.language = &language
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ApiGetRegionalRateParityRequest) Limit(limit int32) ApiGetRegionalRateParityRequest {
	r.limit = &limit
	return r
}

func (r ApiGetRegionalRateParityRequest) NumberOfDays(numberOfDays int32) ApiGetRegionalRateParityRequest {
	r.numberOfDays = &numberOfDays
	return r
}

func (r ApiGetRegionalRateParityRequest) HotelIds(hotelIds []string) ApiGetRegionalRateParityRequest {
	r.hotelIds = &hotelIds
	return r
}

func (r ApiGetRegionalRateParityRequest) ChannelCode(channelCode []string) ApiGetRegionalRateParityRequest {
	r.channelCode = &channelCode
	return r
}

func (r ApiGetRegionalRateParityRequest) RatePlanCode(ratePlanCode []string) ApiGetRegionalRateParityRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

func (r ApiGetRegionalRateParityRequest) ChannelRatePlanCode(channelRatePlanCode []string) ApiGetRegionalRateParityRequest {
	r.channelRatePlanCode = &channelRatePlanCode
	return r
}

func (r ApiGetRegionalRateParityRequest) ChainCode(chainCode string) ApiGetRegionalRateParityRequest {
	r.chainCode = &chainCode
	return r
}

func (r ApiGetRegionalRateParityRequest) RateAccessCode(rateAccessCode string) ApiGetRegionalRateParityRequest {
	r.rateAccessCode = &rateAccessCode
	return r
}

func (r ApiGetRegionalRateParityRequest) QualifyingProfileCategory(qualifyingProfileCategory string) ApiGetRegionalRateParityRequest {
	r.qualifyingProfileCategory = &qualifyingProfileCategory
	return r
}

func (r ApiGetRegionalRateParityRequest) QualifyingProfileId(qualifyingProfileId string) ApiGetRegionalRateParityRequest {
	r.qualifyingProfileId = &qualifyingProfileId
	return r
}

// External system code.
func (r ApiGetRegionalRateParityRequest) XExternalsystem(xExternalsystem string) ApiGetRegionalRateParityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetRegionalRateParityRequest) AcceptLanguage(acceptLanguage string) ApiGetRegionalRateParityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetRegionalRateParityRequest) Execute() (*RegionalRateParity, *http.Response, error) {
	return r.ApiService.GetRegionalRateParityExecute(r)
}

/*
GetRegionalRateParity Gets the regional rate parity

Operation to Fetch the Regional Rate Parity. <p><strong>OperationId:</strong>getRegionalRateParity</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRegionalRateParityRequest
*/
func (a *AvailabilityApiService) GetRegionalRateParity(ctx context.Context) ApiGetRegionalRateParityRequest {
	return ApiGetRegionalRateParityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RegionalRateParity
func (a *AvailabilityApiService) GetRegionalRateParityExecute(r ApiGetRegionalRateParityRequest) (*RegionalRateParity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegionalRateParity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetRegionalRateParity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/availability/summary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.numberOfDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfDays", r.numberOfDays, "")
	}
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.channelCode != nil {
		t := *r.channelCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelCode", t, "multi")
		}
	}
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
	}
	if r.channelRatePlanCode != nil {
		t := *r.channelRatePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelRatePlanCode", t, "multi")
		}
	}
	if r.chainCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainCode", r.chainCode, "")
	}
	if r.rateAccessCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateAccessCode", r.rateAccessCode, "")
	}
	if r.qualifyingProfileCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualifyingProfileCategory", r.qualifyingProfileCategory, "")
	}
	if r.qualifyingProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualifyingProfileId", r.qualifyingProfileId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
