/*
OPERA Cloud Room Configuration API

Testing HotelConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_HotelConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigApiService ChangeHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingRoomSchedules(context.Background(), roomScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var roomTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingRoomSchedules(context.Background(), roomScheduleId, roomTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
