/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 21.5.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReservationValidationInstructionType Instruction to validate changes in reservation and returns validated inventory item.
type ReservationValidationInstructionType string

// List of reservationValidationInstructionType
const (
	STAY_HEADER ReservationValidationInstructionType = "StayHeader"
	STAY_DATES ReservationValidationInstructionType = "StayDates"
	OVERLAPPING_STAY ReservationValidationInstructionType = "OverlappingStay"
	PACKAGES ReservationValidationInstructionType = "Packages"
	REFRESH_PACKAGES ReservationValidationInstructionType = "RefreshPackages"
	PREFERENCES ReservationValidationInstructionType = "Preferences"
	ACCESS_RESTRICTIONS ReservationValidationInstructionType = "AccessRestrictions"
	ECERTIFICATES ReservationValidationInstructionType = "Ecertificates"
	PROMOTIONS ReservationValidationInstructionType = "Promotions"
	TRACK_IT_ITEMS ReservationValidationInstructionType = "TrackItItems"
	TOTAL_COST_OF_STAY ReservationValidationInstructionType = "TotalCostOfStay"
	RESERVATION_AWARDS ReservationValidationInstructionType = "ReservationAwards"
	WEB_REGISTRATION_CARDS ReservationValidationInstructionType = "WebRegistrationCards"
	SERVICE_REQUESTS ReservationValidationInstructionType = "ServiceRequests"
	RESERVATION_ACTIVITIES ReservationValidationInstructionType = "ReservationActivities"
	SCHEDULED_ACTIVITIES ReservationValidationInstructionType = "ScheduledActivities"
	PREPAID_CARDS ReservationValidationInstructionType = "PrepaidCards"
	SHARES ReservationValidationInstructionType = "Shares"
	ATTACHMENTS ReservationValidationInstructionType = "Attachments"
	LOCATORS ReservationValidationInstructionType = "Locators"
	PROFILE_AWARDS ReservationValidationInstructionType = "ProfileAwards"
	REFRESH_RATES ReservationValidationInstructionType = "RefreshRates"
	RESERVATION_GUARANTEE ReservationValidationInstructionType = "ReservationGuarantee"
	UPSELLS_AVAILABLE ReservationValidationInstructionType = "UpsellsAvailable"
	INVENTORY_ITEMS ReservationValidationInstructionType = "InventoryItems"
)

// All allowed values of ReservationValidationInstructionType enum
var AllowedReservationValidationInstructionTypeEnumValues = []ReservationValidationInstructionType{
	"StayHeader",
	"StayDates",
	"OverlappingStay",
	"Packages",
	"RefreshPackages",
	"Preferences",
	"AccessRestrictions",
	"Ecertificates",
	"Promotions",
	"TrackItItems",
	"TotalCostOfStay",
	"ReservationAwards",
	"WebRegistrationCards",
	"ServiceRequests",
	"ReservationActivities",
	"ScheduledActivities",
	"PrepaidCards",
	"Shares",
	"Attachments",
	"Locators",
	"ProfileAwards",
	"RefreshRates",
	"ReservationGuarantee",
	"UpsellsAvailable",
	"InventoryItems",
}

func (v *ReservationValidationInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReservationValidationInstructionType(value)
	for _, existing := range AllowedReservationValidationInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReservationValidationInstructionType", value)
}

// NewReservationValidationInstructionTypeFromValue returns a pointer to a valid ReservationValidationInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReservationValidationInstructionTypeFromValue(v string) (*ReservationValidationInstructionType, error) {
	ev := ReservationValidationInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReservationValidationInstructionType: valid values are %v", v, AllowedReservationValidationInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReservationValidationInstructionType) IsValid() bool {
	for _, existing := range AllowedReservationValidationInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to reservationValidationInstructionType value
func (v ReservationValidationInstructionType) Ptr() *ReservationValidationInstructionType {
	return &v
}

type NullableReservationValidationInstructionType struct {
	value *ReservationValidationInstructionType
	isSet bool
}

func (v NullableReservationValidationInstructionType) Get() *ReservationValidationInstructionType {
	return v.value
}

func (v *NullableReservationValidationInstructionType) Set(val *ReservationValidationInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationValidationInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationValidationInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationValidationInstructionType(val *ReservationValidationInstructionType) *NullableReservationValidationInstructionType {
	return &NullableReservationValidationInstructionType{value: val, isSet: true}
}

func (v NullableReservationValidationInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationValidationInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

