/*
OPERA Cloud DataValueMapping Service API

APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 22.3.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DataValueMappingCodeType Enumeration of the different conversion codes needed for data value mapping.
type DataValueMappingCodeType string

// List of dataValueMappingCodeType
const (
	ACCOUNT_TYPE DataValueMappingCodeType = "AccountType"
	ACTION_CODE DataValueMappingCodeType = "ActionCode"
	ACTION_TYPE DataValueMappingCodeType = "ActionType"
	ACTIVITY_LOCATION DataValueMappingCodeType = "ActivityLocation"
	ACTIVITY_STATUS DataValueMappingCodeType = "ActivityStatus"
	ACTIVITY_TYPE DataValueMappingCodeType = "ActivityType"
	ACTIVITY_TYPE_SC DataValueMappingCodeType = "ActivityTypeSc"
	ADDRESS_TYPES DataValueMappingCodeType = "AddressTypes"
	ARRANGEMENT_CODE DataValueMappingCodeType = "ArrangementCode"
	BLOCK_CANCELLATION_CODES DataValueMappingCodeType = "BlockCancellationCodes"
	BLOCK_CODES DataValueMappingCodeType = "BlockCodes"
	BLOCK_CONVERSION DataValueMappingCodeType = "BlockConversion"
	BLOCK_RANKING DataValueMappingCodeType = "BlockRanking"
	BLOCK_RATE_OVERRIDE_REASON DataValueMappingCodeType = "BlockRateOverrideReason"
	BOOKING_STATUS DataValueMappingCodeType = "BookingStatus"
	BOOKING_TYPE DataValueMappingCodeType = "BookingType"
	BUSIINESS_SEGMENT DataValueMappingCodeType = "BusiinessSegment"
	CALENDAR_EVENT DataValueMappingCodeType = "CalendarEvent"
	CANCELLATION_CODES DataValueMappingCodeType = "CancellationCodes"
	CATEGORY_CODE DataValueMappingCodeType = "CategoryCode"
	CAT_ITEMRATE DataValueMappingCodeType = "CatItemrate"
	CAT_RATE DataValueMappingCodeType = "CatRate"
	CAT_SERVING DataValueMappingCodeType = "CatServing"
	CAT_SETUP DataValueMappingCodeType = "CatSetup"
	CHANNEL_CODES DataValueMappingCodeType = "ChannelCodes"
	COMBO_ROOM DataValueMappingCodeType = "ComboRoom"
	COMMENT_TYPE DataValueMappingCodeType = "CommentType"
	COMPETITION_CODE DataValueMappingCodeType = "CompetitionCode"
	COUNTRY_CODE DataValueMappingCodeType = "CountryCode"
	CURRENCY_CODE DataValueMappingCodeType = "CurrencyCode"
	DAY_TYPE DataValueMappingCodeType = "DayType"
	DEPARTMENT_ID DataValueMappingCodeType = "DepartmentId"
	DEPT_NOTE_CODE DataValueMappingCodeType = "DeptNoteCode"
	DISCOUNT_REASON DataValueMappingCodeType = "DiscountReason"
	DOCUMENT_TYPE DataValueMappingCodeType = "DocumentType"
	EVENT_TYPE DataValueMappingCodeType = "EventType"
	FIT_CONTRACT_TYPE DataValueMappingCodeType = "FitContractType"
	FREQUENCY DataValueMappingCodeType = "Frequency"
	FUNCTION_SPACE_LOCATION DataValueMappingCodeType = "FunctionSpaceLocation"
	FUNCTION_SPACE_RATE_TYPE DataValueMappingCodeType = "FunctionSpaceRateType"
	GENDER_MF DataValueMappingCodeType = "GenderMf"
	GTD_REQ DataValueMappingCodeType = "GtdReq"
	GUEST_PREFERENCE_CODE DataValueMappingCodeType = "GuestPreferenceCode"
	GUEST_PREFERENCE_TYPE DataValueMappingCodeType = "GuestPreferenceType"
	INDUSTRY_CODE DataValueMappingCodeType = "IndustryCode"
	INFLUENCE_CODE DataValueMappingCodeType = "InfluenceCode"
	LANGUAGE_CODES DataValueMappingCodeType = "LanguageCodes"
	MARKETING_CITY DataValueMappingCodeType = "MarketingCity"
	MARKETING_REGION DataValueMappingCodeType = "MarketingRegion"
	MARKET_CODE DataValueMappingCodeType = "MarketCode"
	MEETING_ROOMTYPE DataValueMappingCodeType = "MeetingRoomtype"
	MEMBERSHIP_LEVEL DataValueMappingCodeType = "MembershipLevel"
	MEMBERSHIP_TYPE DataValueMappingCodeType = "MembershipType"
	MEMBERSHIP_TYPE_AIRLINE DataValueMappingCodeType = "MembershipTypeAirline"
	NATIONALITY DataValueMappingCodeType = "Nationality"
	OCRM_BOUNCE_TYPE DataValueMappingCodeType = "OcrmBounceType"
	OCRM_EVENT_TYPE DataValueMappingCodeType = "OcrmEventType"
	OTA_GUEST_PREFERENCE_CODE DataValueMappingCodeType = "OtaGuestPreferenceCode"
	PAYMENT_METHOD DataValueMappingCodeType = "PaymentMethod"
	PHONE_TYPE DataValueMappingCodeType = "PhoneType"
	POS_FAMILY_GROUP DataValueMappingCodeType = "PosFamilyGroup"
	POS_MAJOR_GROUP DataValueMappingCodeType = "PosMajorGroup"
	POS_MENU_DEF DataValueMappingCodeType = "PosMenuDef"
	POS_REVENUE_CENTER DataValueMappingCodeType = "PosRevenueCenter"
	PRICE_CODE DataValueMappingCodeType = "PriceCode"
	PRODUCT_CODE DataValueMappingCodeType = "ProductCode"
	PROFILE_PRIORITY DataValueMappingCodeType = "ProfilePriority"
	PROFILE_SOURCE DataValueMappingCodeType = "ProfileSource"
	PROFILE_TYPE DataValueMappingCodeType = "ProfileType"
	RATE_CATEGORY DataValueMappingCodeType = "RateCategory"
	RATE_CODE DataValueMappingCodeType = "RateCode"
	RATE_PROGRAM DataValueMappingCodeType = "RateProgram"
	RATE_TO_RATE_BLOCK DataValueMappingCodeType = "RateToRateBlock"
	RATE_TYPE DataValueMappingCodeType = "RateType"
	REASON_CODE DataValueMappingCodeType = "ReasonCode"
	RELATIONSHIP DataValueMappingCodeType = "Relationship"
	RESERVATION_STATUS DataValueMappingCodeType = "ReservationStatus"
	RESERVATION_TYPE DataValueMappingCodeType = "ReservationType"
	RESV_BOOKING_METHOD DataValueMappingCodeType = "ResvBookingMethod"
	REVENUE_GROUPS DataValueMappingCodeType = "RevenueGroups"
	REVENUE_TYPE DataValueMappingCodeType = "RevenueType"
	ROOM DataValueMappingCodeType = "Room"
	ROOMS_POTENTIAL DataValueMappingCodeType = "RoomsPotential"
	ROOM_CATEGORY_LABEL DataValueMappingCodeType = "RoomCategoryLabel"
	ROOM_CLASS DataValueMappingCodeType = "RoomClass"
	ROOM_POOL DataValueMappingCodeType = "RoomPool"
	ROOM_REPAIRS_REASON_CODE DataValueMappingCodeType = "RoomRepairsReasonCode"
	ROOM_STATUS_REASONS DataValueMappingCodeType = "RoomStatusReasons"
	ROUTING_CODE DataValueMappingCodeType = "RoutingCode"
	SCOPE DataValueMappingCodeType = "Scope"
	SCOPE_CITY DataValueMappingCodeType = "ScopeCity"
	SC_ACC_PRIORITY DataValueMappingCodeType = "ScAccPriority"
	SC_ACC_ROOMS_POT DataValueMappingCodeType = "ScAccRoomsPot"
	SC_ACC_SOURCE DataValueMappingCodeType = "ScAccSource"
	SC_DESTINATION DataValueMappingCodeType = "ScDestination"
	SC_FUNCTION_SPACE DataValueMappingCodeType = "ScFunctionSpace"
	SC_FUNCTION_SPACE_RATE_CODE DataValueMappingCodeType = "ScFunctionSpaceRateCode"
	SC_FUNCTION_SPACE_SETUP DataValueMappingCodeType = "ScFunctionSpaceSetup"
	SC_REVENUE_TYPES DataValueMappingCodeType = "ScRevenueTypes"
	SC_SETUP_CODE DataValueMappingCodeType = "ScSetupCode"
	SC_TASK_CODE DataValueMappingCodeType = "ScTaskCode"
	SC_TERRITORY DataValueMappingCodeType = "ScTerritory"
	SERVICE_REQUEST_TYPE DataValueMappingCodeType = "ServiceRequestType"
	SGI_LANGUAGE DataValueMappingCodeType = "SgiLanguage"
	SGI_REQUEST_CODES DataValueMappingCodeType = "SgiRequestCodes"
	SGI_TITLE DataValueMappingCodeType = "SgiTitle"
	SOURCE_CODE DataValueMappingCodeType = "SourceCode"
	STATE DataValueMappingCodeType = "State"
	TITLE DataValueMappingCodeType = "Title"
	TRACE_CODE DataValueMappingCodeType = "TraceCode"
	TRACE_DEPARTMENT DataValueMappingCodeType = "TraceDepartment"
	TRANSPORT_TYPES DataValueMappingCodeType = "TransportTypes"
	TRAVEL_AGENT_COMMISSION_CODES DataValueMappingCodeType = "TravelAgentCommissionCodes"
	TRAVEL_AGENT_CURRENCY_CODES DataValueMappingCodeType = "TravelAgentCurrencyCodes"
	TRXGENERATES DataValueMappingCodeType = "Trxgenerates"
	TRX_CODE DataValueMappingCodeType = "TrxCode"
	VIP_LEVEL DataValueMappingCodeType = "VipLevel"
	WAITLIST_CODES DataValueMappingCodeType = "WaitlistCodes"
	WEBUSER_SECURITY_QUESTION DataValueMappingCodeType = "WebuserSecurityQuestion"
)

// All allowed values of DataValueMappingCodeType enum
var AllowedDataValueMappingCodeTypeEnumValues = []DataValueMappingCodeType{
	"AccountType",
	"ActionCode",
	"ActionType",
	"ActivityLocation",
	"ActivityStatus",
	"ActivityType",
	"ActivityTypeSc",
	"AddressTypes",
	"ArrangementCode",
	"BlockCancellationCodes",
	"BlockCodes",
	"BlockConversion",
	"BlockRanking",
	"BlockRateOverrideReason",
	"BookingStatus",
	"BookingType",
	"BusiinessSegment",
	"CalendarEvent",
	"CancellationCodes",
	"CategoryCode",
	"CatItemrate",
	"CatRate",
	"CatServing",
	"CatSetup",
	"ChannelCodes",
	"ComboRoom",
	"CommentType",
	"CompetitionCode",
	"CountryCode",
	"CurrencyCode",
	"DayType",
	"DepartmentId",
	"DeptNoteCode",
	"DiscountReason",
	"DocumentType",
	"EventType",
	"FitContractType",
	"Frequency",
	"FunctionSpaceLocation",
	"FunctionSpaceRateType",
	"GenderMf",
	"GtdReq",
	"GuestPreferenceCode",
	"GuestPreferenceType",
	"IndustryCode",
	"InfluenceCode",
	"LanguageCodes",
	"MarketingCity",
	"MarketingRegion",
	"MarketCode",
	"MeetingRoomtype",
	"MembershipLevel",
	"MembershipType",
	"MembershipTypeAirline",
	"Nationality",
	"OcrmBounceType",
	"OcrmEventType",
	"OtaGuestPreferenceCode",
	"PaymentMethod",
	"PhoneType",
	"PosFamilyGroup",
	"PosMajorGroup",
	"PosMenuDef",
	"PosRevenueCenter",
	"PriceCode",
	"ProductCode",
	"ProfilePriority",
	"ProfileSource",
	"ProfileType",
	"RateCategory",
	"RateCode",
	"RateProgram",
	"RateToRateBlock",
	"RateType",
	"ReasonCode",
	"Relationship",
	"ReservationStatus",
	"ReservationType",
	"ResvBookingMethod",
	"RevenueGroups",
	"RevenueType",
	"Room",
	"RoomsPotential",
	"RoomCategoryLabel",
	"RoomClass",
	"RoomPool",
	"RoomRepairsReasonCode",
	"RoomStatusReasons",
	"RoutingCode",
	"Scope",
	"ScopeCity",
	"ScAccPriority",
	"ScAccRoomsPot",
	"ScAccSource",
	"ScDestination",
	"ScFunctionSpace",
	"ScFunctionSpaceRateCode",
	"ScFunctionSpaceSetup",
	"ScRevenueTypes",
	"ScSetupCode",
	"ScTaskCode",
	"ScTerritory",
	"ServiceRequestType",
	"SgiLanguage",
	"SgiRequestCodes",
	"SgiTitle",
	"SourceCode",
	"State",
	"Title",
	"TraceCode",
	"TraceDepartment",
	"TransportTypes",
	"TravelAgentCommissionCodes",
	"TravelAgentCurrencyCodes",
	"Trxgenerates",
	"TrxCode",
	"VipLevel",
	"WaitlistCodes",
	"WebuserSecurityQuestion",
}

func (v *DataValueMappingCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataValueMappingCodeType(value)
	for _, existing := range AllowedDataValueMappingCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataValueMappingCodeType", value)
}

// NewDataValueMappingCodeTypeFromValue returns a pointer to a valid DataValueMappingCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataValueMappingCodeTypeFromValue(v string) (*DataValueMappingCodeType, error) {
	ev := DataValueMappingCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataValueMappingCodeType: valid values are %v", v, AllowedDataValueMappingCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataValueMappingCodeType) IsValid() bool {
	for _, existing := range AllowedDataValueMappingCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dataValueMappingCodeType value
func (v DataValueMappingCodeType) Ptr() *DataValueMappingCodeType {
	return &v
}

type NullableDataValueMappingCodeType struct {
	value *DataValueMappingCodeType
	isSet bool
}

func (v NullableDataValueMappingCodeType) Get() *DataValueMappingCodeType {
	return v.value
}

func (v *NullableDataValueMappingCodeType) Set(val *DataValueMappingCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValueMappingCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValueMappingCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValueMappingCodeType(val *DataValueMappingCodeType) *NullableDataValueMappingCodeType {
	return &NullableDataValueMappingCodeType{value: val, isSet: true}
}

func (v NullableDataValueMappingCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValueMappingCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

