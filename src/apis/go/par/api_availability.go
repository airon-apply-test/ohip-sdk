/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>

API version: 21.5.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AvailabilityApiService AvailabilityApi service
type AvailabilityApiService service

type ApiGetHotelAvailabilityRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cro *[]string
	includeClosedRates *[]bool
	includeDefaultRatePlanSet *[]bool
	initialRatePlanSet *[]bool
	limit *[]int32
	pagePointerKey *[]string
	ratePlanSet *[]string
	redeemAwards *[]bool
	roomStayStartDate *string
	roomStayEndDate *string
	roomStayQuantity *int32
	adults *int32
	children *int32
	childAge *[]int32
	bucket1Count *int32
	bucket2Count *int32
	bucket3Count *int32
	bucket4Count *int32
	bucket5Count *int32
	fullStayTimeSpanStartDate *string
	fullStayTimeSpanEndDate *string
	prevailingRate *bool
	rateCategory *string
	rateClass *string
	rateGroup *string
	ratePlanCode *[]string
	promotionCode *[]string
	roomType *[]string
	feature *[]string
	reservationGuestId *string
	reservationGuestIdType *string
	reservationProfileType *[]string
	attachedProfileId *[]string
	hotelReservationId *string
	hotelReservationIdType *string
	ratePlanInfo *bool
	returnOnlyAvailableRateCodes *bool
	resGuaranteeInfo *bool
	roomTypeInfo *bool
	membershipIdNumber *[]int32
	membershipLevel *[]string
	membershipType *[]string
	pointsAvailable *[]int32
	smokingPreference *[]string
	hotelPackage *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetHotelAvailabilityRequest) Authorization(authorization string) ApiGetHotelAvailabilityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetHotelAvailabilityRequest) XAppKey(xAppKey string) ApiGetHotelAvailabilityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetHotelAvailabilityRequest) XHotelid(xHotelid string) ApiGetHotelAvailabilityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Central reservation office Code who is requesting Rate Availability.
func (r ApiGetHotelAvailabilityRequest) Cro(cro []string) ApiGetHotelAvailabilityRequest {
	r.cro = &cro
	return r
}

// Used to indicate if closed rates are to be included in the Rate Plan set.
func (r ApiGetHotelAvailabilityRequest) IncludeClosedRates(includeClosedRates []bool) ApiGetHotelAvailabilityRequest {
	r.includeClosedRates = &includeClosedRates
	return r
}

// Used to indicate if the configured default rate plan set will be included.
func (r ApiGetHotelAvailabilityRequest) IncludeDefaultRatePlanSet(includeDefaultRatePlanSet []bool) ApiGetHotelAvailabilityRequest {
	r.includeDefaultRatePlanSet = &includeDefaultRatePlanSet
	return r
}

// If InitialRatePlanSet is set to true response will return most relevant Rate Plan Set(e.g. NEGOTIATED if profiles has Negotiated Rates) depending on the request. if request does not requires special Rate Plan Set, it will return default Rate Plan Set if RatePlanSet value is not set.
func (r ApiGetHotelAvailabilityRequest) InitialRatePlanSet(initialRatePlanSet []bool) ApiGetHotelAvailabilityRequest {
	r.initialRatePlanSet = &initialRatePlanSet
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ApiGetHotelAvailabilityRequest) Limit(limit []int32) ApiGetHotelAvailabilityRequest {
	r.limit = &limit
	return r
}

// Specifies fetched record&#39;s key as pointer to fetch additional records from. If key is composite use comma separated string.
func (r ApiGetHotelAvailabilityRequest) PagePointerKey(pagePointerKey []string) ApiGetHotelAvailabilityRequest {
	r.pagePointerKey = &pagePointerKey
	return r
}

// Rate Plan Set code to filter Rate Plans based on the predefined set. if not specified it will not filter any Rate Plans by Rate Plan Set. When InitialRatePlanSet is true response may not always return Rate Plans for the supplied Rate Plan Set(See InitialRatePlanSet documentation).
func (r ApiGetHotelAvailabilityRequest) RatePlanSet(ratePlanSet []string) ApiGetHotelAvailabilityRequest {
	r.ratePlanSet = &ratePlanSet
	return r
}

// Used to indicate if the awards are to be redeemed.
func (r ApiGetHotelAvailabilityRequest) RedeemAwards(redeemAwards []bool) ApiGetHotelAvailabilityRequest {
	r.redeemAwards = &redeemAwards
	return r
}

func (r ApiGetHotelAvailabilityRequest) RoomStayStartDate(roomStayStartDate string) ApiGetHotelAvailabilityRequest {
	r.roomStayStartDate = &roomStayStartDate
	return r
}

func (r ApiGetHotelAvailabilityRequest) RoomStayEndDate(roomStayEndDate string) ApiGetHotelAvailabilityRequest {
	r.roomStayEndDate = &roomStayEndDate
	return r
}

func (r ApiGetHotelAvailabilityRequest) RoomStayQuantity(roomStayQuantity int32) ApiGetHotelAvailabilityRequest {
	r.roomStayQuantity = &roomStayQuantity
	return r
}

// Defines the number of Adults.
func (r ApiGetHotelAvailabilityRequest) Adults(adults int32) ApiGetHotelAvailabilityRequest {
	r.adults = &adults
	return r
}

// Defines the number of Children.
func (r ApiGetHotelAvailabilityRequest) Children(children int32) ApiGetHotelAvailabilityRequest {
	r.children = &children
	return r
}

// Age of a child in years.
func (r ApiGetHotelAvailabilityRequest) ChildAge(childAge []int32) ApiGetHotelAvailabilityRequest {
	r.childAge = &childAge
	return r
}

// Number of children classified under the first Age Qualifying Group(Child Bucket#1).
func (r ApiGetHotelAvailabilityRequest) Bucket1Count(bucket1Count int32) ApiGetHotelAvailabilityRequest {
	r.bucket1Count = &bucket1Count
	return r
}

// Number of children classified under the second Age Qualifying Group(Child Bucket#2).
func (r ApiGetHotelAvailabilityRequest) Bucket2Count(bucket2Count int32) ApiGetHotelAvailabilityRequest {
	r.bucket2Count = &bucket2Count
	return r
}

// Number of children classified under the third Age Qualifying Group(Child Bucket#3).
func (r ApiGetHotelAvailabilityRequest) Bucket3Count(bucket3Count int32) ApiGetHotelAvailabilityRequest {
	r.bucket3Count = &bucket3Count
	return r
}

// Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
func (r ApiGetHotelAvailabilityRequest) Bucket4Count(bucket4Count int32) ApiGetHotelAvailabilityRequest {
	r.bucket4Count = &bucket4Count
	return r
}

// Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
func (r ApiGetHotelAvailabilityRequest) Bucket5Count(bucket5Count int32) ApiGetHotelAvailabilityRequest {
	r.bucket5Count = &bucket5Count
	return r
}

func (r ApiGetHotelAvailabilityRequest) FullStayTimeSpanStartDate(fullStayTimeSpanStartDate string) ApiGetHotelAvailabilityRequest {
	r.fullStayTimeSpanStartDate = &fullStayTimeSpanStartDate
	return r
}

func (r ApiGetHotelAvailabilityRequest) FullStayTimeSpanEndDate(fullStayTimeSpanEndDate string) ApiGetHotelAvailabilityRequest {
	r.fullStayTimeSpanEndDate = &fullStayTimeSpanEndDate
	return r
}

func (r ApiGetHotelAvailabilityRequest) PrevailingRate(prevailingRate bool) ApiGetHotelAvailabilityRequest {
	r.prevailingRate = &prevailingRate
	return r
}

func (r ApiGetHotelAvailabilityRequest) RateCategory(rateCategory string) ApiGetHotelAvailabilityRequest {
	r.rateCategory = &rateCategory
	return r
}

func (r ApiGetHotelAvailabilityRequest) RateClass(rateClass string) ApiGetHotelAvailabilityRequest {
	r.rateClass = &rateClass
	return r
}

func (r ApiGetHotelAvailabilityRequest) RateGroup(rateGroup string) ApiGetHotelAvailabilityRequest {
	r.rateGroup = &rateGroup
	return r
}

func (r ApiGetHotelAvailabilityRequest) RatePlanCode(ratePlanCode []string) ApiGetHotelAvailabilityRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Promotion code associated with the rate plan.
func (r ApiGetHotelAvailabilityRequest) PromotionCode(promotionCode []string) ApiGetHotelAvailabilityRequest {
	r.promotionCode = &promotionCode
	return r
}

func (r ApiGetHotelAvailabilityRequest) RoomType(roomType []string) ApiGetHotelAvailabilityRequest {
	r.roomType = &roomType
	return r
}

func (r ApiGetHotelAvailabilityRequest) Feature(feature []string) ApiGetHotelAvailabilityRequest {
	r.feature = &feature
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetHotelAvailabilityRequest) ReservationGuestId(reservationGuestId string) ApiGetHotelAvailabilityRequest {
	r.reservationGuestId = &reservationGuestId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ApiGetHotelAvailabilityRequest) ReservationGuestIdType(reservationGuestIdType string) ApiGetHotelAvailabilityRequest {
	r.reservationGuestIdType = &reservationGuestIdType
	return r
}

func (r ApiGetHotelAvailabilityRequest) ReservationProfileType(reservationProfileType []string) ApiGetHotelAvailabilityRequest {
	r.reservationProfileType = &reservationProfileType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetHotelAvailabilityRequest) AttachedProfileId(attachedProfileId []string) ApiGetHotelAvailabilityRequest {
	r.attachedProfileId = &attachedProfileId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetHotelAvailabilityRequest) HotelReservationId(hotelReservationId string) ApiGetHotelAvailabilityRequest {
	r.hotelReservationId = &hotelReservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ApiGetHotelAvailabilityRequest) HotelReservationIdType(hotelReservationIdType string) ApiGetHotelAvailabilityRequest {
	r.hotelReservationIdType = &hotelReservationIdType
	return r
}

// If true Rate Plan Code Master information will be included in the response.
func (r ApiGetHotelAvailabilityRequest) RatePlanInfo(ratePlanInfo bool) ApiGetHotelAvailabilityRequest {
	r.ratePlanInfo = &ratePlanInfo
	return r
}

// If true Only availability check will be done and it will return available rate codes.
func (r ApiGetHotelAvailabilityRequest) ReturnOnlyAvailableRateCodes(returnOnlyAvailableRateCodes bool) ApiGetHotelAvailabilityRequest {
	r.returnOnlyAvailableRateCodes = &returnOnlyAvailableRateCodes
	return r
}

// If true Guarantee Code information will be fetched with Rate Code Information. This attribute is only effective when RatePlanInfo is true.
func (r ApiGetHotelAvailabilityRequest) ResGuaranteeInfo(resGuaranteeInfo bool) ApiGetHotelAvailabilityRequest {
	r.resGuaranteeInfo = &resGuaranteeInfo
	return r
}

// If true Room Type Master information will be included in the response.
func (r ApiGetHotelAvailabilityRequest) RoomTypeInfo(roomTypeInfo bool) ApiGetHotelAvailabilityRequest {
	r.roomTypeInfo = &roomTypeInfo
	return r
}

// Membership id Number of the guest.
func (r ApiGetHotelAvailabilityRequest) MembershipIdNumber(membershipIdNumber []int32) ApiGetHotelAvailabilityRequest {
	r.membershipIdNumber = &membershipIdNumber
	return r
}

// Membership id Number of the guest.
func (r ApiGetHotelAvailabilityRequest) MembershipLevel(membershipLevel []string) ApiGetHotelAvailabilityRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// Membership id Number of the guest.
func (r ApiGetHotelAvailabilityRequest) MembershipType(membershipType []string) ApiGetHotelAvailabilityRequest {
	r.membershipType = &membershipType
	return r
}

// Used to indicate Points Available for Profile Primary Membership Type.
func (r ApiGetHotelAvailabilityRequest) PointsAvailable(pointsAvailable []int32) ApiGetHotelAvailabilityRequest {
	r.pointsAvailable = &pointsAvailable
	return r
}

// Smoking preference to search a reservation. This is compared to the preference on the guest profile of the reservation.
func (r ApiGetHotelAvailabilityRequest) SmokingPreference(smokingPreference []string) ApiGetHotelAvailabilityRequest {
	r.smokingPreference = &smokingPreference
	return r
}

// Hotel Package Code to filter the search result.
func (r ApiGetHotelAvailabilityRequest) HotelPackage(hotelPackage []string) ApiGetHotelAvailabilityRequest {
	r.hotelPackage = &hotelPackage
	return r
}

// External system code.
func (r ApiGetHotelAvailabilityRequest) XExternalsystem(xExternalsystem string) ApiGetHotelAvailabilityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetHotelAvailabilityRequest) AcceptLanguage(acceptLanguage string) ApiGetHotelAvailabilityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetHotelAvailabilityRequest) Execute() (*HotelAvailability, *http.Response, error) {
	return r.ApiService.GetHotelAvailabilityExecute(r)
}

/*
GetHotelAvailability Get hotel availability

Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetHotelAvailabilityRequest
*/
func (a *AvailabilityApiService) GetHotelAvailability(ctx context.Context, hotelId string) ApiGetHotelAvailabilityRequest {
	return ApiGetHotelAvailabilityRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HotelAvailability
func (a *AvailabilityApiService) GetHotelAvailabilityExecute(r ApiGetHotelAvailabilityRequest) (*HotelAvailability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HotelAvailability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetHotelAvailability")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/availability"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	if r.cro != nil {
		t := *r.cro
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cro", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cro", t, "multi")
		}
	}
	if r.includeClosedRates != nil {
		t := *r.includeClosedRates
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includeClosedRates", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includeClosedRates", t, "multi")
		}
	}
	if r.includeDefaultRatePlanSet != nil {
		t := *r.includeDefaultRatePlanSet
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includeDefaultRatePlanSet", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includeDefaultRatePlanSet", t, "multi")
		}
	}
	if r.initialRatePlanSet != nil {
		t := *r.initialRatePlanSet
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "initialRatePlanSet", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "initialRatePlanSet", t, "multi")
		}
	}
	if r.limit != nil {
		t := *r.limit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "limit", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "limit", t, "multi")
		}
	}
	if r.pagePointerKey != nil {
		t := *r.pagePointerKey
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pagePointerKey", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pagePointerKey", t, "multi")
		}
	}
	if r.ratePlanSet != nil {
		t := *r.ratePlanSet
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanSet", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanSet", t, "multi")
		}
	}
	if r.redeemAwards != nil {
		t := *r.redeemAwards
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "redeemAwards", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "redeemAwards", t, "multi")
		}
	}
	if r.roomStayStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayStartDate", r.roomStayStartDate, "")
	}
	if r.roomStayEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayEndDate", r.roomStayEndDate, "")
	}
	if r.roomStayQuantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayQuantity", r.roomStayQuantity, "")
	}
	if r.adults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adults", r.adults, "")
	}
	if r.children != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "children", r.children, "")
	}
	if r.childAge != nil {
		t := *r.childAge
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "childAge", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "childAge", t, "multi")
		}
	}
	if r.bucket1Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket1Count", r.bucket1Count, "")
	}
	if r.bucket2Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket2Count", r.bucket2Count, "")
	}
	if r.bucket3Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket3Count", r.bucket3Count, "")
	}
	if r.bucket4Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket4Count", r.bucket4Count, "")
	}
	if r.bucket5Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket5Count", r.bucket5Count, "")
	}
	if r.fullStayTimeSpanStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fullStayTimeSpanStartDate", r.fullStayTimeSpanStartDate, "")
	}
	if r.fullStayTimeSpanEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fullStayTimeSpanEndDate", r.fullStayTimeSpanEndDate, "")
	}
	if r.prevailingRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prevailingRate", r.prevailingRate, "")
	}
	if r.rateCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCategory", r.rateCategory, "")
	}
	if r.rateClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateClass", r.rateClass, "")
	}
	if r.rateGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateGroup", r.rateGroup, "")
	}
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
	}
	if r.promotionCode != nil {
		t := *r.promotionCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCode", t, "multi")
		}
	}
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
	}
	if r.feature != nil {
		t := *r.feature
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "feature", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "feature", t, "multi")
		}
	}
	if r.reservationGuestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestId", r.reservationGuestId, "")
	}
	if r.reservationGuestIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestIdType", r.reservationGuestIdType, "")
	}
	if r.reservationProfileType != nil {
		t := *r.reservationProfileType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProfileType", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProfileType", t, "multi")
		}
	}
	if r.attachedProfileId != nil {
		t := *r.attachedProfileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "attachedProfileId", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "attachedProfileId", t, "multi")
		}
	}
	if r.hotelReservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelReservationId", r.hotelReservationId, "")
	}
	if r.hotelReservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelReservationIdType", r.hotelReservationIdType, "")
	}
	if r.ratePlanInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanInfo", r.ratePlanInfo, "")
	}
	if r.returnOnlyAvailableRateCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "returnOnlyAvailableRateCodes", r.returnOnlyAvailableRateCodes, "")
	}
	if r.resGuaranteeInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resGuaranteeInfo", r.resGuaranteeInfo, "")
	}
	if r.roomTypeInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypeInfo", r.roomTypeInfo, "")
	}
	if r.membershipIdNumber != nil {
		t := *r.membershipIdNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipIdNumber", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipIdNumber", t, "multi")
		}
	}
	if r.membershipLevel != nil {
		t := *r.membershipLevel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", t, "multi")
		}
	}
	if r.membershipType != nil {
		t := *r.membershipType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", t, "multi")
		}
	}
	if r.pointsAvailable != nil {
		t := *r.pointsAvailable
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pointsAvailable", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pointsAvailable", t, "multi")
		}
	}
	if r.smokingPreference != nil {
		t := *r.smokingPreference
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "smokingPreference", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "smokingPreference", t, "multi")
		}
	}
	if r.hotelPackage != nil {
		t := *r.hotelPackage
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelPackage", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelPackage", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReservationGuaranteesRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	arrivalDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	ratePlanCode *string
	blockId *string
	reservationGuestId *string
	companyId *string
	travelAgentId *string
	sourceId *string
	groupId *string
	guaranteeCode *string
	calculateEstimateAmount *bool
	startDate *string
	endDate *string
	numberOfRooms *int32
	numberOfAdults *int32
	numberOfChildren *int32
	roomType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Arrival Date of the guest.
func (r ApiGetReservationGuaranteesRequest) ArrivalDate(arrivalDate string) ApiGetReservationGuaranteesRequest {
	r.arrivalDate = &arrivalDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetReservationGuaranteesRequest) Authorization(authorization string) ApiGetReservationGuaranteesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetReservationGuaranteesRequest) XAppKey(xAppKey string) ApiGetReservationGuaranteesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetReservationGuaranteesRequest) XHotelid(xHotelid string) ApiGetReservationGuaranteesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Rate Plan Code to find associated Guarantee Codes.
func (r ApiGetReservationGuaranteesRequest) RatePlanCode(ratePlanCode string) ApiGetReservationGuaranteesRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) BlockId(blockId string) ApiGetReservationGuaranteesRequest {
	r.blockId = &blockId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) ReservationGuestId(reservationGuestId string) ApiGetReservationGuaranteesRequest {
	r.reservationGuestId = &reservationGuestId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) CompanyId(companyId string) ApiGetReservationGuaranteesRequest {
	r.companyId = &companyId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) TravelAgentId(travelAgentId string) ApiGetReservationGuaranteesRequest {
	r.travelAgentId = &travelAgentId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) SourceId(sourceId string) ApiGetReservationGuaranteesRequest {
	r.sourceId = &sourceId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ApiGetReservationGuaranteesRequest) GroupId(groupId string) ApiGetReservationGuaranteesRequest {
	r.groupId = &groupId
	return r
}

// Guarantee Code should be supplied only for the code verification purpose, if the supplied code is valid for the rest of the criteria it will return the response with the Guarantee Code information.
func (r ApiGetReservationGuaranteesRequest) GuaranteeCode(guaranteeCode string) ApiGetReservationGuaranteesRequest {
	r.guaranteeCode = &guaranteeCode
	return r
}

// Determines whether estimated amount to be calculated or not
func (r ApiGetReservationGuaranteesRequest) CalculateEstimateAmount(calculateEstimateAmount bool) ApiGetReservationGuaranteesRequest {
	r.calculateEstimateAmount = &calculateEstimateAmount
	return r
}

func (r ApiGetReservationGuaranteesRequest) StartDate(startDate string) ApiGetReservationGuaranteesRequest {
	r.startDate = &startDate
	return r
}

func (r ApiGetReservationGuaranteesRequest) EndDate(endDate string) ApiGetReservationGuaranteesRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetReservationGuaranteesRequest) NumberOfRooms(numberOfRooms int32) ApiGetReservationGuaranteesRequest {
	r.numberOfRooms = &numberOfRooms
	return r
}

// Defines the number of Adults.
func (r ApiGetReservationGuaranteesRequest) NumberOfAdults(numberOfAdults int32) ApiGetReservationGuaranteesRequest {
	r.numberOfAdults = &numberOfAdults
	return r
}

// Defines the number of Children.
func (r ApiGetReservationGuaranteesRequest) NumberOfChildren(numberOfChildren int32) ApiGetReservationGuaranteesRequest {
	r.numberOfChildren = &numberOfChildren
	return r
}

// Room Type for the reservation
func (r ApiGetReservationGuaranteesRequest) RoomType(roomType string) ApiGetReservationGuaranteesRequest {
	r.roomType = &roomType
	return r
}

// External system code.
func (r ApiGetReservationGuaranteesRequest) XExternalsystem(xExternalsystem string) ApiGetReservationGuaranteesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetReservationGuaranteesRequest) AcceptLanguage(acceptLanguage string) ApiGetReservationGuaranteesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetReservationGuaranteesRequest) Execute() (*ReservationGuaranteesPolicies, *http.Response, error) {
	return r.ApiService.GetReservationGuaranteesExecute(r)
}

/*
GetReservationGuarantees Get reservation guarantees

Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetReservationGuaranteesRequest
*/
func (a *AvailabilityApiService) GetReservationGuarantees(ctx context.Context, hotelId string) ApiGetReservationGuaranteesRequest {
	return ApiGetReservationGuaranteesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationGuaranteesPolicies
func (a *AvailabilityApiService) GetReservationGuaranteesExecute(r ApiGetReservationGuaranteesRequest) (*ReservationGuaranteesPolicies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationGuaranteesPolicies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetReservationGuarantees")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/guarantees"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.arrivalDate == nil {
		return localVarReturnValue, nil, reportError("arrivalDate is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalDate", r.arrivalDate, "")
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
	}
	if r.blockId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", r.blockId, "")
	}
	if r.reservationGuestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestId", r.reservationGuestId, "")
	}
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	}
	if r.travelAgentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentId", r.travelAgentId, "")
	}
	if r.sourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceId", r.sourceId, "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "")
	}
	if r.guaranteeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guaranteeCode", r.guaranteeCode, "")
	}
	if r.calculateEstimateAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "calculateEstimateAmount", r.calculateEstimateAmount, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.numberOfRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfRooms", r.numberOfRooms, "")
	}
	if r.numberOfAdults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfAdults", r.numberOfAdults, "")
	}
	if r.numberOfChildren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfChildren", r.numberOfChildren, "")
	}
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRestrictionsByDateRangeRequest struct {
	ctx context.Context
	ApiService *AvailabilityApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	chainName *string
	end *string
	fetchSizeByDay *int32
	limit *int32
	restrictionInfo *string
	restrictionSearchCriteriaStartDate *string
	bookingChannelCode *string
	ratePlanCategory *string
	ratePlanCode *string
	roomClass *string
	roomType *string
	filterCodeCategory *string
	filterCode *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ApiGetRestrictionsByDateRangeRequest) Authorization(authorization string) ApiGetRestrictionsByDateRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r ApiGetRestrictionsByDateRangeRequest) XAppKey(xAppKey string) ApiGetRestrictionsByDateRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ApiGetRestrictionsByDateRangeRequest) XHotelid(xHotelid string) ApiGetRestrictionsByDateRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
func (r ApiGetRestrictionsByDateRangeRequest) ChainName(chainName string) ApiGetRestrictionsByDateRangeRequest {
	r.chainName = &chainName
	return r
}

// The ending value of the date range.
func (r ApiGetRestrictionsByDateRangeRequest) End(end string) ApiGetRestrictionsByDateRangeRequest {
	r.end = &end
	return r
}

// Defines the maximum amount of restrictions by day.
func (r ApiGetRestrictionsByDateRangeRequest) FetchSizeByDay(fetchSizeByDay int32) ApiGetRestrictionsByDateRangeRequest {
	r.fetchSizeByDay = &fetchSizeByDay
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ApiGetRestrictionsByDateRangeRequest) Limit(limit int32) ApiGetRestrictionsByDateRangeRequest {
	r.limit = &limit
	return r
}

func (r ApiGetRestrictionsByDateRangeRequest) RestrictionInfo(restrictionInfo string) ApiGetRestrictionsByDateRangeRequest {
	r.restrictionInfo = &restrictionInfo
	return r
}

// The starting value of the date range.
func (r ApiGetRestrictionsByDateRangeRequest) RestrictionSearchCriteriaStartDate(restrictionSearchCriteriaStartDate string) ApiGetRestrictionsByDateRangeRequest {
	r.restrictionSearchCriteriaStartDate = &restrictionSearchCriteriaStartDate
	return r
}

// Indicates restriction is applicable to specified Booking Channel Code in conjunction with other codes, if specified.
func (r ApiGetRestrictionsByDateRangeRequest) BookingChannelCode(bookingChannelCode string) ApiGetRestrictionsByDateRangeRequest {
	r.bookingChannelCode = &bookingChannelCode
	return r
}

// Indicates restriction is applicable to specified Rate Plan Category in conjunction with other codes, if specified.
func (r ApiGetRestrictionsByDateRangeRequest) RatePlanCategory(ratePlanCategory string) ApiGetRestrictionsByDateRangeRequest {
	r.ratePlanCategory = &ratePlanCategory
	return r
}

// Indicates restriction is applicable to specified Rate Plan Code in conjunction with other codes, if specified.
func (r ApiGetRestrictionsByDateRangeRequest) RatePlanCode(ratePlanCode string) ApiGetRestrictionsByDateRangeRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// Indicates restriction is applicable to specified Room Category in conjunction with other codes, if specified.
func (r ApiGetRestrictionsByDateRangeRequest) RoomClass(roomClass string) ApiGetRestrictionsByDateRangeRequest {
	r.roomClass = &roomClass
	return r
}

// Indicates restriction is applicable to specified Room Type in conjunction with other codes, if specified.
func (r ApiGetRestrictionsByDateRangeRequest) RoomType(roomType string) ApiGetRestrictionsByDateRangeRequest {
	r.roomType = &roomType
	return r
}

// An enumerated type defining the Filter Code Categort or Type. Values: BookingChannelCode, RoomClass, RoomType, RatePlanCategory, RatePlanCode.
func (r ApiGetRestrictionsByDateRangeRequest) FilterCodeCategory(filterCodeCategory string) ApiGetRestrictionsByDateRangeRequest {
	r.filterCodeCategory = &filterCodeCategory
	return r
}

// Defines BookingChannelCode, RoomClass, RoomType, RatePlanCategory or RatePlanCode to filter the Restriction.
func (r ApiGetRestrictionsByDateRangeRequest) FilterCode(filterCode []string) ApiGetRestrictionsByDateRangeRequest {
	r.filterCode = &filterCode
	return r
}

// External system code.
func (r ApiGetRestrictionsByDateRangeRequest) XExternalsystem(xExternalsystem string) ApiGetRestrictionsByDateRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ApiGetRestrictionsByDateRangeRequest) AcceptLanguage(acceptLanguage string) ApiGetRestrictionsByDateRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiGetRestrictionsByDateRangeRequest) Execute() (*RestrictionsByDateRange, *http.Response, error) {
	return r.ApiService.GetRestrictionsByDateRangeExecute(r)
}

/*
GetRestrictionsByDateRange Get hotel restrictions

Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID that identifies a single hotel property.
 @return ApiGetRestrictionsByDateRangeRequest
*/
func (a *AvailabilityApiService) GetRestrictionsByDateRange(ctx context.Context, hotelId string) ApiGetRestrictionsByDateRangeRequest {
	return ApiGetRestrictionsByDateRangeRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RestrictionsByDateRange
func (a *AvailabilityApiService) GetRestrictionsByDateRangeExecute(r ApiGetRestrictionsByDateRangeRequest) (*RestrictionsByDateRange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RestrictionsByDateRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvailabilityApiService.GetRestrictionsByDateRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/restrictions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.xAppKey == nil {
		return localVarReturnValue, nil, reportError("xAppKey is required and must be specified")
	}
	if r.xHotelid == nil {
		return localVarReturnValue, nil, reportError("xHotelid is required and must be specified")
	}

	if r.chainName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainName", r.chainName, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.fetchSizeByDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchSizeByDay", r.fetchSizeByDay, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.restrictionInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "restrictionInfo", r.restrictionInfo, "")
	}
	if r.restrictionSearchCriteriaStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "restrictionSearchCriteriaStartDate", r.restrictionSearchCriteriaStartDate, "")
	}
	if r.bookingChannelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookingChannelCode", r.bookingChannelCode, "")
	}
	if r.ratePlanCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCategory", r.ratePlanCategory, "")
	}
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
	}
	if r.roomClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", r.roomClass, "")
	}
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
	}
	if r.filterCodeCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterCodeCategory", r.filterCodeCategory, "")
	}
	if r.filterCode != nil {
		t := *r.filterCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filterCode", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filterCode", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
