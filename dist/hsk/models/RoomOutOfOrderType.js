"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomOutOfOrderTypeToJSON = exports.RoomOutOfOrderTypeFromJSONTyped = exports.RoomOutOfOrderTypeFromJSON = exports.instanceOfRoomOutOfOrderType = void 0;
const runtime_1 = require("../runtime");
const DateRangeType_1 = require("./DateRangeType");
const HousekeepingRoomStatusType_1 = require("./HousekeepingRoomStatusType");
/**
 * Check if a given object implements the RoomOutOfOrderType interface.
 */
function instanceOfRoomOutOfOrderType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomOutOfOrderType = instanceOfRoomOutOfOrderType;
function RoomOutOfOrderTypeFromJSON(json) {
    return RoomOutOfOrderTypeFromJSONTyped(json, false);
}
exports.RoomOutOfOrderTypeFromJSON = RoomOutOfOrderTypeFromJSON;
function RoomOutOfOrderTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'repairRemarks': !(0, runtime_1.exists)(json, 'repairRemarks') ? undefined : json['repairRemarks'],
        'returnStatus': !(0, runtime_1.exists)(json, 'returnStatus') ? undefined : (0, HousekeepingRoomStatusType_1.HousekeepingRoomStatusTypeFromJSON)(json['returnStatus']),
        'reasonCode': !(0, runtime_1.exists)(json, 'reasonCode') ? undefined : json['reasonCode'],
        'reasonDescription': !(0, runtime_1.exists)(json, 'reasonDescription') ? undefined : json['reasonDescription'],
        'newDateRange': !(0, runtime_1.exists)(json, 'newDateRange') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['newDateRange']),
        'housekeepingRoomStatus': !(0, runtime_1.exists)(json, 'housekeepingRoomStatus') ? undefined : (0, HousekeepingRoomStatusType_1.HousekeepingRoomStatusTypeFromJSON)(json['housekeepingRoomStatus']),
        'start': !(0, runtime_1.exists)(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !(0, runtime_1.exists)(json, 'end') ? undefined : (new Date(json['end'])),
    };
}
exports.RoomOutOfOrderTypeFromJSONTyped = RoomOutOfOrderTypeFromJSONTyped;
function RoomOutOfOrderTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'repairRemarks': value.repairRemarks,
        'returnStatus': (0, HousekeepingRoomStatusType_1.HousekeepingRoomStatusTypeToJSON)(value.returnStatus),
        'reasonCode': value.reasonCode,
        'reasonDescription': value.reasonDescription,
        'newDateRange': (0, DateRangeType_1.DateRangeTypeToJSON)(value.newDateRange),
        'housekeepingRoomStatus': (0, HousekeepingRoomStatusType_1.HousekeepingRoomStatusTypeToJSON)(value.housekeepingRoomStatus),
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0, 10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0, 10)),
    };
}
exports.RoomOutOfOrderTypeToJSON = RoomOutOfOrderTypeToJSON;
