"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetHousekeepingOverviewGuestServiceRequestEnum = exports.GetHousekeepingOverviewFetchInstructionsEnum = exports.GetHousekeepingOverviewRoomAssignmentStatusEnum = exports.GetHousekeepingOverviewServiceRequestStatusEnum = exports.GetHousekeepingOverviewRoomParityStatusEnum = exports.GetHousekeepingOverviewTurndownStatusEnum = exports.GetHousekeepingOverviewFrontOfficeRoomStatusEnum = exports.GetHousekeepingOverviewHousekeepingRoomStatusEnum = exports.GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = exports.HousekeepingApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class HousekeepingApi extends runtime.BaseAPI {
    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CompleteOutOfOrderRoomsRequestToJSON)(requestParameters.completeRoomRepair),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompleteRoomRepairStatusFromJSON)(jsonValue));
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRooms(requestParameters, initOverrides) {
        const response = await this.completeOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CompleteOutOfServiceRoomsRequestToJSON)(requestParameters.completeRoomRepair),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompleteRoomRepairStatusFromJSON)(jsonValue));
    }
    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRooms(requestParameters, initOverrides) {
        const response = await this.completeOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.roomDiscrepancyStatus) {
            queryParameters['roomDiscrepancyStatus'] = requestParameters.roomDiscrepancyStatus;
        }
        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }
        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }
        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }
        if (requestParameters.housekeepingEndDate !== undefined) {
            queryParameters['housekeepingEndDate'] = requestParameters.housekeepingEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.housekeepingStartDate !== undefined) {
            queryParameters['housekeepingStartDate'] = requestParameters.housekeepingStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }
        if (requestParameters.dueOut !== undefined) {
            queryParameters['dueOut'] = requestParameters.dueOut;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingDiscrepancies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomsFromJSON)(jsonValue));
    }
    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepancies(requestParameters, initOverrides) {
        const response = await this.getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverviewRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }
        if (requestParameters.frontOfficeRoomStatus) {
            queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
        }
        if (requestParameters.turndownStatus) {
            queryParameters['turndownStatus'] = requestParameters.turndownStatus;
        }
        if (requestParameters.roomParityStatus) {
            queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
        }
        if (requestParameters.serviceRequestStatus) {
            queryParameters['serviceRequestStatus'] = requestParameters.serviceRequestStatus;
        }
        if (requestParameters.roomAssignmentStatus) {
            queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }
        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }
        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }
        if (requestParameters.building) {
            queryParameters['building'] = requestParameters.building;
        }
        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }
        if (requestParameters.daySection) {
            queryParameters['daySection'] = requestParameters.daySection;
        }
        if (requestParameters.eveningSection) {
            queryParameters['eveningSection'] = requestParameters.eveningSection;
        }
        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }
        if (requestParameters.guestServiceRequest !== undefined) {
            queryParameters['guestServiceRequest'] = requestParameters.guestServiceRequest;
        }
        if (requestParameters.roomIdText !== undefined) {
            queryParameters['roomIdText'] = requestParameters.roomIdText;
        }
        if (requestParameters.excludeCombo !== undefined) {
            queryParameters['excludeCombo'] = requestParameters.excludeCombo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingOverview`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HousekeepingBoardFromJSON)(jsonValue));
    }
    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverview(requestParameters, initOverrides) {
        const response = await this.getHousekeepingOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRooms(requestParameters, initOverrides) {
        const response = await this.getOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRooms(requestParameters, initOverrides) {
        const response = await this.getOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostOutOfOrderRoomsRequestToJSON)(requestParameters.roomRepairOutOfOrder),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRooms(requestParameters, initOverrides) {
        const response = await this.postOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostOutOfServiceRoomsRequestToJSON)(requestParameters.roomRepairOutOfService),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRooms(requestParameters, initOverrides) {
        const response = await this.postOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatusRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/status`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutRoomRelatedStatusRequestToJSON)(requestParameters.housekeepingRoomStatusCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HousekeepingRoomStatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatus(requestParameters, initOverrides) {
        const response = await this.putRoomRelatedStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.HousekeepingApi = HousekeepingApi;
/**
 * @export
 */
exports.GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = {
    Sleep: 'Sleep',
    Skip: 'Skip',
    PersonDiscrepancy: 'PersonDiscrepancy'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewTurndownStatusEnum = {
    Required: 'Required',
    NotRequired: 'NotRequired',
    Compeleted: 'Compeleted'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewServiceRequestStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewFetchInstructionsEnum = {
    Summary: 'Summary',
    ResvInfo: 'ResvInfo',
    TurndownInfo: 'TurndownInfo'
};
/**
 * @export
 */
exports.GetHousekeepingOverviewGuestServiceRequestEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
};
