"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCateringMenusFetchInstructionsEnum = exports.GetCateringMenusMenuTypesEnum = exports.ResourceConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ResourceConfigApi extends runtime.BaseAPI {
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    async getCateringMenuItemsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.quickInsertCode !== undefined) {
            queryParameters['quickInsertCode'] = requestParameters.quickInsertCode;
        }
        if (requestParameters.listTypeCodes) {
            queryParameters['listTypeCodes'] = requestParameters.listTypeCodes;
        }
        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }
        if (requestParameters.eventTypesCodes) {
            queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CateringMenuItemsInfoFromJSON)(jsonValue));
    }
    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    async getCateringMenuItems(requestParameters, initOverrides) {
        const response = await this.getCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    async getCateringMenusRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.menuId !== undefined) {
            queryParameters['menuId'] = requestParameters.menuId;
        }
        if (requestParameters.iDExtension !== undefined) {
            queryParameters['iDExtension'] = requestParameters.iDExtension;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.menuIDType !== undefined) {
            queryParameters['menuIDType'] = requestParameters.menuIDType;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.classNameListCodes) {
            queryParameters['classNameListCodes'] = requestParameters.classNameListCodes;
        }
        if (requestParameters.eventTypesCodes) {
            queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
        }
        if (requestParameters.menuTypes) {
            queryParameters['menuTypes'] = requestParameters.menuTypes;
        }
        if (requestParameters.dietaryListCodes) {
            queryParameters['dietaryListCodes'] = requestParameters.dietaryListCodes;
        }
        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }
        if (requestParameters.multiChoice !== undefined) {
            queryParameters['multiChoice'] = requestParameters.multiChoice;
        }
        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }
        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end.toISOString().substr(0, 10);
        }
        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start.toISOString().substr(0, 10);
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CateringMenusInfoFromJSON)(jsonValue));
    }
    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    async getCateringMenus(requestParameters, initOverrides) {
        const response = await this.getCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ResourceConfigApi = ResourceConfigApi;
/**
 * @export
 */
exports.GetCateringMenusMenuTypesEnum = {
    Food: 'Food',
    Beverage: 'Beverage'
};
/**
 * @export
 */
exports.GetCateringMenusFetchInstructionsEnum = {
    Revenue: 'Revenue',
    MenuDetails: 'MenuDetails',
    MenuNotes: 'MenuNotes'
};
