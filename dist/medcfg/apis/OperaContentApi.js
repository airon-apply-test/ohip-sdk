"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveImageImageCodeEnum = exports.GetImageImageStyleEnum = exports.GetImageImageParameterCodeEnum = exports.GetImageImageCodeEnum = exports.OperaContentApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OperaContentApi extends runtime.BaseAPI {
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    async emailFolioReportRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/folioReports/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.EmailFolioReportRequestToJSON)(requestParameters.folioReportToEmail),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    async emailFolioReport(requestParameters, initOverrides) {
        const response = await this.emailFolioReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get a customized letter. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    async getCustomizedLetterRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.letterIdContext !== undefined) {
            queryParameters['letterIdContext'] = requestParameters.letterIdContext;
        }
        if (requestParameters.letterIdtype !== undefined) {
            queryParameters['letterIdtype'] = requestParameters.letterIdtype;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/customizedLetter/{letterId}`.replace(`{${"letterId"}}`, encodeURIComponent(String(requestParameters.letterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomizedLetterFromJSON)(jsonValue));
    }
    /**
     * Use this API to get a customized letter. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    async getCustomizedLetter(requestParameters, initOverrides) {
        const response = await this.getCustomizedLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    async getEmailFileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/emailFile/{emailId}`.replace(`{${"emailId"}}`, encodeURIComponent(String(requestParameters.emailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EmailFileFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    async getEmailFile(requestParameters, initOverrides) {
        const response = await this.getEmailFileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This APU will fetch file attachments. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    async getFileAttachmentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/fileAttachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * This APU will fetch file attachments. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    async getFileAttachment(requestParameters, initOverrides) {
        const response = await this.getFileAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    async getFolioReportRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.billNumber !== undefined) {
            queryParameters['billNumber'] = requestParameters.billNumber;
        }
        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.referenceCurrency !== undefined) {
            queryParameters['referenceCurrency'] = requestParameters.referenceCurrency;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folioReports`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioReportFromJSON)(jsonValue));
    }
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    async getFolioReport(requestParameters, initOverrides) {
        const response = await this.getFolioReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get an image. <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    async getImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.linkId !== undefined) {
            queryParameters['linkId'] = requestParameters.linkId;
        }
        if (requestParameters.linkIdContext !== undefined) {
            queryParameters['linkIdContext'] = requestParameters.linkIdContext;
        }
        if (requestParameters.linkIdType !== undefined) {
            queryParameters['linkIdType'] = requestParameters.linkIdType;
        }
        if (requestParameters.imageCode !== undefined) {
            queryParameters['imageCode'] = requestParameters.imageCode;
        }
        if (requestParameters.imageParameterCode) {
            queryParameters['imageParameterCode'] = requestParameters.imageParameterCode;
        }
        if (requestParameters.imageParameterValue) {
            queryParameters['imageParameterValue'] = requestParameters.imageParameterValue;
        }
        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }
        if (requestParameters.imageStyle !== undefined) {
            queryParameters['imageStyle'] = requestParameters.imageStyle;
        }
        if (requestParameters.imageId !== undefined) {
            queryParameters['imageId'] = requestParameters.imageId;
        }
        if (requestParameters.imageIdContext !== undefined) {
            queryParameters['imageIdContext'] = requestParameters.imageIdContext;
        }
        if (requestParameters.imageIdType !== undefined) {
            queryParameters['imageIdType'] = requestParameters.imageIdType;
        }
        if (requestParameters.base64 !== undefined) {
            queryParameters['base64'] = requestParameters.base64;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/images`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ImageFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get an image. <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    async getImage(requestParameters, initOverrides) {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will get a registration card for a reservation. <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    async getRegistrationCardRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.regenerate !== undefined) {
            queryParameters['regenerate'] = requestParameters.regenerate;
        }
        if (requestParameters.signedOnly !== undefined) {
            queryParameters['signedOnly'] = requestParameters.signedOnly;
        }
        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }
        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/registrationCard`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RegistrationCardFromJSON)(jsonValue));
    }
    /**
     * This API will get a registration card for a reservation. <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    async getRegistrationCard(requestParameters, initOverrides) {
        const response = await this.getRegistrationCardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Delete image
     */
    async removeImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.imageCode !== undefined) {
            queryParameters['imageCode'] = requestParameters.imageCode;
        }
        if (requestParameters.imageSet !== undefined) {
            queryParameters['imageSet'] = requestParameters.imageSet;
        }
        if (requestParameters.imageId !== undefined) {
            queryParameters['imageId'] = requestParameters.imageId;
        }
        if (requestParameters.imageIdContext !== undefined) {
            queryParameters['imageIdContext'] = requestParameters.imageIdContext;
        }
        if (requestParameters.imageIdType !== undefined) {
            queryParameters['imageIdType'] = requestParameters.imageIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/images`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Delete image
     */
    async removeImage(requestParameters, initOverrides) {
        const response = await this.removeImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can set a customized letter with this API. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    async setCustomizedLetterRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/customizedLetter`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SetCustomizedLetterRequestToJSON)(requestParameters.customizedLetter),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomizedLetterStatusFromJSON)(jsonValue));
    }
    /**
     * You can set a customized letter with this API. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    async setCustomizedLetter(requestParameters, initOverrides) {
        const response = await this.setCustomizedLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this APU to upload a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    async uploadFileAttachmentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/fileAttachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UploadFileAttachmentRequestToJSON)(requestParameters.fileToUpload),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this APU to upload a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    async uploadFileAttachment(requestParameters, initOverrides) {
        const response = await this.uploadFileAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Upload an image
     */
    async uploadImageRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UploadImageRequestToJSON)(requestParameters.imageToUpload),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Upload an image
     */
    async uploadImage(requestParameters, initOverrides) {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OperaContentApi = OperaContentApi;
/**
 * @export
 */
exports.GetImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
/**
 * @export
 */
exports.GetImageImageParameterCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
/**
 * @export
 */
exports.GetImageImageStyleEnum = {
    Full: 'Full',
    Thumbnail: 'Thumbnail',
    Icon: 'Icon',
    Square: 'Square',
    Banner: 'Banner',
    Button: 'Button',
    Lowres: 'Lowres',
    Highres: 'Highres'
};
/**
 * @export
 */
exports.RemoveImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
