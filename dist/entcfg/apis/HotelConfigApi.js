"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetHotelFetchInstructionsEnum = exports.HotelConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class HotelConfigApi extends runtime.BaseAPI {
    /**
     * This API is used to Use this API to update an existing attraction. . <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeAttractionsRequestToJSON)(requestParameters.attractionsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API is used to Use this API to update an existing attraction. . <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractions(requestParameters, initOverrides) {
        const response = await this.changeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update Credit Card Types. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeCreditCardTypesRequestToJSON)(requestParameters.creditCardTypesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update Credit Card Types. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypes(requestParameters, initOverrides) {
        const response = await this.changeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update Departments. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeDepartmentsRequestToJSON)(requestParameters.departmentsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update Departments. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartments(requestParameters, initOverrides) {
        const response = await this.changeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update Hotel Contact. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContactsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeHotelContactsRequestToJSON)(requestParameters.hotelContactsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update Hotel Contact. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContacts(requestParameters, initOverrides) {
        const response = await this.changeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update Note information. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeHotelNotesRequestToJSON)(requestParameters.hotelNotesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Update Note information. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotes(requestParameters, initOverrides) {
        const response = await this.changeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{sourceHotelId}/departments/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CopyDepartmentsRequestToJSON)(requestParameters.copyDepartments),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartments(requestParameters, initOverrides) {
        const response = await this.copyDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirportsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }
        if (requestParameters.airportCodes) {
            queryParameters['airportCodes'] = requestParameters.airportCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/airports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AirportsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirports(requestParameters, initOverrides) {
        const response = await this.getAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenitiesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.general !== undefined) {
            queryParameters['general'] = requestParameters.general;
        }
        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }
        if (requestParameters.amenityCodes) {
            queryParameters['amenityCodes'] = requestParameters.amenityCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AmenitiesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenities(requestParameters, initOverrides) {
        const response = await this.getAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AttractionsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractions(requestParameters, initOverrides) {
        const response = await this.getAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreditCardTypesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypes(requestParameters, initOverrides) {
        const response = await this.getCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }
        if (requestParameters.departmentWildCard !== undefined) {
            queryParameters['departmentWildCard'] = requestParameters.departmentWildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepartmentsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartments(requestParameters, initOverrides) {
        const response = await this.getDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotelRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotel(requestParameters, initOverrides) {
        const response = await this.getHotelRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details
     */
    async getHotelDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelDetailCodes) {
            queryParameters['hotelDetailCodes'] = requestParameters.hotelDetailCodes;
        }
        if (requestParameters.hotelDetailCategoriesCodes) {
            queryParameters['hotelDetailCategoriesCodes'] = requestParameters.hotelDetailCategoriesCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/hotelDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelDetailsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details
     */
    async getHotelDetails(requestParameters, initOverrides) {
        const response = await this.getHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.languageCodes) {
            queryParameters['languageCodes'] = requestParameters.languageCodes;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.useAsAlternateLanguage !== undefined) {
            queryParameters['useAsAlternateLanguage'] = requestParameters.useAsAlternateLanguage;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.LanguagesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguages(requestParameters, initOverrides) {
        const response = await this.getLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitlesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.jobTitleCodes) {
            queryParameters['jobTitleCodes'] = requestParameters.jobTitleCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/jobTitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TemplateJobTitlesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitles(requestParameters, initOverrides) {
        const response = await this.getTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransportationDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportation(requestParameters, initOverrides) {
        const response = await this.getTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/transportations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransportationTemplatesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplates(requestParameters, initOverrides) {
        const response = await this.getTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenitiesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAmenitiesRequestToJSON)(requestParameters.amenitiesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenities(requestParameters, initOverrides) {
        const response = await this.postAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAttractionsRequestToJSON)(requestParameters.attractionsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractions(requestParameters, initOverrides) {
        const response = await this.postAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCreditCardTypesRequestToJSON)(requestParameters.creditCardTypesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypes(requestParameters, initOverrides) {
        const response = await this.postCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDepartmentsRequestToJSON)(requestParameters.departmentsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartments(requestParameters, initOverrides) {
        const response = await this.postDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContactsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/contacts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostHotelContactsRequestToJSON)(requestParameters.hotelContactsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContacts(requestParameters, initOverrides) {
        const response = await this.postHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/notes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostHotelNotesRequestToJSON)(requestParameters.hotelNotesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotes(requestParameters, initOverrides) {
        const response = await this.postHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostTransportationRequestToJSON)(requestParameters.transportationCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportation(requestParameters, initOverrides) {
        const response = await this.postTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  Use this API to remove an existing attraction. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  Use this API to remove an existing attraction. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractions(requestParameters, initOverrides) {
        const response = await this.removeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Credit Card Types. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.creditCardTypesCode) {
            queryParameters['creditCardTypesCode'] = requestParameters.creditCardTypesCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Credit Card Types. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypes(requestParameters, initOverrides) {
        const response = await this.removeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Departments. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Departments. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartments(requestParameters, initOverrides) {
        const response = await this.removeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Hotel contact. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContactsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Hotel contact. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContacts(requestParameters, initOverrides) {
        const response = await this.removeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Note information. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Note information. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotes(requestParameters, initOverrides) {
        const response = await this.removeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.HotelConfigApi = HotelConfigApi;
/**
 * @export
 */
exports.GetHotelFetchInstructionsEnum = {
    General: 'General',
    Attraction: 'Attraction',
    Transportation: 'Transportation',
    Package: 'Package',
    Dining: 'Dining',
    Feature: 'Feature',
    Directions: 'Directions',
    GeneralNotes: 'GeneralNotes',
    Airports: 'Airports',
    Alternatehotels: 'Alternatehotels',
    Miscellaneous: 'Miscellaneous',
    Raterange: 'Raterange',
    Contacts: 'Contacts',
    EventSpaces: 'EventSpaces',
    Notes: 'Notes',
    Corporateinformation: 'Corporateinformation',
    Meetingrooms: 'Meetingrooms'
};
