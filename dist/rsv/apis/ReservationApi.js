"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetReservationsRoomReadyStatusesEnum = exports.GetReservationsReservationStatusesEnum = exports.GetReservationsSearchTypesEnum = exports.GetReservationsFetchInstructionsEnum = exports.GetReservationsHousekeepingRoomStatusesEnum = exports.GetReservationsSortOrderEnum = exports.GetReservationsOrderByEnum = exports.GetReservationsSearchTypeEnum = exports.GetReservationAllowedActionsEnum = exports.GetReservationFetchInstructionsEnum = exports.GetHotelReservationsRoomReadyStatusesEnum = exports.GetHotelReservationsReservationStatusesEnum = exports.GetHotelReservationsSearchTypesEnum = exports.GetHotelReservationsPeriodicFolioEnum = exports.GetHotelReservationsAllowedReservationActionsEnum = exports.GetHotelReservationsFetchInstructionsEnum = exports.GetHotelReservationsHousekeepingRoomStatusesEnum = exports.GetHotelReservationsSortOrderEnum = exports.GetHotelReservationsOrderByEnum = exports.GetHotelReservationsSearchTypeEnum = exports.GetExternalSystemReservationsRoomReadyStatusesEnum = exports.GetExternalSystemReservationsReservationStatusesEnum = exports.GetExternalSystemReservationsSearchTypesEnum = exports.GetExternalSystemReservationsFetchInstructionsEnum = exports.GetExternalSystemReservationsHousekeepingRoomStatusesEnum = exports.GetExternalSystemReservationsSortOrderEnum = exports.GetExternalSystemReservationsOrderByEnum = exports.GetExternalSystemReservationsSearchTypeEnum = exports.DeletePreCheckInReservationEmailFolioEmailFormatEnum = exports.DeletePreCheckInReservationProcessingEnum = exports.DeletePreCheckInReservationCardTypeEnum = exports.DeletePreCheckInReservationCardOrTokenEnum = exports.ReservationApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ReservationApi extends runtime.BaseAPI {
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.resvIDExtension !== undefined) {
            queryParameters['resvIDExtension'] = requestParameters.resvIDExtension;
        }
        if (requestParameters.arrivalTime !== undefined) {
            queryParameters['arrivalTime'] = requestParameters.arrivalTime.toISOString();
        }
        if (requestParameters.roomNumber !== undefined) {
            queryParameters['roomNumber'] = requestParameters.roomNumber;
        }
        if (requestParameters.guestPreferredCurrency !== undefined) {
            queryParameters['guestPreferredCurrency'] = requestParameters.guestPreferredCurrency;
        }
        if (requestParameters.allowMobileViewFolio !== undefined) {
            queryParameters['allowMobileViewFolio'] = requestParameters.allowMobileViewFolio;
        }
        if (requestParameters.paymentMethodDescription) {
            queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
        }
        if (requestParameters.paymentMethodFolioView) {
            queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
        }
        if (requestParameters.paymentMethod) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.cardId !== undefined) {
            queryParameters['cardId'] = requestParameters.cardId;
        }
        if (requestParameters.cardIdIDExtension !== undefined) {
            queryParameters['cardIdIDExtension'] = requestParameters.cardIdIDExtension;
        }
        if (requestParameters.cardIdIDContext !== undefined) {
            queryParameters['cardIdIDContext'] = requestParameters.cardIdIDContext;
        }
        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }
        if (requestParameters.currentAuthorizedAmount !== undefined) {
            queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
        }
        if (requestParameters.authorizedAmountCurrencyCode !== undefined) {
            queryParameters['authorizedAmountCurrencyCode'] = requestParameters.authorizedAmountCurrencyCode;
        }
        if (requestParameters.approvalAmountNeeded !== undefined) {
            queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
        }
        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.authorizationRuleCode !== undefined) {
            queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
        }
        if (requestParameters.authorizationRuleAmount !== undefined) {
            queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
        }
        if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
            queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
        }
        if (requestParameters.authorizationRulePercent !== undefined) {
            queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.emailFolioID !== undefined) {
            queryParameters['emailFolioID'] = requestParameters.emailFolioID;
        }
        if (requestParameters.emailFolioIDExtension !== undefined) {
            queryParameters['emailFolioIDExtension'] = requestParameters.emailFolioIDExtension;
        }
        if (requestParameters.emailFolioIDContext !== undefined) {
            queryParameters['emailFolioIDContext'] = requestParameters.emailFolioIDContext;
        }
        if (requestParameters.emailFolioIDType !== undefined) {
            queryParameters['emailFolioIDType'] = requestParameters.emailFolioIDType;
        }
        if (requestParameters.emailFolioCreateDateTime !== undefined) {
            queryParameters['emailFolioCreateDateTime'] = requestParameters.emailFolioCreateDateTime.toISOString();
        }
        if (requestParameters.emailFolioCreatorID !== undefined) {
            queryParameters['emailFolioCreatorID'] = requestParameters.emailFolioCreatorID;
        }
        if (requestParameters.emailFolioEmailAddress !== undefined) {
            queryParameters['emailFolioEmailAddress'] = requestParameters.emailFolioEmailAddress;
        }
        if (requestParameters.emailFolioEmailFormat !== undefined) {
            queryParameters['emailFolioEmailFormat'] = requestParameters.emailFolioEmailFormat;
        }
        if (requestParameters.emailFolioLastModifierID !== undefined) {
            queryParameters['emailFolioLastModifierID'] = requestParameters.emailFolioLastModifierID;
        }
        if (requestParameters.emailFolioLastModifyDateTime !== undefined) {
            queryParameters['emailFolioLastModifyDateTime'] = requestParameters.emailFolioLastModifyDateTime.toISOString();
        }
        if (requestParameters.emailFolioOrderSequence !== undefined) {
            queryParameters['emailFolioOrderSequence'] = requestParameters.emailFolioOrderSequence;
        }
        if (requestParameters.emailFolioPrimaryInd !== undefined) {
            queryParameters['emailFolioPrimaryInd'] = requestParameters.emailFolioPrimaryInd;
        }
        if (requestParameters.emailFolioPurgeDate !== undefined) {
            queryParameters['emailFolioPurgeDate'] = requestParameters.emailFolioPurgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailFolioType !== undefined) {
            queryParameters['emailFolioType'] = requestParameters.emailFolioType;
        }
        if (requestParameters.emailFolioTypeDescription !== undefined) {
            queryParameters['emailFolioTypeDescription'] = requestParameters.emailFolioTypeDescription;
        }
        if (requestParameters.arrivalCarrierCode !== undefined) {
            queryParameters['arrivalCarrierCode'] = requestParameters.arrivalCarrierCode;
        }
        if (requestParameters.arrivalDateTime !== undefined) {
            queryParameters['arrivalDateTime'] = requestParameters.arrivalDateTime.toISOString();
        }
        if (requestParameters.arrivalStationCode !== undefined) {
            queryParameters['arrivalStationCode'] = requestParameters.arrivalStationCode;
        }
        if (requestParameters.arrivalTransportCode !== undefined) {
            queryParameters['arrivalTransportCode'] = requestParameters.arrivalTransportCode;
        }
        if (requestParameters.arrivalTransportationReqd !== undefined) {
            queryParameters['arrivalTransportationReqd'] = requestParameters.arrivalTransportationReqd;
        }
        if (requestParameters.arrivalType !== undefined) {
            queryParameters['arrivalType'] = requestParameters.arrivalType;
        }
        if (requestParameters.arrivalComments !== undefined) {
            queryParameters['arrivalComments'] = requestParameters.arrivalComments;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservation(requestParameters, initOverrides) {
        const response = await this.deletePreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinksRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinks(requestParameters, initOverrides) {
        const response = await this.deleteReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.externalReferenceList) {
            queryParameters['externalReferenceList'] = requestParameters.externalReferenceList;
        }
        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }
        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = requestParameters.departureEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = requestParameters.departureStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime.toISOString();
        }
        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime.toISOString();
        }
        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime.toISOString();
        }
        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime.toISOString();
        }
        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }
        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }
        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }
        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }
        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }
        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }
        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }
        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }
        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }
        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }
        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }
        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }
        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }
        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }
        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }
        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }
        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }
        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = requestParameters.cancelledOn.toISOString().substr(0, 10);
        }
        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }
        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }
        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }
        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }
        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }
        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }
        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }
        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }
        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }
        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }
        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }
        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }
        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }
        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }
        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }
        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }
        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }
        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }
        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }
        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }
        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }
        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }
        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }
        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }
        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }
        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }
        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }
        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }
        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }
        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }
        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }
        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }
        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }
        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }
        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }
        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }
        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = requestParameters.stayDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }
        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }
        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }
        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }
        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }
        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }
        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }
        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }
        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }
        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }
        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }
        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }
        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }
        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }
        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }
        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }
        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }
        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/reservations`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationsDetailsFromJSON)(jsonValue));
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservations(requestParameters, initOverrides) {
        const response = await this.getExternalSystemReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }
        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }
        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }
        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }
        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }
        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }
        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }
        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = requestParameters.departureEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = requestParameters.departureStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.stayOnStartDate !== undefined) {
            queryParameters['stayOnStartDate'] = requestParameters.stayOnStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.createdOnStartDate !== undefined) {
            queryParameters['createdOnStartDate'] = requestParameters.createdOnStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime.toISOString();
        }
        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime.toISOString();
        }
        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime.toISOString();
        }
        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime.toISOString();
        }
        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }
        if (requestParameters.sourceNames) {
            queryParameters['sourceNames'] = requestParameters.sourceNames;
        }
        if (requestParameters.travelAgentNames) {
            queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
        }
        if (requestParameters.groupNames) {
            queryParameters['groupNames'] = requestParameters.groupNames;
        }
        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }
        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }
        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }
        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }
        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }
        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }
        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }
        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }
        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }
        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }
        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }
        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }
        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }
        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }
        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }
        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }
        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = requestParameters.cancelledOn.toISOString().substr(0, 10);
        }
        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }
        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }
        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }
        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }
        if (requestParameters.blockCriteriaHotelCode !== undefined) {
            queryParameters['blockCriteriaHotelCode'] = requestParameters.blockCriteriaHotelCode;
        }
        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }
        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }
        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }
        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }
        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }
        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }
        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }
        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }
        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }
        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }
        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }
        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }
        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }
        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }
        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.allowedReservationActions) {
            queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
        }
        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }
        if (requestParameters.excludeNoPost !== undefined) {
            queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
        }
        if (requestParameters.excludePMRooms !== undefined) {
            queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
        }
        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }
        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }
        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }
        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }
        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }
        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }
        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }
        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }
        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }
        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }
        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }
        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }
        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }
        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }
        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }
        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }
        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }
        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = requestParameters.stayDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }
        if (requestParameters.periodicFolio !== undefined) {
            queryParameters['periodicFolio'] = requestParameters.periodicFolio;
        }
        if (requestParameters.folioSettlementTypes !== undefined) {
            queryParameters['folioSettlementTypes'] = requestParameters.folioSettlementTypes;
        }
        if (requestParameters.defaultDays !== undefined) {
            queryParameters['defaultDays'] = requestParameters.defaultDays;
        }
        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }
        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }
        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }
        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }
        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }
        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }
        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }
        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }
        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }
        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }
        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }
        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }
        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }
        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }
        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }
        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }
        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservations(requestParameters, initOverrides) {
        const response = await this.getHotelReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }
        if (requestParameters.criteriaStartDate !== undefined) {
            queryParameters['criteriaStartDate'] = requestParameters.criteriaStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.criteriaEndDate !== undefined) {
            queryParameters['criteriaEndDate'] = requestParameters.criteriaEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }
        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }
        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }
        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }
        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }
        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }
        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }
        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }
        if (requestParameters.detailDate !== undefined) {
            queryParameters['detailDate'] = requestParameters.detailDate.toISOString().substr(0, 10);
        }
        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }
        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }
        if (requestParameters.effectiveRateEnd) {
            queryParameters['effectiveRateEnd'] = requestParameters.effectiveRateEnd;
        }
        if (requestParameters.effectiveRateStart) {
            queryParameters['effectiveRateStart'] = requestParameters.effectiveRateStart;
        }
        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/rateInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RateInfoFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfo(requestParameters, initOverrides) {
        const response = await this.getRateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.allowedActions) {
            queryParameters['allowedActions'] = requestParameters.allowedActions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservation(requestParameters, initOverrides) {
        const response = await this.getReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLogRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }
        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }
        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }
        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }
        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityLogFromJSON)(jsonValue));
    }
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLog(requestParameters, initOverrides) {
        const response = await this.getReservationActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationUpsellInfoFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfo(requestParameters, initOverrides) {
        const response = await this.getReservationUpsellInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }
        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }
        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }
        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }
        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }
        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }
        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = requestParameters.departureEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = requestParameters.departureStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime.toISOString();
        }
        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime.toISOString();
        }
        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime.toISOString();
        }
        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime.toISOString();
        }
        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }
        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }
        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }
        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }
        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }
        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }
        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }
        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }
        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }
        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }
        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }
        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }
        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }
        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }
        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }
        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }
        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }
        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = requestParameters.cancelledOn.toISOString().substr(0, 10);
        }
        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }
        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }
        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }
        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }
        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }
        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }
        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }
        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }
        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }
        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }
        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }
        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }
        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }
        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }
        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }
        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }
        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }
        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }
        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }
        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }
        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }
        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }
        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }
        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }
        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }
        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }
        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }
        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }
        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }
        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }
        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }
        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }
        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }
        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }
        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }
        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }
        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = requestParameters.stayDate.toISOString().substr(0, 10);
        }
        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }
        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }
        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }
        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }
        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }
        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }
        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }
        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }
        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }
        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }
        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }
        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }
        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }
        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }
        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }
        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }
        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }
        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/reservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationsDetailsFromJSON)(jsonValue));
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservations(requestParameters, initOverrides) {
        const response = await this.getReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCallRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/calls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCallRequestToJSON)(requestParameters.registerCall),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RegisterCallFromJSON)(jsonValue));
    }
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCall(requestParameters, initOverrides) {
        const response = await this.postCallRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCancelReservationRequestToJSON)(requestParameters.cancelReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CancelReservationDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservation(requestParameters, initOverrides) {
        const response = await this.postCancelReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCombineShareReservationsByExtIdRequestToJSON)(requestParameters.combineShareReservations),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CombineShareReservationsDetailsFromJSON)(jsonValue));
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservations(requestParameters, initOverrides) {
        const response = await this.postCombineShareReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCombineShareReservationsByExtIdRequestToJSON)(requestParameters.combineShareReservations),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CombineShareReservationsDetailsFromJSON)(jsonValue));
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtId(requestParameters, initOverrides) {
        const response = await this.postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostPreCheckInReservationRequestToJSON)(requestParameters.preCheckInReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservation(requestParameters, initOverrides) {
        const response = await this.postPreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostReservationRequestToJSON)(requestParameters.createReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservation(requestParameters, initOverrides) {
        const response = await this.postReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlockRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/reservations`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostReservationByBlockRequestToJSON)(requestParameters.createReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlock(requestParameters, initOverrides) {
        const response = await this.postReservationByBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinksRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostReservationLinksRequestToJSON)(requestParameters.linkReservationsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinks(requestParameters, initOverrides) {
        const response = await this.postReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChainRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostReservationLinksByChainRequestToJSON)(requestParameters.linkReservationsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChain(requestParameters, initOverrides) {
        const response = await this.postReservationLinksByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostUpsellReservationRequestToJSON)(requestParameters.upsellReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservation(requestParameters, initOverrides) {
        const response = await this.postUpsellReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutReinstateReservationRequestToJSON)(requestParameters.reinstateReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReinstateReservationDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservation(requestParameters, initOverrides) {
        const response = await this.putReinstateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutReservationRequestToJSON)(requestParameters.changeReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangeReservationDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservation(requestParameters, initOverrides) {
        const response = await this.putReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChangesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/validations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutValidateReservationChangesRequestToJSON)(requestParameters.validateReservationChanges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ValidateReservationChangesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChanges(requestParameters, initOverrides) {
        const response = await this.putValidateReservationChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ReservationApi = ReservationApi;
/**
 * @export
 */
exports.DeletePreCheckInReservationCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationEmailFolioEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
/**
 * @export
 */
exports.GetHotelReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetHotelReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
};
/**
 * @export
 */
exports.GetHotelReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetHotelReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHotelReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetHotelReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
};
/**
 * @export
 */
exports.GetHotelReservationsPeriodicFolioEnum = {
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Days: 'Days'
};
/**
 * @export
 */
exports.GetHotelReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetHotelReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetHotelReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
/**
 * @export
 */
exports.GetReservationFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetReservationAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
};
/**
 * @export
 */
exports.GetReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
};
/**
 * @export
 */
exports.GetReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
