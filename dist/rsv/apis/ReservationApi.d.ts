/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ActivityLog, CancelReservationDetails, ChangeReservationDetails, CombineShareReservationsDetails, PostCallRequest, PostCancelReservationRequest, PostCombineShareReservationsByExtIdRequest, PostPreCheckInReservationRequest, PostReservationByBlockRequest, PostReservationLinksByChainRequest, PostReservationLinksRequest, PostReservationRequest, PostUpsellReservationRequest, PutReinstateReservationRequest, PutReservationRequest, PutValidateReservationChangesRequest, RateInfo, RegisterCall, ReinstateReservationDetails, Reservation, ReservationUpsellInfo, ReservationsDetails, Status, ValidateReservationChangesDetails } from '../models';
export interface DeletePreCheckInReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    resvIDExtension?: number;
    arrivalTime?: Date;
    roomNumber?: string;
    guestPreferredCurrency?: string;
    allowMobileViewFolio?: boolean;
    paymentMethodDescription?: Array<string>;
    paymentMethodFolioView?: Array<number>;
    paymentMethod?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: DeletePreCheckInReservationCardOrTokenEnum;
    cardType?: DeletePreCheckInReservationCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: DeletePreCheckInReservationProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdIDExtension?: number;
    cardIdIDContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    authorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioID?: string;
    emailFolioIDExtension?: number;
    emailFolioIDContext?: string;
    emailFolioIDType?: string;
    emailFolioCreateDateTime?: Date;
    emailFolioCreatorID?: string;
    emailFolioEmailAddress?: string;
    emailFolioEmailFormat?: DeletePreCheckInReservationEmailFolioEmailFormatEnum;
    emailFolioLastModifierID?: string;
    emailFolioLastModifyDateTime?: Date;
    emailFolioOrderSequence?: number;
    emailFolioPrimaryInd?: boolean;
    emailFolioPurgeDate?: Date;
    emailFolioType?: string;
    emailFolioTypeDescription?: string;
    arrivalCarrierCode?: string;
    arrivalDateTime?: Date;
    arrivalStationCode?: string;
    arrivalTransportCode?: string;
    arrivalTransportationReqd?: boolean;
    arrivalType?: string;
    arrivalComments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLinksRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExternalSystemReservationsRequest {
    extSystemCode?: string;
    externalReferenceList?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetExternalSystemReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: Date;
    expectedArrivalEndTime?: Date;
    expectedReturnEndTime?: Date;
    expectedReturnStartTime?: Date;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetExternalSystemReservationsOrderByEnum>;
    sortOrder?: Set<GetExternalSystemReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetExternalSystemReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetExternalSystemReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetExternalSystemReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetExternalSystemReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetExternalSystemReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetHotelReservationsSearchTypeEnum;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    stayOnStartDate?: Date;
    createdOnStartDate?: Date;
    expectedArrivalEndTime?: Date;
    expectedArrivalStartTime?: Date;
    expectedReturnEndTime?: Date;
    expectedReturnStartTime?: Date;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileId?: string;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockCriteriaHotelCode?: string;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetHotelReservationsOrderByEnum>;
    sortOrder?: Set<GetHotelReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetHotelReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetHotelReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetHotelReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    periodicFolio?: GetHotelReservationsPeriodicFolioEnum;
    folioSettlementTypes?: string;
    defaultDays?: boolean;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetHotelReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetHotelReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetHotelReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRateInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyCode?: string;
    summaryInfo?: boolean;
    criteriaStartDate?: Date;
    criteriaEndDate?: Date;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    detailDate?: Date;
    blockId?: string;
    blockIdType?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    ratePlanCode?: string;
    effectiveRateEnd?: Array<Date>;
    effectiveRateStart?: Array<Date>;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationAllowedActionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationActivityLogRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    searchText?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationUpsellInfoRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: Date;
    expectedArrivalEndTime?: Date;
    expectedReturnEndTime?: Date;
    expectedReturnStartTime?: Date;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetReservationsOrderByEnum>;
    sortOrder?: Set<GetReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCallOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerCall?: PostCallRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation?: PostCancelReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCombineShareReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: PostCombineShareReservationsByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCombineShareReservationsByExtIdOperationRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: PostCombineShareReservationsByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostPreCheckInReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInReservation?: PostPreCheckInReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationByBlockOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationByBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLinksOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: PostReservationLinksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLinksByChainOperationRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: PostReservationLinksByChainRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostUpsellReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellReservation?: PostUpsellReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReinstateReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation?: PutReinstateReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation?: PutReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutValidateReservationChangesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateReservationChanges?: PutValidateReservationChangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ReservationApi extends runtime.BaseAPI {
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservationRaw(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservation(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinksRaw(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinks(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservationsRaw(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservations(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservationsRaw(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservations(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfoRaw(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>>;
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfo(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo>;
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>>;
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation>;
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLogRaw(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>>;
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLog(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog>;
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfoRaw(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationUpsellInfo>>;
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfo(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationUpsellInfo>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservations(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCallRaw(requestParameters: PostCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCall>>;
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCall(requestParameters: PostCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCall>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservationRaw(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservation(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsRaw(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservations(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtIdRaw(requestParameters: PostCombineShareReservationsByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtId(requestParameters: PostCombineShareReservationsByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails>;
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservationRaw(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservation(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservationRaw(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservation(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlockRaw(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlock(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinksRaw(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinks(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChainRaw(requestParameters: PostReservationLinksByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChain(requestParameters: PostReservationLinksByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservationRaw(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservation(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservationRaw(requestParameters: PutReinstateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservation(requestParameters: PutReinstateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservationRaw(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservation(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails>;
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChangesRaw(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateReservationChangesDetails>>;
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChanges(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateReservationChangesDetails>;
}
/**
 * @export
 */
export declare const DeletePreCheckInReservationCardOrTokenEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type DeletePreCheckInReservationCardOrTokenEnum = typeof DeletePreCheckInReservationCardOrTokenEnum[keyof typeof DeletePreCheckInReservationCardOrTokenEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type DeletePreCheckInReservationCardTypeEnum = typeof DeletePreCheckInReservationCardTypeEnum[keyof typeof DeletePreCheckInReservationCardTypeEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type DeletePreCheckInReservationProcessingEnum = typeof DeletePreCheckInReservationProcessingEnum[keyof typeof DeletePreCheckInReservationProcessingEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationEmailFolioEmailFormatEnum: {
    readonly Html: "Html";
    readonly Text: "Text";
};
export type DeletePreCheckInReservationEmailFolioEmailFormatEnum = typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum[keyof typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetExternalSystemReservationsSearchTypeEnum = typeof GetExternalSystemReservationsSearchTypeEnum[keyof typeof GetExternalSystemReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
};
export type GetExternalSystemReservationsOrderByEnum = typeof GetExternalSystemReservationsOrderByEnum[keyof typeof GetExternalSystemReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetExternalSystemReservationsSortOrderEnum = typeof GetExternalSystemReservationsSortOrderEnum[keyof typeof GetExternalSystemReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetExternalSystemReservationsHousekeepingRoomStatusesEnum = typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum[keyof typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetExternalSystemReservationsFetchInstructionsEnum = typeof GetExternalSystemReservationsFetchInstructionsEnum[keyof typeof GetExternalSystemReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetExternalSystemReservationsSearchTypesEnum = typeof GetExternalSystemReservationsSearchTypesEnum[keyof typeof GetExternalSystemReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetExternalSystemReservationsReservationStatusesEnum = typeof GetExternalSystemReservationsReservationStatusesEnum[keyof typeof GetExternalSystemReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetExternalSystemReservationsRoomReadyStatusesEnum = typeof GetExternalSystemReservationsRoomReadyStatusesEnum[keyof typeof GetExternalSystemReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetHotelReservationsSearchTypeEnum = typeof GetHotelReservationsSearchTypeEnum[keyof typeof GetHotelReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetHotelReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
};
export type GetHotelReservationsOrderByEnum = typeof GetHotelReservationsOrderByEnum[keyof typeof GetHotelReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetHotelReservationsSortOrderEnum = typeof GetHotelReservationsSortOrderEnum[keyof typeof GetHotelReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetHotelReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetHotelReservationsHousekeepingRoomStatusesEnum = typeof GetHotelReservationsHousekeepingRoomStatusesEnum[keyof typeof GetHotelReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetHotelReservationsFetchInstructionsEnum = typeof GetHotelReservationsFetchInstructionsEnum[keyof typeof GetHotelReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetHotelReservationsAllowedReservationActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
};
export type GetHotelReservationsAllowedReservationActionsEnum = typeof GetHotelReservationsAllowedReservationActionsEnum[keyof typeof GetHotelReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export declare const GetHotelReservationsPeriodicFolioEnum: {
    readonly Weekly: "Weekly";
    readonly Monthly: "Monthly";
    readonly Days: "Days";
};
export type GetHotelReservationsPeriodicFolioEnum = typeof GetHotelReservationsPeriodicFolioEnum[keyof typeof GetHotelReservationsPeriodicFolioEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetHotelReservationsSearchTypesEnum = typeof GetHotelReservationsSearchTypesEnum[keyof typeof GetHotelReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetHotelReservationsReservationStatusesEnum = typeof GetHotelReservationsReservationStatusesEnum[keyof typeof GetHotelReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetHotelReservationsRoomReadyStatusesEnum = typeof GetHotelReservationsRoomReadyStatusesEnum[keyof typeof GetHotelReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export declare const GetReservationFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetReservationFetchInstructionsEnum = typeof GetReservationFetchInstructionsEnum[keyof typeof GetReservationFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationAllowedActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
};
export type GetReservationAllowedActionsEnum = typeof GetReservationAllowedActionsEnum[keyof typeof GetReservationAllowedActionsEnum];
/**
 * @export
 */
export declare const GetReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsSearchTypeEnum = typeof GetReservationsSearchTypeEnum[keyof typeof GetReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
};
export type GetReservationsOrderByEnum = typeof GetReservationsOrderByEnum[keyof typeof GetReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetReservationsSortOrderEnum = typeof GetReservationsSortOrderEnum[keyof typeof GetReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetReservationsHousekeepingRoomStatusesEnum = typeof GetReservationsHousekeepingRoomStatusesEnum[keyof typeof GetReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetReservationsFetchInstructionsEnum = typeof GetReservationsFetchInstructionsEnum[keyof typeof GetReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsSearchTypesEnum = typeof GetReservationsSearchTypesEnum[keyof typeof GetReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetReservationsReservationStatusesEnum = typeof GetReservationsReservationStatusesEnum[keyof typeof GetReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetReservationsRoomReadyStatusesEnum = typeof GetReservationsRoomReadyStatusesEnum[keyof typeof GetReservationsRoomReadyStatusesEnum];
