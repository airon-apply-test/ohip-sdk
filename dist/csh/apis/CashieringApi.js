"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStoredFolioDetailsFolioStatusEnum = exports.GetRoundingDifferenceEmailFormatEnum = exports.GetRoundingDifferenceProcessingEnum = exports.GetRoundingDifferenceCardTypeEnum = exports.GetRoundingDifferenceCardOrTokenEnum = exports.GetRoundingDifferenceEventEnum = exports.GetPostingsForRefreshColorEnum = exports.GetPostingSummaryPostingSummaryTypeEnum = exports.GetPostBillingChargesOptionEnum = exports.GetGuestsTransactionsPostedTransactionTypeEnum = exports.GetGuestsTransactionsCashieringTransactionTypeEnum = exports.GetFolioTypeNameFolioReportGroupEnum = exports.GetFolioTaxPaymentsInfoActionEnum = exports.GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = exports.GetFolioTaxPaymentsInfoPaymentTypeEnum = exports.GetFolioTaxPaymentsInfoEmailFormatEnum = exports.GetFolioTaxPaymentsInfoProcessingEnum = exports.GetFolioTaxPaymentsInfoCardTypeEnum = exports.GetFolioTaxPaymentsInfoCardOrTokenEnum = exports.GetFolioPrintersFiscalFolioInstructionEnum = exports.GetFolioPrintersEventTypeEnum = exports.GetFolioGroupTypeEnum = exports.GetFolioFetchInstructionsEnum = exports.GetFiscalPrintingDetailsFetchInstructionEnum = exports.GetFinancialPostingsProcessingEnum = exports.GetFinancialPostingsCardTypeEnum = exports.GetFinancialPostingsCardOrTokenEnum = exports.GetDepositFolioFetchInstructionsEnum = exports.GetCompRoutingInstructionsCompRoutingStatusesEnum = exports.GetCompRoutingInstructionsResStatusCodeEnum = exports.GetCashierReportPostingsRequestTypeEnum = exports.GetCCSurchargeInfoEmailFormatEnum = exports.GetCCSurchargeInfoProcessingEnum = exports.GetCCSurchargeInfoCardTypeEnum = exports.GetCCSurchargeInfoCardOrTokenEnum = exports.GetCCAuthorizationInstructionsByProfileEmailFormatEnum = exports.GetCCAuthorizationInstructionsByProfileProcessingEnum = exports.GetCCAuthorizationInstructionsByProfileCardTypeEnum = exports.GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = exports.GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = exports.GetCCAuthorizationInstructionsEmailFormatEnum = exports.GetCCAuthorizationInstructionsProcessingEnum = exports.GetCCAuthorizationInstructionsCardTypeEnum = exports.GetCCAuthorizationInstructionsCardOrTokenEnum = exports.GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = exports.GetBalanceInfoFolioStatusEnum = exports.GetBalanceInfoEventEnum = exports.GetAuthorizationHistoryTransactionTypeEnum = exports.GetAlertsAlertAreaEnum = exports.CashieringApi = void 0;
exports.ValidateTransactionCodesFolioStatusEnum = exports.ValidateTransactionCodesEventEnum = exports.GetValidateFiscalPrintingDetailsFetchInstructionEnum = exports.GetTransactionCodesTrxServiceTypeEnum = exports.GetTransactionCodesFolioStatusEnum = exports.GetTransactionCodesEventEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class CashieringApi extends runtime.BaseAPI {
    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    async activatePrepaidCardRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/activate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ActivatePrepaidCardRequestToJSON)(requestParameters.activatePrepaidCard),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivatePrepaidCardStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to activate Prepaid Card. <p><strong>OperationId:</strong>activatePrepaidCard</p>
     * Operation to activate prepaid card.
     */
    async activatePrepaidCard(requestParameters, initOverrides) {
        const response = await this.activatePrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    async adjustTransactionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/adjust`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AdjustTransactionsRequestToJSON)(requestParameters.transactionsAdjustment),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AdjustedTransactionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Adjust Transactions. <p><strong>OperationId:</strong>adjustTransactions</p>
     * Adjust Transactions
     */
    async adjustTransactions(requestParameters, initOverrides) {
        const response = await this.adjustTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    async applyFinalPostingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/finalCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplyFinalPostingsRequestToJSON)(requestParameters.finalPostings),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to apply final postings on a reservation. <p><strong>OperationId:</strong>applyFinalPostings</p>
     * Apply final Postings
     */
    async applyFinalPostings(requestParameters, initOverrides) {
        const response = await this.applyFinalPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    async applyFlexibleBenefitPostingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/flexibleBenefitPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplyFlexibleBenefitPostingsRequestToJSON)(requestParameters.flexibleBenefitPostingsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to apply flexible benefit postings. <p><strong>OperationId:</strong>applyFlexibleBenefitPostings</p>
     * Apply flexible benefit postings
     */
    async applyFlexibleBenefitPostings(requestParameters, initOverrides) {
        const response = await this.applyFlexibleBenefitPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    async attachDepositPolicyToPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/policies/{policyId}/transactions/{transactionId}/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AttachDepositPolicyToPaymentRequestToJSON)(requestParameters.attachPolicyApplyCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to attach Deposit Policy to Payment. <p><strong>OperationId:</strong>attachDepositPolicyToPayment</p>
     * Attach Deposit Policy to Payment
     */
    async attachDepositPolicyToPayment(requestParameters, initOverrides) {
        const response = await this.attachDepositPolicyToPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    async authorizeCreditCardAmountRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AuthorizeCreditCardAmountByProfileRequestToJSON)(requestParameters.ccAuthorizationCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AuthorizationInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to authorize Credit Card Amount by Reservation. <p><strong>OperationId:</strong>authorizeCreditCardAmount</p>
     * Authorize Credit Card Amount
     */
    async authorizeCreditCardAmount(requestParameters, initOverrides) {
        const response = await this.authorizeCreditCardAmountRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    async authorizeCreditCardAmountByProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorize`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AuthorizeCreditCardAmountByProfileRequestToJSON)(requestParameters.ccAuthorizationCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AuthorizationInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to authorize Credit Card Amount by Profile. <p><strong>OperationId:</strong>authorizeCreditCardAmountByProfile</p>
     * Authorize Credit Card Amount by Profile
     */
    async authorizeCreditCardAmountByProfile(requestParameters, initOverrides) {
        const response = await this.authorizeCreditCardAmountByProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    async autoSettleCompFoliosRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/comp/folios/autoSettlements`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.AutoSettleCompFoliosRequestToJSON)(requestParameters.autoSettleCompFolios),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AutoSettleCompFoliosStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to auto Settle CompFolios <p><strong>OperationId:</strong>autoSettleCompFolios</p>
     * Operation to auto settle comp folios.
     */
    async autoSettleCompFolios(requestParameters, initOverrides) {
        const response = await this.autoSettleCompFoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    async breakCashierLockRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Break Cashier Lock. <p><strong>OperationId:</strong>breakCashierLock</p>
     * Break Cashier Lock
     */
    async breakCashierLock(requestParameters, initOverrides) {
        const response = await this.breakCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    async calculateForeignCurrencyRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/foreignCurrency`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CalculateForeignCurrencyRequestToJSON)(requestParameters.foreignCurrencyCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CalculatedForeignCurrencyFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to Calculate Foreign Currency exchange. <p><strong>OperationId:</strong>calculateForeignCurrency</p>
     * Calculate Foreign Currency
     */
    async calculateForeignCurrency(requestParameters, initOverrides) {
        const response = await this.calculateForeignCurrencyRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    async cancelPrepaidCardTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/cancel`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CancelPrepaidCardTransactionRequestToJSON)(requestParameters.cancelPrepaidCardTransaction),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CancelPrepaidCardTransactionStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to cancel PrepaidCard Transaction. <p><strong>OperationId:</strong>cancelPrepaidCardTransaction</p>
     * Operation to cancel prepaid card transaction.
     */
    async cancelPrepaidCardTransaction(requestParameters, initOverrides) {
        const response = await this.cancelPrepaidCardTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    async cashOutPrepaidCardRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/cashOut`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CashOutPrepaidCardRequestToJSON)(requestParameters.cashOutPrepaidCard),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashOutPrepaidCardStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to cashOut Prepaid Card. <p><strong>OperationId:</strong>cashOutPrepaidCard</p>
     * Operation to cash out prepaid card.
     */
    async cashOutPrepaidCard(requestParameters, initOverrides) {
        const response = await this.cashOutPrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Billing Payment. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    async changeBillingPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/payments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeBillingPaymentRequestToJSON)(requestParameters.billingPaymentToChange),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Billing Payment. <p><strong>OperationId:</strong>changeBillingPayment</p>
     * Change Billing Payment
     */
    async changeBillingPayment(requestParameters, initOverrides) {
        const response = await this.changeBillingPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    async changeRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/change`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeRoutingInstructionsRequestToJSON)(requestParameters.routingInstructionsToChange),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedRoutingInstructionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to update routing instructions for a specified reservation. <p><strong>OperationId:</strong>changeRoutingInstructions</p>
     * Change routing instructions
     */
    async changeRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.changeRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    async checkPostRateCodeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}/action/validate`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRateCodeRequestToJSON)(requestParameters.postRateCodeCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CheckedRateCodeFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change posted rate codes. <p><strong>OperationId:</strong>checkPostRateCode</p>
     * Change posted rate codes
     */
    async checkPostRateCode(requestParameters, initOverrides) {
        const response = await this.checkPostRateCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to clear cache in cashiering services. <p><strong>OperationId:</strong>clearCashieringServiceCache</p>
     * clearing of cache in cashiering services
     */
    async clearCashieringServiceCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/cashiering/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to clear cache in cashiering services. <p><strong>OperationId:</strong>clearCashieringServiceCache</p>
     * clearing of cache in cashiering services
     */
    async clearCashieringServiceCache(requestParameters, initOverrides) {
        const response = await this.clearCashieringServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    async closeReservationFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CloseReservationFolioRequestToJSON)(requestParameters.closeFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to close the Reservation Folio on a reservation. <p><strong>OperationId:</strong>closeReservationFolio</p>
     * Close Reservation Folio
     */
    async closeReservationFolio(requestParameters, initOverrides) {
        const response = await this.closeReservationFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Convert folio. <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     */
    async convertFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folio/{folioId}/convert`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConvertFolioRequestToJSON)(requestParameters.convertFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConvertFolioDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Convert folio. <p><strong>OperationId:</strong>convertFolio</p>
     * Convert Folio
     */
    async convertFolio(requestParameters, initOverrides) {
        const response = await this.convertFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    async deleteCompRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }
        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.payeeId !== undefined) {
            queryParameters['payeeId'] = requestParameters.payeeId;
        }
        if (requestParameters.membershipIdNo !== undefined) {
            queryParameters['membershipIdNo'] = requestParameters.membershipIdNo;
        }
        if (requestParameters.authorizerId !== undefined) {
            queryParameters['authorizerId'] = requestParameters.authorizerId;
        }
        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }
        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }
        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }
        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }
        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }
        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }
        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }
        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/comp`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomRoutingPostingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete comp routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteCompRoutingInstructions</p>
     * Delete comp routing instructions
     */
    async deleteCompRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.deleteCompRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    async deleteFolioRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }
        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.payeeId !== undefined) {
            queryParameters['payeeId'] = requestParameters.payeeId;
        }
        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }
        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }
        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }
        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }
        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/folio`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomRoutingPostingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete folio routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteFolioRoutingInstructions</p>
     * Delete Folio routing instructions
     */
    async deleteFolioRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.deleteFolioRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    async deleteRequestRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }
        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }
        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }
        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }
        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/request`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomRoutingPostingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete request routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRequestRoutingInstructions</p>
     * Delete request routing instructions
     */
    async deleteRequestRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.deleteRequestRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    async deleteRoomRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.refreshFolio !== undefined) {
            queryParameters['refreshFolio'] = requestParameters.refreshFolio;
        }
        if (requestParameters.retrievePostingsForRoomRouting !== undefined) {
            queryParameters['retrievePostingsForRoomRouting'] = requestParameters.retrievePostingsForRoomRouting;
        }
        if (requestParameters.reservationNameId !== undefined) {
            queryParameters['reservationNameId'] = requestParameters.reservationNameId;
        }
        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.creditLimit) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }
        if (requestParameters.percentageLimit) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }
        if (requestParameters.covers) {
            queryParameters['covers'] = requestParameters.covers;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }
        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }
        if (requestParameters.routingLinkId !== undefined) {
            queryParameters['routingLinkId'] = requestParameters.routingLinkId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/room`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomRoutingPostingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete room routing instructions for a specified reservation. <p><strong>OperationId:</strong>deleteRoomRoutingInstructions</p>
     * Delete Room routing instructions
     */
    async deleteRoomRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.deleteRoomRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     */
    async deleteRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete routing instructions for a specified reservation.<br><p><strong><mark>This API is deprecated. Please use deleteFolioRoutingInstructions or  deleteRoomRoutingInstructions or deleteCompRoutingInstructions or deleteRequestRoutingInstructions instead</mark></strong></p> <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     */
    async deleteRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    async detachDepositPolicyFromPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/policies/detach/deposit`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.DetachDepositPolicyFromPaymentRequestToJSON)(requestParameters.detachPolicyApplyCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to detach Deposit Policy from Payment. <p><strong>OperationId:</strong>detachDepositPolicyFromPayment</p>
     * Detach Deposit Policy from Payment
     */
    async detachDepositPolicyFromPayment(requestParameters, initOverrides) {
        const response = await this.detachDepositPolicyFromPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    async generateFiscalFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.GenerateFiscalFolioRequestToJSON)(requestParameters.fiscalInfoFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FiscalInformationFolioFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Fiscal Information Folio. <p><strong>OperationId:</strong>generateFiscalFolio</p>
     * Create Fiscal Information Folio
     */
    async generateFiscalFolio(requestParameters, initOverrides) {
        const response = await this.generateFiscalFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    async generateFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.GenerateFolioRequestToJSON)(requestParameters.folioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GeneratedFolioFromJSON)(jsonValue));
    }
    /**
     * You can use this API to generate folios for a reservation. <p><strong>OperationId:</strong>generateFolio</p>
     * Generate Folios
     */
    async generateFolio(requestParameters, initOverrides) {
        const response = await this.generateFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    async getAdditionalTaxesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/additionalTaxes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AdditionalTaxesDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Additional Taxes. <p><strong>OperationId:</strong>getAdditionalTaxes</p>
     * Get additional Taxes
     */
    async getAdditionalTaxes(requestParameters, initOverrides) {
        const response = await this.getAdditionalTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    async getAdvancePaymentBalanceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate.toISOString().substr(0, 10);
        }
        if (requestParameters.numberOfNights !== undefined) {
            queryParameters['numberOfNights'] = requestParameters.numberOfNights;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advancePaymentBalance`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AdvancePaymentBalanceFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get advance payment balance. <p><strong>OperationId:</strong>getAdvancePaymentBalance</p>
     * Get advance payment balance
     */
    async getAdvancePaymentBalance(requestParameters, initOverrides) {
        const response = await this.getAdvancePaymentBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     */
    async getAlertsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.alertArea !== undefined) {
            queryParameters['alertArea'] = requestParameters.alertArea;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/alerts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AlertNoticesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Alert Notices.<br><p><strong><mark>This API is deprecated.</mark></strong></p> <p><strong>OperationId:</strong>getAlerts</p>
     * Get Alert Notices
     */
    async getAlerts(requestParameters, initOverrides) {
        const response = await this.getAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    async getAuthorizationHistoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.includeAuthorizations !== undefined) {
            queryParameters['includeAuthorizations'] = requestParameters.includeAuthorizations;
        }
        if (requestParameters.includePayments !== undefined) {
            queryParameters['includePayments'] = requestParameters.includePayments;
        }
        if (requestParameters.includeRefunds !== undefined) {
            queryParameters['includeRefunds'] = requestParameters.includeRefunds;
        }
        if (requestParameters.includeFailures !== undefined) {
            queryParameters['includeFailures'] = requestParameters.includeFailures;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.transactionType !== undefined) {
            queryParameters['transactionType'] = requestParameters.transactionType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/authorizationHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AuthorizationHistoryFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get authorization history. <p><strong>OperationId:</strong>getAuthorizationHistory</p>
     * Get authorization history
     */
    async getAuthorizationHistory(requestParameters, initOverrides) {
        const response = await this.getAuthorizationHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    async getAuthorizersCreditInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.includeCreditDetails !== undefined) {
            queryParameters['includeCreditDetails'] = requestParameters.includeCreditDetails;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/authorizers/credits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AuthorizersCreditInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Authorizers Credit Info. <p><strong>OperationId:</strong>getAuthorizersCreditInfo</p>
     * Get Authorizers Credit Info
     */
    async getAuthorizersCreditInfo(requestParameters, initOverrides) {
        const response = await this.getAuthorizersCreditInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Balance Information. <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     */
    async getBalanceInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.cashierId) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }
        if (requestParameters.amount) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.postingQuantity) {
            queryParameters['postingQuantity'] = requestParameters.postingQuantity;
        }
        if (requestParameters.postingReference) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }
        if (requestParameters.postingRemark) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }
        if (requestParameters.checkNumber) {
            queryParameters['checkNumber'] = requestParameters.checkNumber;
        }
        if (requestParameters.arrangementCode) {
            queryParameters['arrangementCode'] = requestParameters.arrangementCode;
        }
        if (requestParameters.applyRoutingInstructions) {
            queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
        }
        if (requestParameters.usePackageAllowance) {
            queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
        }
        if (requestParameters.autoPosting) {
            queryParameters['autoPosting'] = requestParameters.autoPosting;
        }
        if (requestParameters.uniqueIdId) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.postItNumberId !== undefined) {
            queryParameters['postItNumberId'] = requestParameters.postItNumberId;
        }
        if (requestParameters.postItNumberIdContext !== undefined) {
            queryParameters['postItNumberIdContext'] = requestParameters.postItNumberIdContext;
        }
        if (requestParameters.postItNumberType !== undefined) {
            queryParameters['postItNumberType'] = requestParameters.postItNumberType;
        }
        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }
        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }
        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }
        if (requestParameters.reservationIdId !== undefined) {
            queryParameters['reservationIdId'] = requestParameters.reservationIdId;
        }
        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.policyIdId !== undefined) {
            queryParameters['policyIdId'] = requestParameters.policyIdId;
        }
        if (requestParameters.policyIdIdContext !== undefined) {
            queryParameters['policyIdIdContext'] = requestParameters.policyIdIdContext;
        }
        if (requestParameters.policyIdType !== undefined) {
            queryParameters['policyIdType'] = requestParameters.policyIdType;
        }
        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }
        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }
        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }
        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }
        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactionsTotal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BalanceInfoCriteriaFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Balance Information. <p><strong>OperationId:</strong>getBalanceInfo</p>
     * Get Balance Information
     */
    async getBalanceInfo(requestParameters, initOverrides) {
        const response = await this.getBalanceInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    async getBatchCCSettlementsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.offlineSettlement !== undefined) {
            queryParameters['offlineSettlement'] = requestParameters.offlineSettlement;
        }
        if (requestParameters.transactionDate !== undefined) {
            queryParameters['transactionDate'] = requestParameters.transactionDate.toISOString().substr(0, 10);
        }
        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }
        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/cCSettlements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CcBatchSettlementsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get batch CC Settlements. <p><strong>OperationId:</strong>getBatchCCSettlements</p>
     * Get batch CC Settlements
     */
    async getBatchCCSettlements(requestParameters, initOverrides) {
        const response = await this.getBatchCCSettlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    async getBatchCCSettlementsStatusRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bulkCCSettlements/{batchId}/status`.replace(`{${"batchId"}}`, encodeURIComponent(String(requestParameters.batchId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CcBatchSettlementsStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Batch CC Settlements Status. <p><strong>OperationId:</strong>getBatchCCSettlementsStatus</p>
     * Get Batch CC Settlements Status
     */
    async getBatchCCSettlementsStatus(requestParameters, initOverrides) {
        const response = await this.getBatchCCSettlementsStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    async getBedTaxInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.arrival !== undefined) {
            queryParameters['arrival'] = requestParameters.arrival.toISOString().substr(0, 10);
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BedTaxInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Retrieve bed tax information for a property. <p><strong>OperationId:</strong>getBedTaxInfo</p>
     * Get bed tax information
     */
    async getBedTaxInfo(requestParameters, initOverrides) {
        const response = await this.getBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    async getBillingInstructionCodesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }
        if (requestParameters.includeBillingInstructions !== undefined) {
            queryParameters['includeBillingInstructions'] = requestParameters.includeBillingInstructions;
        }
        if (requestParameters.includeCompInstructions !== undefined) {
            queryParameters['includeCompInstructions'] = requestParameters.includeCompInstructions;
        }
        if (requestParameters.codeWildCard !== undefined) {
            queryParameters['codeWildCard'] = requestParameters.codeWildCard;
        }
        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/routingInstructionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BillingInstructionCodesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Billing Instruction Codes. <p><strong>OperationId:</strong>getBillingInstructionCodes</p>
     * Get Billing (routing) Instruction Codes
     */
    async getBillingInstructionCodes(requestParameters, initOverrides) {
        const response = await this.getBillingInstructionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    async getCCAuthorizationInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.evaluateApprovalAmount !== undefined) {
            queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
        }
        if (requestParameters.sourceOfAuthorization !== undefined) {
            queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
        }
        if (requestParameters.updateReservation !== undefined) {
            queryParameters['updateReservation'] = requestParameters.updateReservation;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }
        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.paymentFolioView !== undefined) {
            queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.cardPresent !== undefined) {
            queryParameters['cardPresent'] = requestParameters.cardPresent;
        }
        if (requestParameters.citId !== undefined) {
            queryParameters['citId'] = requestParameters.citId;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }
        if (requestParameters.cardIdIdContext !== undefined) {
            queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
        }
        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }
        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }
        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }
        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }
        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime.toISOString();
        }
        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }
        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }
        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }
        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }
        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime.toISOString();
        }
        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }
        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }
        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }
        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }
        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }
        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }
        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }
        if (requestParameters.incidentalAmountAmount !== undefined) {
            queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
        }
        if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
            queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CcAuthorizationInstructionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Reservation. <p><strong>OperationId:</strong>getCCAuthorizationInstructions</p>
     * Get CC Authorization Instructions
     */
    async getCCAuthorizationInstructions(requestParameters, initOverrides) {
        const response = await this.getCCAuthorizationInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    async getCCAuthorizationInstructionsByProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.evaluateApprovalAmount !== undefined) {
            queryParameters['evaluateApprovalAmount'] = requestParameters.evaluateApprovalAmount;
        }
        if (requestParameters.sourceOfAuthorization !== undefined) {
            queryParameters['sourceOfAuthorization'] = requestParameters.sourceOfAuthorization;
        }
        if (requestParameters.updateReservation !== undefined) {
            queryParameters['updateReservation'] = requestParameters.updateReservation;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }
        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.paymentFolioView !== undefined) {
            queryParameters['paymentFolioView'] = requestParameters.paymentFolioView;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.cardPresent !== undefined) {
            queryParameters['cardPresent'] = requestParameters.cardPresent;
        }
        if (requestParameters.citId !== undefined) {
            queryParameters['citId'] = requestParameters.citId;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }
        if (requestParameters.cardIdIdContext !== undefined) {
            queryParameters['cardIdIdContext'] = requestParameters.cardIdIdContext;
        }
        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }
        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }
        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }
        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }
        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime.toISOString();
        }
        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }
        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }
        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }
        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }
        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime.toISOString();
        }
        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }
        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }
        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }
        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }
        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }
        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }
        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }
        if (requestParameters.incidentalAmountAmount !== undefined) {
            queryParameters['incidentalAmountAmount'] = requestParameters.incidentalAmountAmount;
        }
        if (requestParameters.incidentalAmountCurrencyCode !== undefined) {
            queryParameters['incidentalAmountCurrencyCode'] = requestParameters.incidentalAmountCurrencyCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/paymentMethods/creditCard/authorizeInstructions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CcAuthorizationInstructionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Credit Card Authorization Instructions by Profile. <p><strong>OperationId:</strong>getCCAuthorizationInstructionsByProfile</p>
     * Get CC Authorization Instructions by Profile
     */
    async getCCAuthorizationInstructionsByProfile(requestParameters, initOverrides) {
        const response = await this.getCCAuthorizationInstructionsByProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    async getCCSurchargeInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }
        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }
        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime.toISOString();
        }
        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }
        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }
        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }
        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }
        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime.toISOString();
        }
        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }
        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }
        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }
        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }
        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }
        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }
        if (requestParameters.postingAmountAmount !== undefined) {
            queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
        }
        if (requestParameters.postingAmountCurrencyCode !== undefined) {
            queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardsurcharge`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CcSurchargeDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get CC Surcharge Information. <p><strong>OperationId:</strong>getCCSurchargeInfo</p>
     * Get CC Surcharge Information
     */
    async getCCSurchargeInfo(requestParameters, initOverrides) {
        const response = await this.getCCSurchargeInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    async getCashierClosureRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.cashierLockHandle !== undefined) {
            queryParameters['cashierLockHandle'] = requestParameters.cashierLockHandle;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashierClosureDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Cashier Closure. <p><strong>OperationId:</strong>getCashierClosure</p>
     * Get Cashier Closure
     */
    async getCashierClosure(requestParameters, initOverrides) {
        const response = await this.getCashierClosureRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    async getCashierClosureInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }
        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }
        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }
        if (requestParameters.closureBusinessDate !== undefined) {
            queryParameters['closureBusinessDate'] = requestParameters.closureBusinessDate.toISOString().substr(0, 10);
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/closureList`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashierClosureInformationFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Cashier Closure Information. <p><strong>OperationId:</strong>getCashierClosureInfo</p>
     * Get Cashier Closure Information
     */
    async getCashierClosureInfo(requestParameters, initOverrides) {
        const response = await this.getCashierClosureInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    async getCashierClosureReportsListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }
        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }
        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }
        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/closureReports`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashierClosureReportsListFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Cashier Closure Reports List. <p><strong>OperationId:</strong>getCashierClosureReportsList</p>
     * Get Cashier Closure Reports List
     */
    async getCashierClosureReportsList(requestParameters, initOverrides) {
        const response = await this.getCashierClosureReportsListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    async getCashierLockRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashiers/{cashierId}/locks`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AcquiredCashierLockFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Acquire Cashier Locks. <p><strong>OperationId:</strong>getCashierLock</p>
     * Acquire Cashier Locks
     */
    async getCashierLock(requestParameters, initOverrides) {
        const response = await this.getCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p>
     * Get Cashier Report Postings
     */
    async getCashierReportPostingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.requestType !== undefined) {
            queryParameters['requestType'] = requestParameters.requestType;
        }
        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }
        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }
        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashierReportPostings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashierReportPostingsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Cashier Report postings. <p><strong>OperationId:</strong>getCashierReportPostings</p>
     * Get Cashier Report Postings
     */
    async getCashierReportPostings(requestParameters, initOverrides) {
        const response = await this.getCashierReportPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    async getCashierTransactionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }
        if (requestParameters.shiftDropLocationCode !== undefined) {
            queryParameters['shiftDropLocationCode'] = requestParameters.shiftDropLocationCode;
        }
        if (requestParameters.bagNumberForOthers !== undefined) {
            queryParameters['bagNumberForOthers'] = requestParameters.bagNumberForOthers;
        }
        if (requestParameters.bagNumberForCash !== undefined) {
            queryParameters['bagNumberForCash'] = requestParameters.bagNumberForCash;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashiers/{cashierId}/transactions`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CashierTransactionsDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Cashier Transactions. <p><strong>OperationId:</strong>getCashierTransactions</p>
     * Get Cashier Transactions
     */
    async getCashierTransactions(requestParameters, initOverrides) {
        const response = await this.getCashierTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    async getCheckDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CheckDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get check details. <p><strong>OperationId:</strong>getCheckDetails</p>
     * Get check details
     */
    async getCheckDetails(requestParameters, initOverrides) {
        const response = await this.getCheckDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompAccountingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompAccountingJournalRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.filterTransactionCode) {
            queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
        }
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.filterRoomNumber) {
            queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
        }
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.authorizerNameCode) {
            queryParameters['authorizerNameCode'] = requestParameters.authorizerNameCode;
        }
        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }
        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/compAccountingJournal`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompAccountingJournalFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Comp Accounting Journal. <p><strong>OperationId:</strong>getCompAccountingJournal</p>
     * Get Comp Accounting Journal
     */
    async getCompAccountingJournal(requestParameters, initOverrides) {
        const response = await this.getCompAccountingJournalRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p>
     * Get Comp Routing Instructions
     */
    async getCompRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end.toISOString().substr(0, 10);
        }
        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start.toISOString().substr(0, 10);
        }
        if (requestParameters.nameWildcard !== undefined) {
            queryParameters['nameWildcard'] = requestParameters.nameWildcard;
        }
        if (requestParameters.firstNameWildCard !== undefined) {
            queryParameters['firstNameWildCard'] = requestParameters.firstNameWildCard;
        }
        if (requestParameters.roomNumberCodes) {
            queryParameters['roomNumberCodes'] = requestParameters.roomNumberCodes;
        }
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.resStatusCode) {
            queryParameters['resStatusCode'] = requestParameters.resStatusCode;
        }
        if (requestParameters.compRoutingStatuses) {
            queryParameters['compRoutingStatuses'] = requestParameters.compRoutingStatuses;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/compRoutingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompRoutingInstructionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Comp Routing Instructions. <p><strong>OperationId:</strong>getCompRoutingInstructions</p>
     * Get Comp Routing Instructions
     */
    async getCompRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.getCompRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    async getCompTrxAuthorizersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.targetFolioWindowNo !== undefined) {
            queryParameters['targetFolioWindowNo'] = requestParameters.targetFolioWindowNo;
        }
        if (requestParameters.uniqueIdId) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.transaction) {
            queryParameters['transaction'] = requestParameters.transaction;
        }
        if (requestParameters.authorizerIdId !== undefined) {
            queryParameters['authorizerIdId'] = requestParameters.authorizerIdId;
        }
        if (requestParameters.authorizerIdIdContext !== undefined) {
            queryParameters['authorizerIdIdContext'] = requestParameters.authorizerIdIdContext;
        }
        if (requestParameters.authorizerIdType !== undefined) {
            queryParameters['authorizerIdType'] = requestParameters.authorizerIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/compTrxAuthorizers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompTrxAuthorizersFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Comp Trx Authorizers. <p><strong>OperationId:</strong>getCompTrxAuthorizers</p>
     * Get Comp Trx Authorizers
     */
    async getCompTrxAuthorizers(requestParameters, initOverrides) {
        const response = await this.getCompTrxAuthorizersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    async getCreditLimitOveragePaymentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.guestNameWildCard !== undefined) {
            queryParameters['guestNameWildCard'] = requestParameters.guestNameWildCard;
        }
        if (requestParameters.roomNumberWildCard !== undefined) {
            queryParameters['roomNumberWildCard'] = requestParameters.roomNumberWildCard;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreditLimitOveragePaymentsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Credit Limits Overage Payments. <p><strong>OperationId:</strong>getCreditLimitOveragePayments</p>
     * Get Credit Limits Overage Payments
     */
    async getCreditLimitOveragePayments(requestParameters, initOverrides) {
        const response = await this.getCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    async getDepositFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.policyIdId !== undefined) {
            queryParameters['policyIdId'] = requestParameters.policyIdId;
        }
        if (requestParameters.blockIdId !== undefined) {
            queryParameters['blockIdId'] = requestParameters.blockIdId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/depositFolio`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationDepositFoliosFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Deposit Folio. <p><strong>OperationId:</strong>getDepositFolio</p>
     * Get Deposit Folio
     */
    async getDepositFolio(requestParameters, initOverrides) {
        const response = await this.getDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    async getDepositFolioTransactionDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }
        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }
        if (requestParameters.includeExchangeInformation !== undefined) {
            queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/depositTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositFolioTransactionDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Deposit Folio Transaction Details. <p><strong>OperationId:</strong>getDepositFolioTransactionDetails</p>
     * Get Deposit Folio Transaction Details
     */
    async getDepositFolioTransactionDetails(requestParameters, initOverrides) {
        const response = await this.getDepositFolioTransactionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    async getDepositMaturityInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositMaturity`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositMaturityDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Deposit Maturity Information. <p><strong>OperationId:</strong>getDepositMaturityInfo</p>
     * Get Deposit Maturity Information
     */
    async getDepositMaturityInfo(requestParameters, initOverrides) {
        const response = await this.getDepositMaturityInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p>
     * Get Financial Postings
     */
    async getFinancialPostingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.filterTransactionCode) {
            queryParameters['filterTransactionCode'] = requestParameters.filterTransactionCode;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.filterRoomNumber) {
            queryParameters['filterRoomNumber'] = requestParameters.filterRoomNumber;
        }
        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }
        if (requestParameters.checkNumberWildCard !== undefined) {
            queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
        }
        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.approvalStatusCode) {
            queryParameters['approvalStatusCode'] = requestParameters.approvalStatusCode;
        }
        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.closureNo !== undefined) {
            queryParameters['closureNo'] = requestParameters.closureNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/financialPostings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FinancialPostingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Financial postings. <p><strong>OperationId:</strong>getFinancialPostings</p>
     * Get Financial Postings
     */
    async getFinancialPostings(requestParameters, initOverrides) {
        const response = await this.getFinancialPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    async getFiscalFolioActivityRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.folioSeqNo !== undefined) {
            queryParameters['folioSeqNo'] = requestParameters.folioSeqNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolioResponse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioActivityDetailsTypeFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get the fiscal folio activity details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivity</p>
     * Get the Fiscal Folio Activity for a folio
     */
    async getFiscalFolioActivity(requestParameters, initOverrides) {
        const response = await this.getFiscalFolioActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    async getFiscalFolioActivityDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.responseAttemptNo !== undefined) {
            queryParameters['responseAttemptNo'] = requestParameters.responseAttemptNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalFolioResponse/{folioSeqNo}`.replace(`{${"folioSeqNo"}}`, encodeURIComponent(String(requestParameters.folioSeqNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioActivityResponseDetailTypeFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get the fiscal folio activity response details for a folio. <p><strong>OperationId:</strong>getFiscalFolioActivityDetails</p>
     * Get the Fiscal Folio Activity Response details for a folio
     */
    async getFiscalFolioActivityDetails(requestParameters, initOverrides) {
        const response = await this.getFiscalFolioActivityDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getFiscalPrintingDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }
        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fiscalPrinting`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FiscalCallStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Fiscal Printing Details.<br><p><strong><mark>This API is deprecated. Please use getValidateFiscalPrintingDetails instead</mark></strong></p> <p><strong>OperationId:</strong>getFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getFiscalPrintingDetails(requestParameters, initOverrides) {
        const response = await this.getFiscalPrintingDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    async getFixedChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FixedChargesDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get fixed Charges for a reservation. <p><strong>OperationId:</strong>getFixedCharges</p>
     * Get Fixed Charges
     */
    async getFixedCharges(requestParameters, initOverrides) {
        const response = await this.getFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p>
     * Get folios
     */
    async getFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.guestPayOnly !== undefined) {
            queryParameters['guestPayOnly'] = requestParameters.guestPayOnly;
        }
        if (requestParameters.includeFolioHistory !== undefined) {
            queryParameters['includeFolioHistory'] = requestParameters.includeFolioHistory;
        }
        if (requestParameters.reservationBalanceOnly !== undefined) {
            queryParameters['reservationBalanceOnly'] = requestParameters.reservationBalanceOnly;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.end) {
            queryParameters['end'] = requestParameters.end;
        }
        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.start) {
            queryParameters['start'] = requestParameters.start;
        }
        if (requestParameters.summaryOnly !== undefined) {
            queryParameters['summaryOnly'] = requestParameters.summaryOnly;
        }
        if (requestParameters.groupType !== undefined) {
            queryParameters['groupType'] = requestParameters.groupType;
        }
        if (requestParameters.exchangeCurrency !== undefined) {
            queryParameters['exchangeCurrency'] = requestParameters.exchangeCurrency;
        }
        if (requestParameters.calculateCollectingAgentTaxes !== undefined) {
            queryParameters['calculateCollectingAgentTaxes'] = requestParameters.calculateCollectingAgentTaxes;
        }
        if (requestParameters.vATOffset !== undefined) {
            queryParameters['vATOffset'] = requestParameters.vATOffset;
        }
        if (requestParameters.includeDepositTaxes !== undefined) {
            queryParameters['includeDepositTaxes'] = requestParameters.includeDepositTaxes;
        }
        if (requestParameters.simpleFolio !== undefined) {
            queryParameters['simpleFolio'] = requestParameters.simpleFolio;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioFromJSON)(jsonValue));
    }
    /**
     * This API is used to fetch the folios for a given reservation. A guest reservation could have 1 or more folios per reservation. Folios will only exist for a reservation once the guest has checked into the hotel. <p><strong>OperationId:</strong>getFolio</p>
     * Get folios
     */
    async getFolio(requestParameters, initOverrides) {
        const response = await this.getFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    async getFolioHistoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.aR !== undefined) {
            queryParameters['aR'] = requestParameters.aR;
        }
        if (requestParameters.checkOut !== undefined) {
            queryParameters['checkOut'] = requestParameters.checkOut;
        }
        if (requestParameters.creditBill !== undefined) {
            queryParameters['creditBill'] = requestParameters.creditBill;
        }
        if (requestParameters.includeAssociatedFolios !== undefined) {
            queryParameters['includeAssociatedFolios'] = requestParameters.includeAssociatedFolios;
        }
        if (requestParameters.noShow !== undefined) {
            queryParameters['noShow'] = requestParameters.noShow;
        }
        if (requestParameters.offlineFolio !== undefined) {
            queryParameters['offlineFolio'] = requestParameters.offlineFolio;
        }
        if (requestParameters.passerBy !== undefined) {
            queryParameters['passerBy'] = requestParameters.passerBy;
        }
        if (requestParameters.postIt !== undefined) {
            queryParameters['postIt'] = requestParameters.postIt;
        }
        if (requestParameters.videoCheckOut !== undefined) {
            queryParameters['videoCheckOut'] = requestParameters.videoCheckOut;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.reservationIdId !== undefined) {
            queryParameters['reservationIdId'] = requestParameters.reservationIdId;
        }
        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }
        if (requestParameters.creditCardNo !== undefined) {
            queryParameters['creditCardNo'] = requestParameters.creditCardNo;
        }
        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }
        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }
        if (requestParameters.addresseeName !== undefined) {
            queryParameters['addresseeName'] = requestParameters.addresseeName;
        }
        if (requestParameters.fiscalFolioNo !== undefined) {
            queryParameters['fiscalFolioNo'] = requestParameters.fiscalFolioNo;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.partnerFiscalFolioStatusCode) {
            queryParameters['partnerFiscalFolioStatusCode'] = requestParameters.partnerFiscalFolioStatusCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folioHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioHistoryResponseFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get folio history for a reservation. <p><strong>OperationId:</strong>getFolioHistory</p>
     * Get folio history
     */
    async getFolioHistory(requestParameters, initOverrides) {
        const response = await this.getFolioHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    async getFolioPrintersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.allFolioWindow !== undefined) {
            queryParameters['allFolioWindow'] = requestParameters.allFolioWindow;
        }
        if (requestParameters.correction !== undefined) {
            queryParameters['correction'] = requestParameters.correction;
        }
        if (requestParameters.debitFolio !== undefined) {
            queryParameters['debitFolio'] = requestParameters.debitFolio;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.manualFolioNo !== undefined) {
            queryParameters['manualFolioNo'] = requestParameters.manualFolioNo;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.fiscalTerminalId !== undefined) {
            queryParameters['fiscalTerminalId'] = requestParameters.fiscalTerminalId;
        }
        if (requestParameters.eventType !== undefined) {
            queryParameters['eventType'] = requestParameters.eventType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.exchangeRate !== undefined) {
            queryParameters['exchangeRate'] = requestParameters.exchangeRate;
        }
        if (requestParameters.associatedBillNumber !== undefined) {
            queryParameters['associatedBillNumber'] = requestParameters.associatedBillNumber;
        }
        if (requestParameters.associatedBillFolioType !== undefined) {
            queryParameters['associatedBillFolioType'] = requestParameters.associatedBillFolioType;
        }
        if (requestParameters.associatedBillQueueName !== undefined) {
            queryParameters['associatedBillQueueName'] = requestParameters.associatedBillQueueName;
        }
        if (requestParameters.associatedBillFiscalBillNumber !== undefined) {
            queryParameters['associatedBillFiscalBillNumber'] = requestParameters.associatedBillFiscalBillNumber;
        }
        if (requestParameters.associatedBillGenerationDate !== undefined) {
            queryParameters['associatedBillGenerationDate'] = requestParameters.associatedBillGenerationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }
        if (requestParameters.generateFiscalFolio !== undefined) {
            queryParameters['generateFiscalFolio'] = requestParameters.generateFiscalFolio;
        }
        if (requestParameters.queueName !== undefined) {
            queryParameters['queueName'] = requestParameters.queueName;
        }
        if (requestParameters.folioSeqId !== undefined) {
            queryParameters['folioSeqId'] = requestParameters.folioSeqId;
        }
        if (requestParameters.fiscalFolioInstruction !== undefined) {
            queryParameters['fiscalFolioInstruction'] = requestParameters.fiscalFolioInstruction;
        }
        if (requestParameters.transactionServiceType !== undefined) {
            queryParameters['transactionServiceType'] = requestParameters.transactionServiceType;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folioPrinters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioPrintersFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get folio printers. <p><strong>OperationId:</strong>getFolioPrinters</p>
     * Get folio printers
     */
    async getFolioPrinters(requestParameters, initOverrides) {
        const response = await this.getFolioPrintersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    async getFolioTaxPaymentsInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.track2Data !== undefined) {
            queryParameters['track2Data'] = requestParameters.track2Data;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }
        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }
        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.uniqueIdIdContext !== undefined) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }
        if (requestParameters.uniqueIdType !== undefined) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }
        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime.toISOString();
        }
        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }
        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }
        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }
        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }
        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime.toISOString();
        }
        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }
        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }
        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }
        if (requestParameters.approvalCode !== undefined) {
            queryParameters['approvalCode'] = requestParameters.approvalCode;
        }
        if (requestParameters.originalAuthSequence !== undefined) {
            queryParameters['originalAuthSequence'] = requestParameters.originalAuthSequence;
        }
        if (requestParameters.vendorTranId !== undefined) {
            queryParameters['vendorTranId'] = requestParameters.vendorTranId;
        }
        if (requestParameters.approvalAmountAmount !== undefined) {
            queryParameters['approvalAmountAmount'] = requestParameters.approvalAmountAmount;
        }
        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }
        if (requestParameters.postingAmountAmount !== undefined) {
            queryParameters['postingAmountAmount'] = requestParameters.postingAmountAmount;
        }
        if (requestParameters.postingAmountCurrencyCode !== undefined) {
            queryParameters['postingAmountCurrencyCode'] = requestParameters.postingAmountCurrencyCode;
        }
        if (requestParameters.postingReference !== undefined) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }
        if (requestParameters.postingRemark !== undefined) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }
        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }
        if (requestParameters.applyCCSurcharge !== undefined) {
            queryParameters['applyCCSurcharge'] = requestParameters.applyCCSurcharge;
        }
        if (requestParameters.manualPaymentTaxInfoFolioWindowNo !== undefined) {
            queryParameters['manualPaymentTaxInfoFolioWindowNo'] = requestParameters.manualPaymentTaxInfoFolioWindowNo;
        }
        if (requestParameters.transactionCode !== undefined) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.transactionDate !== undefined) {
            queryParameters['transactionDate'] = requestParameters.transactionDate.toISOString().substr(0, 10);
        }
        if (requestParameters.transactionDescription !== undefined) {
            queryParameters['transactionDescription'] = requestParameters.transactionDescription;
        }
        if (requestParameters.transactionNo !== undefined) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }
        if (requestParameters.taxInvoiceNo !== undefined) {
            queryParameters['taxInvoiceNo'] = requestParameters.taxInvoiceNo;
        }
        if (requestParameters.paymentType !== undefined) {
            queryParameters['paymentType'] = requestParameters.paymentType;
        }
        if (requestParameters.manualPaymentTaxAmount !== undefined) {
            queryParameters['manualPaymentTaxAmount'] = requestParameters.manualPaymentTaxAmount;
        }
        if (requestParameters.manualPaymentTaxCurrencyCode !== undefined) {
            queryParameters['manualPaymentTaxCurrencyCode'] = requestParameters.manualPaymentTaxCurrencyCode;
        }
        if (requestParameters.taxableAmountAmount !== undefined) {
            queryParameters['taxableAmountAmount'] = requestParameters.taxableAmountAmount;
        }
        if (requestParameters.taxableAmountCurrencyCode !== undefined) {
            queryParameters['taxableAmountCurrencyCode'] = requestParameters.taxableAmountCurrencyCode;
        }
        if (requestParameters.nonTaxableAmountAmount !== undefined) {
            queryParameters['nonTaxableAmountAmount'] = requestParameters.nonTaxableAmountAmount;
        }
        if (requestParameters.nonTaxableAmountCurrencyCode !== undefined) {
            queryParameters['nonTaxableAmountCurrencyCode'] = requestParameters.nonTaxableAmountCurrencyCode;
        }
        if (requestParameters.availableCreditAmount !== undefined) {
            queryParameters['availableCreditAmount'] = requestParameters.availableCreditAmount;
        }
        if (requestParameters.availableCreditCurrencyCode !== undefined) {
            queryParameters['availableCreditCurrencyCode'] = requestParameters.availableCreditCurrencyCode;
        }
        if (requestParameters.paymentDate !== undefined) {
            queryParameters['paymentDate'] = requestParameters.paymentDate.toISOString().substr(0, 10);
        }
        if (requestParameters.taxFolioWindowNo) {
            queryParameters['taxFolioWindowNo'] = requestParameters.taxFolioWindowNo;
        }
        if (requestParameters.taxTransactionCode) {
            queryParameters['taxTransactionCode'] = requestParameters.taxTransactionCode;
        }
        if (requestParameters.taxTransactionDate) {
            queryParameters['taxTransactionDate'] = requestParameters.taxTransactionDate;
        }
        if (requestParameters.taxTransactionDescription) {
            queryParameters['taxTransactionDescription'] = requestParameters.taxTransactionDescription;
        }
        if (requestParameters.taxTransactionNo) {
            queryParameters['taxTransactionNo'] = requestParameters.taxTransactionNo;
        }
        if (requestParameters.taxTaxInvoiceNo) {
            queryParameters['taxTaxInvoiceNo'] = requestParameters.taxTaxInvoiceNo;
        }
        if (requestParameters.taxPaymentType) {
            queryParameters['taxPaymentType'] = requestParameters.taxPaymentType;
        }
        if (requestParameters.creditablePaymentTaxesAmount !== undefined) {
            queryParameters['creditablePaymentTaxesAmount'] = requestParameters.creditablePaymentTaxesAmount;
        }
        if (requestParameters.creditablePaymentTaxesCurrencyCode !== undefined) {
            queryParameters['creditablePaymentTaxesCurrencyCode'] = requestParameters.creditablePaymentTaxesCurrencyCode;
        }
        if (requestParameters.creditablePaymentTaxableAmount !== undefined) {
            queryParameters['creditablePaymentTaxableAmount'] = requestParameters.creditablePaymentTaxableAmount;
        }
        if (requestParameters.creditablePaymentTaxableCurrencyCode !== undefined) {
            queryParameters['creditablePaymentTaxableCurrencyCode'] = requestParameters.creditablePaymentTaxableCurrencyCode;
        }
        if (requestParameters.creditablePaymentNonTaxableAmount !== undefined) {
            queryParameters['creditablePaymentNonTaxableAmount'] = requestParameters.creditablePaymentNonTaxableAmount;
        }
        if (requestParameters.creditablePaymentNonTaxableCurrencyCode !== undefined) {
            queryParameters['creditablePaymentNonTaxableCurrencyCode'] = requestParameters.creditablePaymentNonTaxableCurrencyCode;
        }
        if (requestParameters.availableTaxCreditAmount !== undefined) {
            queryParameters['availableTaxCreditAmount'] = requestParameters.availableTaxCreditAmount;
        }
        if (requestParameters.availableTaxCreditCurrencyCode !== undefined) {
            queryParameters['availableTaxCreditCurrencyCode'] = requestParameters.availableTaxCreditCurrencyCode;
        }
        if (requestParameters.taxPaymentDate) {
            queryParameters['taxPaymentDate'] = requestParameters.taxPaymentDate;
        }
        if (requestParameters.terminalId !== undefined) {
            queryParameters['terminalId'] = requestParameters.terminalId;
        }
        if (requestParameters.overrideInsufficientCC !== undefined) {
            queryParameters['overrideInsufficientCC'] = requestParameters.overrideInsufficientCC;
        }
        if (requestParameters.changeDueAmount !== undefined) {
            queryParameters['changeDueAmount'] = requestParameters.changeDueAmount;
        }
        if (requestParameters.changeDueAmountCurrencyCode !== undefined) {
            queryParameters['changeDueAmountCurrencyCode'] = requestParameters.changeDueAmountCurrencyCode;
        }
        if (requestParameters.overrideARCreditLimit !== undefined) {
            queryParameters['overrideARCreditLimit'] = requestParameters.overrideARCreditLimit;
        }
        if (requestParameters.applyCurrencyTaxes !== undefined) {
            queryParameters['applyCurrencyTaxes'] = requestParameters.applyCurrencyTaxes;
        }
        if (requestParameters.vATOffset !== undefined) {
            queryParameters['vATOffset'] = requestParameters.vATOffset;
        }
        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }
        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }
        if (requestParameters.profileIdIdContext !== undefined) {
            queryParameters['profileIdIdContext'] = requestParameters.profileIdIdContext;
        }
        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folioTaxPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioTaxPaymentsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get folio tax payments information. <p><strong>OperationId:</strong>getFolioTaxPaymentsInfo</p>
     * Get folio tax payments information
     */
    async getFolioTaxPaymentsInfo(requestParameters, initOverrides) {
        const response = await this.getFolioTaxPaymentsInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    async getFolioTransactionDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }
        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }
        if (requestParameters.includeExchangeInformation !== undefined) {
            queryParameters['includeExchangeInformation'] = requestParameters.includeExchangeInformation;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactionDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioTransactionDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Folio Transaction Details. <p><strong>OperationId:</strong>getFolioTransactionDetails</p>
     * Get Folio Transaction Details
     */
    async getFolioTransactionDetails(requestParameters, initOverrides) {
        const response = await this.getFolioTransactionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    async getFolioTypeNameRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.internalFolioWindowId !== undefined) {
            queryParameters['internalFolioWindowId'] = requestParameters.internalFolioWindowId;
        }
        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }
        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }
        if (requestParameters.folioReportGroup !== undefined) {
            queryParameters['folioReportGroup'] = requestParameters.folioReportGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folioTypeNames`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioTypeNameInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Folio Type Name. <p><strong>OperationId:</strong>getFolioTypeName</p>
     * Get Folio Type Name
     */
    async getFolioTypeName(requestParameters, initOverrides) {
        const response = await this.getFolioTypeNameRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    async getFolioTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeCompress !== undefined) {
            queryParameters['includeCompress'] = requestParameters.includeCompress;
        }
        if (requestParameters.includeCredit !== undefined) {
            queryParameters['includeCredit'] = requestParameters.includeCredit;
        }
        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folioTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioTypesInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Folio Types. <p><strong>OperationId:</strong>getFolioTypes</p>
     * Get Folio Types
     */
    async getFolioTypes(requestParameters, initOverrides) {
        const response = await this.getFolioTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status
     */
    async getGamingRequestStatusInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/compRequestStatus`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GamingRequestStatusInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Gaming Request Status Information. <p><strong>OperationId:</strong>getGamingRequestStatusInfo</p>
     * Get Gaming Request Status
     */
    async getGamingRequestStatusInfo(requestParameters, initOverrides) {
        const response = await this.getGamingRequestStatusInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p>
     * Get Guests Transactions
     */
    async getGuestsTransactionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.reservationList) {
            queryParameters['reservationList'] = requestParameters.reservationList;
        }
        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }
        if (requestParameters.includeTransactionsWithARInvoiceNo !== undefined) {
            queryParameters['includeTransactionsWithARInvoiceNo'] = requestParameters.includeTransactionsWithARInvoiceNo;
        }
        if (requestParameters.includeTransactionsWithFolioNo !== undefined) {
            queryParameters['includeTransactionsWithFolioNo'] = requestParameters.includeTransactionsWithFolioNo;
        }
        if (requestParameters.includeTransactionsWithManualPostingOnly !== undefined) {
            queryParameters['includeTransactionsWithManualPostingOnly'] = requestParameters.includeTransactionsWithManualPostingOnly;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.transactionNo) {
            queryParameters['transactionNo'] = requestParameters.transactionNo;
        }
        if (requestParameters.transactionGroup) {
            queryParameters['transactionGroup'] = requestParameters.transactionGroup;
        }
        if (requestParameters.transactionSubGroup) {
            queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
        }
        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }
        if (requestParameters.billingHotelId) {
            queryParameters['billingHotelId'] = requestParameters.billingHotelId;
        }
        if (requestParameters.desc) {
            queryParameters['desc'] = requestParameters.desc;
        }
        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }
        if (requestParameters.trxCodeWildCard !== undefined) {
            queryParameters['trxCodeWildCard'] = requestParameters.trxCodeWildCard;
        }
        if (requestParameters.trxDescriptionWildCard !== undefined) {
            queryParameters['trxDescriptionWildCard'] = requestParameters.trxDescriptionWildCard;
        }
        if (requestParameters.checkNumberWildCard !== undefined) {
            queryParameters['checkNumberWildCard'] = requestParameters.checkNumberWildCard;
        }
        if (requestParameters.referenceNumberWildCard !== undefined) {
            queryParameters['referenceNumberWildCard'] = requestParameters.referenceNumberWildCard;
        }
        if (requestParameters.supplementWildCard !== undefined) {
            queryParameters['supplementWildCard'] = requestParameters.supplementWildCard;
        }
        if (requestParameters.windowNo) {
            queryParameters['windowNo'] = requestParameters.windowNo;
        }
        if (requestParameters.cashieringTransactionType) {
            queryParameters['cashieringTransactionType'] = requestParameters.cashieringTransactionType;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.commissionable !== undefined) {
            queryParameters['commissionable'] = requestParameters.commissionable;
        }
        if (requestParameters.serviceRecoveryAllowed !== undefined) {
            queryParameters['serviceRecoveryAllowed'] = requestParameters.serviceRecoveryAllowed;
        }
        if (requestParameters.postedTransactionType) {
            queryParameters['postedTransactionType'] = requestParameters.postedTransactionType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GuestsTransactionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get  Guests Transactions. <p><strong>OperationId:</strong>getGuestsTransactions</p>
     * Get Guests Transactions
     */
    async getGuestsTransactions(requestParameters, initOverrides) {
        const response = await this.getGuestsTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    async getHotelRevenueRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.businessDate !== undefined) {
            queryParameters['businessDate'] = requestParameters.businessDate.toISOString().substr(0, 10);
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/revenue`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelRevenueDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Hotel Revenue. <p><strong>OperationId:</strong>getHotelRevenue</p>
     * Get Hotel Revenue
     */
    async getHotelRevenue(requestParameters, initOverrides) {
        const response = await this.getHotelRevenueRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    async getMaturedDepositsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MaturedDepositsDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to fetch matured deposits. <p><strong>OperationId:</strong>getMaturedDeposits</p>
     * Get matured deposits
     */
    async getMaturedDeposits(requestParameters, initOverrides) {
        const response = await this.getMaturedDepositsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    async getPostBillingChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.folioWindowNo) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.chargeCashierId) {
            queryParameters['chargeCashierId'] = requestParameters.chargeCashierId;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.postingQuantity) {
            queryParameters['postingQuantity'] = requestParameters.postingQuantity;
        }
        if (requestParameters.postingReference) {
            queryParameters['postingReference'] = requestParameters.postingReference;
        }
        if (requestParameters.postingRemark) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }
        if (requestParameters.checkNumber) {
            queryParameters['checkNumber'] = requestParameters.checkNumber;
        }
        if (requestParameters.arrangementCode) {
            queryParameters['arrangementCode'] = requestParameters.arrangementCode;
        }
        if (requestParameters.applyRoutingInstructions) {
            queryParameters['applyRoutingInstructions'] = requestParameters.applyRoutingInstructions;
        }
        if (requestParameters.usePackageAllowance) {
            queryParameters['usePackageAllowance'] = requestParameters.usePackageAllowance;
        }
        if (requestParameters.autoPosting) {
            queryParameters['autoPosting'] = requestParameters.autoPosting;
        }
        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.reservationIdIdContext !== undefined) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.option) {
            queryParameters['option'] = requestParameters.option;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BillingChargesStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get post Billing Charges. <p><strong>OperationId:</strong>getPostBillingCharges</p>
     * Get Billing Charges
     */
    async getPostBillingCharges(requestParameters, initOverrides) {
        const response = await this.getPostBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    async getPostingActivityDetailRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }
        if (requestParameters.logDate !== undefined) {
            queryParameters['logDate'] = requestParameters.logDate.toISOString();
        }
        if (requestParameters.refActionId !== undefined) {
            queryParameters['refActionId'] = requestParameters.refActionId;
        }
        if (requestParameters.logUserId !== undefined) {
            queryParameters['logUserId'] = requestParameters.logUserId;
        }
        if (requestParameters.logUserName !== undefined) {
            queryParameters['logUserName'] = requestParameters.logUserName;
        }
        if (requestParameters.machineStation !== undefined) {
            queryParameters['machineStation'] = requestParameters.machineStation;
        }
        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }
        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }
        if (requestParameters.actionDescription !== undefined) {
            queryParameters['actionDescription'] = requestParameters.actionDescription;
        }
        if (requestParameters.iPAddress !== undefined) {
            queryParameters['iPAddress'] = requestParameters.iPAddress;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/postingActivities`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostingActivityDetailFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get posting activity details. <p><strong>OperationId:</strong>getPostingActivityDetail</p>
     * Get posting activity details
     */
    async getPostingActivityDetail(requestParameters, initOverrides) {
        const response = await this.getPostingActivityDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    async getPostingSummaryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeGenerates !== undefined) {
            queryParameters['includeGenerates'] = requestParameters.includeGenerates;
        }
        if (requestParameters.postingDate !== undefined) {
            queryParameters['postingDate'] = requestParameters.postingDate.toISOString().substr(0, 10);
        }
        if (requestParameters.checkPostings !== undefined) {
            queryParameters['checkPostings'] = requestParameters.checkPostings;
        }
        if (requestParameters.postingsByExternalSystem !== undefined) {
            queryParameters['postingsByExternalSystem'] = requestParameters.postingsByExternalSystem;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }
        if (requestParameters.postingSummaryType !== undefined) {
            queryParameters['postingSummaryType'] = requestParameters.postingSummaryType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/postingDates/date/postingSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostingSummaryListFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get posting Summary. <p><strong>OperationId:</strong>getPostingSummary</p>
     * Get Posting Summary
     */
    async getPostingSummary(requestParameters, initOverrides) {
        const response = await this.getPostingSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    async getPostingsForRefreshRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.targetResvNameIdContext !== undefined) {
            queryParameters['targetResvNameIdContext'] = requestParameters.targetResvNameIdContext;
        }
        if (requestParameters.targetResvNameIdType !== undefined) {
            queryParameters['targetResvNameIdType'] = requestParameters.targetResvNameIdType;
        }
        if (requestParameters.daily !== undefined) {
            queryParameters['daily'] = requestParameters.daily;
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.transactionHotelId) {
            queryParameters['transactionHotelId'] = requestParameters.transactionHotelId;
        }
        if (requestParameters.printTrxReceipt) {
            queryParameters['printTrxReceipt'] = requestParameters.printTrxReceipt;
        }
        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }
        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.transactionGroup) {
            queryParameters['transactionGroup'] = requestParameters.transactionGroup;
        }
        if (requestParameters.transactionSubGroup) {
            queryParameters['transactionSubGroup'] = requestParameters.transactionSubGroup;
        }
        if (requestParameters.universalProductCode) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }
        if (requestParameters.routingInstructionsId) {
            queryParameters['routingInstructionsId'] = requestParameters.routingInstructionsId;
        }
        if (requestParameters.articleCode) {
            queryParameters['articleCode'] = requestParameters.articleCode;
        }
        if (requestParameters.articleHotelId) {
            queryParameters['articleHotelId'] = requestParameters.articleHotelId;
        }
        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }
        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.articleDescription) {
            queryParameters['articleDescription'] = requestParameters.articleDescription;
        }
        if (requestParameters.articleTransactionCode) {
            queryParameters['articleTransactionCode'] = requestParameters.articleTransactionCode;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.availableForPostIt !== undefined) {
            queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
        }
        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }
        if (requestParameters.articleUniversalProductCode) {
            queryParameters['articleUniversalProductCode'] = requestParameters.articleUniversalProductCode;
        }
        if (requestParameters.billingCode) {
            queryParameters['billingCode'] = requestParameters.billingCode;
        }
        if (requestParameters.billingHotelId) {
            queryParameters['billingHotelId'] = requestParameters.billingHotelId;
        }
        if (requestParameters.desc) {
            queryParameters['desc'] = requestParameters.desc;
        }
        if (requestParameters.billingInstructionRoutingInstructionsId) {
            queryParameters['billingInstructionRoutingInstructionsId'] = requestParameters.billingInstructionRoutingInstructionsId;
        }
        if (requestParameters.creditLimit !== undefined) {
            queryParameters['creditLimit'] = requestParameters.creditLimit;
        }
        if (requestParameters.percentageLimit !== undefined) {
            queryParameters['percentageLimit'] = requestParameters.percentageLimit;
        }
        if (requestParameters.covers !== undefined) {
            queryParameters['covers'] = requestParameters.covers;
        }
        if (requestParameters.limitUsed !== undefined) {
            queryParameters['limitUsed'] = requestParameters.limitUsed;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.routingLinkIdIdContext !== undefined) {
            queryParameters['routingLinkIdIdContext'] = requestParameters.routingLinkIdIdContext;
        }
        if (requestParameters.routingLinkIdType !== undefined) {
            queryParameters['routingLinkIdType'] = requestParameters.routingLinkIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostingsForRefreshFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get postings For Refresh. <p><strong>OperationId:</strong>getPostingsForRefresh</p>
     * Get Postings For Refresh
     */
    async getPostingsForRefresh(requestParameters, initOverrides) {
        const response = await this.getPostingsForRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p>
     * Get Receipt History
     */
    async getReceiptHistoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate.toISOString().substr(0, 10);
        }
        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate.toISOString().substr(0, 10);
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }
        if (requestParameters.receiptTypeName !== undefined) {
            queryParameters['receiptTypeName'] = requestParameters.receiptTypeName;
        }
        if (requestParameters.taxInvoice !== undefined) {
            queryParameters['taxInvoice'] = requestParameters.taxInvoice;
        }
        if (requestParameters.receiptNo !== undefined) {
            queryParameters['receiptNo'] = requestParameters.receiptNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/receiptHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReceiptHistoryResponseFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Receipt History. <p><strong>OperationId:</strong>getReceiptHistory</p>
     * Get Receipt History
     */
    async getReceiptHistory(requestParameters, initOverrides) {
        const response = await this.getReceiptHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    async getReservationPackageOptionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packageOptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationPackageOptionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Reservation Package Options. <p><strong>OperationId:</strong>getReservationPackageOptions</p>
     * Get Reservation Package Options
     */
    async getReservationPackageOptions(requestParameters, initOverrides) {
        const response = await this.getReservationPackageOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    async getReservationRevenueBucketTotalsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.revenueBucketType !== undefined) {
            queryParameters['revenueBucketType'] = requestParameters.revenueBucketType;
        }
        if (requestParameters.compRevenue !== undefined) {
            queryParameters['compRevenue'] = requestParameters.compRevenue;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/revenueBuckets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RevenueBucketTotalsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get a reservations Revenue Bucket Totals. <p><strong>OperationId:</strong>getReservationRevenueBucketTotals</p>
     * Get Reservations Revenue Bucket Totals
     */
    async getReservationRevenueBucketTotals(requestParameters, initOverrides) {
        const response = await this.getReservationRevenueBucketTotalsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    async getRoundingDifferenceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }
        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }
        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }
        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }
        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }
        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }
        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }
        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }
        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = requestParameters.expirationDate.toISOString().substr(0, 10);
        }
        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }
        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }
        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }
        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }
        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }
        if (requestParameters.cardIdId !== undefined) {
            queryParameters['cardIdId'] = requestParameters.cardIdId;
        }
        if (requestParameters.currentAuthorizedAmountAmount !== undefined) {
            queryParameters['currentAuthorizedAmountAmount'] = requestParameters.currentAuthorizedAmountAmount;
        }
        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }
        if (requestParameters.approvalAmountNeededAmount !== undefined) {
            queryParameters['approvalAmountNeededAmount'] = requestParameters.approvalAmountNeededAmount;
        }
        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }
        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }
        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.amountAmount !== undefined) {
            queryParameters['amountAmount'] = requestParameters.amountAmount;
        }
        if (requestParameters.amountCurrencyCode !== undefined) {
            queryParameters['amountCurrencyCode'] = requestParameters.amountCurrencyCode;
        }
        if (requestParameters.percent !== undefined) {
            queryParameters['percent'] = requestParameters.percent;
        }
        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }
        if (requestParameters.uniqueIdId !== undefined) {
            queryParameters['uniqueIdId'] = requestParameters.uniqueIdId;
        }
        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime.toISOString();
        }
        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }
        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }
        if (requestParameters.emailFormat !== undefined) {
            queryParameters['emailFormat'] = requestParameters.emailFormat;
        }
        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }
        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime.toISOString();
        }
        if (requestParameters.orderSequence !== undefined) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }
        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substr(0, 10);
        }
        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }
        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/roundingDifference`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoundingDifferenceAmountFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Rounding Difference. <p><strong>OperationId:</strong>getRoundingDifference</p>
     * Get Rounding Difference
     */
    async getRoundingDifference(requestParameters, initOverrides) {
        const response = await this.getRoundingDifferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.includeWindowRouting !== undefined) {
            queryParameters['includeWindowRouting'] = requestParameters.includeWindowRouting;
        }
        if (requestParameters.includeRoomRouting !== undefined) {
            queryParameters['includeRoomRouting'] = requestParameters.includeRoomRouting;
        }
        if (requestParameters.includeCompRouting !== undefined) {
            queryParameters['includeCompRouting'] = requestParameters.includeCompRouting;
        }
        if (requestParameters.includeCompRoutingRequests !== undefined) {
            queryParameters['includeCompRoutingRequests'] = requestParameters.includeCompRoutingRequests;
        }
        if (requestParameters.effectiveOn !== undefined) {
            queryParameters['effectiveOn'] = requestParameters.effectiveOn.toISOString().substr(0, 10);
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoutingInstructionsDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to retrieve routing instructions for a specified reservation. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.getRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    async getStoredFolioDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }
        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }
        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }
        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StoredFolioDetailsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Stored Folio Details. <p><strong>OperationId:</strong>getStoredFolioDetails</p>
     * Get Stored Folio Details
     */
    async getStoredFolioDetails(requestParameters, initOverrides) {
        const response = await this.getStoredFolioDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    async getTransactionCodesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        if (requestParameters.includeArticles !== undefined) {
            queryParameters['includeArticles'] = requestParameters.includeArticles;
        }
        if (requestParameters.userRoleTransactions !== undefined) {
            queryParameters['userRoleTransactions'] = requestParameters.userRoleTransactions;
        }
        if (requestParameters.manualPostAllowed !== undefined) {
            queryParameters['manualPostAllowed'] = requestParameters.manualPostAllowed;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }
        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }
        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }
        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }
        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }
        if (requestParameters.trxServiceType !== undefined) {
            queryParameters['trxServiceType'] = requestParameters.trxServiceType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionCodesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to retrieve a list of Transaction Codes configured for a property. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get Transaction Codes
     */
    async getTransactionCodes(requestParameters, initOverrides) {
        const response = await this.getTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getValidateFiscalPrintingDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.folioView !== undefined) {
            queryParameters['folioView'] = requestParameters.folioView;
        }
        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }
        if (requestParameters.profileIdId !== undefined) {
            queryParameters['profileIdId'] = requestParameters.profileIdId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPrinting`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FiscalCallStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Fiscal Printing Details. <p><strong>OperationId:</strong>getValidateFiscalPrintingDetails</p>
     * Get Fiscal Printing Details
     */
    async getValidateFiscalPrintingDetails(requestParameters, initOverrides) {
        const response = await this.getValidateFiscalPrintingDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    async getfetchStagedTransactionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId2 !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId2;
        }
        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fetchStagedTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StagedTransactionsFromJSON)(jsonValue));
    }
    /**
     * This API is used to fetch the staged transactions for a given reservation. <p><strong>OperationId:</strong>getfetchStagedTransactions</p>
     * Get fetchStagedTransactions
     */
    async getfetchStagedTransactions(requestParameters, initOverrides) {
        const response = await this.getfetchStagedTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    async isDepositRefundEligibleRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositRefundEligibleCheckFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get eligibility of Deposit Refund. <p><strong>OperationId:</strong>isDepositRefundEligible</p>
     * Get eligibility of Deposit Refund
     */
    async isDepositRefundEligible(requestParameters, initOverrides) {
        const response = await this.isDepositRefundEligibleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    async linkReservationPackageAllowanceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/destinationReservations/{destinationReservationId}/packageAllowance/links`.replace(`{${"destinationReservationId"}}`, encodeURIComponent(String(requestParameters.destinationReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.LinkReservationPackageAllowanceRequestToJSON)(requestParameters.linkReservationPackageAllowance),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to link reservation package allowance. <p><strong>OperationId:</strong>linkReservationPackageAllowance</p>
     * Link Reservation package allowance
     */
    async linkReservationPackageAllowance(requestParameters, initOverrides) {
        const response = await this.linkReservationPackageAllowanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Status check of cashiering services. <p><strong>OperationId:</strong>pingCashieringService</p>
     * Status check of cashiering services
     */
    async pingCashieringServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/cashiering/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Status check of cashiering services. <p><strong>OperationId:</strong>pingCashieringService</p>
     * Status check of cashiering services
     */
    async pingCashieringService(requestParameters, initOverrides) {
        const response = await this.pingCashieringServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    async postAdvanceFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/advanceFolio/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAdvanceFolioRequestToJSON)(requestParameters.batchAdvanceFolio),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Batch Advance Folio. <p><strong>OperationId:</strong>postAdvanceFolio</p>
     * Create Batch Advance Folio
     */
    async postAdvanceFolio(requestParameters, initOverrides) {
        const response = await this.postAdvanceFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    async postAdvanceRoomChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advanceRoomCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAdvanceRoomChargesRequestToJSON)(requestParameters.advanceRoomCharges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AdvanceRoomChargesReservationInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create advance Room Charges. <p><strong>OperationId:</strong>postAdvanceRoomCharges</p>
     * Create advance Room Charges
     */
    async postAdvanceRoomCharges(requestParameters, initOverrides) {
        const response = await this.postAdvanceRoomChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    async postArticlesSaleRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/articlesSale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostArticlesSaleRequestToJSON)(requestParameters.articlesSaleCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ArticlesSaleFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Articles Sale. <p><strong>OperationId:</strong>postArticlesSale</p>
     * Create Articles Sale
     */
    async postArticlesSale(requestParameters, initOverrides) {
        const response = await this.postArticlesSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch
     */
    async postAutoCheckoutReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/autoCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAutoCheckoutReservationsRequestToJSON)(requestParameters.batchAutoCheckoutReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BatchAutoCheckoutDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Auto Checkout Reservation Batch. <p><strong>OperationId:</strong>postAutoCheckoutReservations</p>
     * Create Auto Checkout Reservation Batch
     */
    async postAutoCheckoutReservations(requestParameters, initOverrides) {
        const response = await this.postAutoCheckoutReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    async postBatchAutoSettlementRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/autoSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBatchAutoSettlementRequestToJSON)(requestParameters.batchAutoSettlementCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Batch Auto Settlement. <p><strong>OperationId:</strong>postBatchAutoSettlement</p>
     * Create Batch Auto Settlement
     */
    async postBatchAutoSettlement(requestParameters, initOverrides) {
        const response = await this.postBatchAutoSettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    async postBatchCCSettlementsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/ccSettlements/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBatchCCSettlementsRequestToJSON)(requestParameters.ccBatchSettlementsProcessCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Batch CC Settlements. <p><strong>OperationId:</strong>postBatchCCSettlements</p>
     * Create Batch CC Settlements
     */
    async postBatchCCSettlements(requestParameters, initOverrides) {
        const response = await this.postBatchCCSettlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    async postBatchDepositRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/batchDeposits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBatchDepositRequestToJSON)(requestParameters.batchDeposit),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create batch deposits. <p><strong>OperationId:</strong>postBatchDeposit</p>
     * Create batch deposits
     */
    async postBatchDeposit(requestParameters, initOverrides) {
        const response = await this.postBatchDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    async postBedTaxInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBedTaxInfoRequestToJSON)(requestParameters.bedTaxCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create new bed tax information for a property. <p><strong>OperationId:</strong>postBedTaxInfo</p>
     * Create bed tax information
     */
    async postBedTaxInfo(requestParameters, initOverrides) {
        const response = await this.postBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    async postBillingChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/charges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBillingChargesRequestToJSON)(requestParameters.billingCharges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BillingChargesDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to post a charge to a folio window. <p><strong>OperationId:</strong>postBillingCharges</p>
     * Post Charge to a folio
     */
    async postBillingCharges(requestParameters, initOverrides) {
        const response = await this.postBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    async postBillingChargesInBatchRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBillingChargesInBatchRequestToJSON)(requestParameters.billingChargesInBatchCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostedBillingChargesInBatchFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Billing Charges in Batch. <p><strong>OperationId:</strong>postBillingChargesInBatch</p>
     * Create Billing Charges in Batch
     */
    async postBillingChargesInBatch(requestParameters, initOverrides) {
        const response = await this.postBillingChargesInBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    async postBillingCheckChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBillingCheckChargesRequestToJSON)(requestParameters.billingCheckChargesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to validate the posting prior to posting the charge to the folio <p><strong>OperationId:</strong>postBillingCheckCharges</p>
     * Pre-validate the Billing Charge
     */
    async postBillingCheckCharges(requestParameters, initOverrides) {
        const response = await this.postBillingCheckChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    async postBillingPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/payments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBillingPaymentRequestToJSON)(requestParameters.billingPayment),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostedBillingPaymentFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Billing Payment on the folio of a Reservation. <p><strong>OperationId:</strong>postBillingPayment</p>
     * Create Billing Payment
     */
    async postBillingPayment(requestParameters, initOverrides) {
        const response = await this.postBillingPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    async postCCSettlementRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/ccSettlement`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCCSettlementRequestToJSON)(requestParameters.ccSettlementCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create cc Settlement. <p><strong>OperationId:</strong>postCCSettlement</p>
     * Create CreditCard Settlement
     */
    async postCCSettlement(requestParameters, initOverrides) {
        const response = await this.postCCSettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    async postCheckOutRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCheckOutRequestToJSON)(requestParameters.reservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API enables you to check out a guest reservation which is in due out status, with options to update the room\'s housekeeping status and set a flag to email the guests folio. <p><strong>OperationId:</strong>postCheckOut</p>
     * Check out a guest
     */
    async postCheckOut(requestParameters, initOverrides) {
        const response = await this.postCheckOutRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionPostings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCompRedemptionsRequestToJSON)(requestParameters.postCompRedemptions),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to post complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptions(requestParameters, initOverrides) {
        const response = await this.postCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    async postCompTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCompTransactionRequestToJSON)(requestParameters.compTransactionCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>postCompTransaction</p>
     * Submit Comp Transaction
     */
    async postCompTransaction(requestParameters, initOverrides) {
        const response = await this.postCompTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    async postCreditBillRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditBill`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCreditBillRequestToJSON)(requestParameters.creditBillCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostedCreditBillFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Credit Bill. <p><strong>OperationId:</strong>postCreditBill</p>
     * Create Credit Bill
     */
    async postCreditBill(requestParameters, initOverrides) {
        const response = await this.postCreditBillRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    async postCreditLimitOveragePaymentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditLimitsOveragePayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCreditLimitOveragePaymentsRequestToJSON)(requestParameters.creditLimitOveragePayments),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreditLimitOveragePaymentsDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Credit Limit Overage Payments. <p><strong>OperationId:</strong>postCreditLimitOveragePayments</p>
     * Create Credit Limit Overage Payments
     */
    async postCreditLimitOveragePayments(requestParameters, initOverrides) {
        const response = await this.postCreditLimitOveragePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    async postDeferredTaxesProcessRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/deferredTaxesProcess`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDeferredTaxesProcessRequestToJSON)(requestParameters.deferredTaxesProcess),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DeferredTaxesProcessDetailsFromJSON)(jsonValue));
    }
    /**
     * Request to submit a job to post the deferred taxes. <p><strong>OperationId:</strong>postDeferredTaxesProcess</p>
     * Request to submit a job to post the deferred taxes.
     */
    async postDeferredTaxesProcess(requestParameters, initOverrides) {
        const response = await this.postDeferredTaxesProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    async postDepositFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositFolios`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDepositFolioRequestToJSON)(requestParameters.depositFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostedDepositFolioFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Deposit Folio. <p><strong>OperationId:</strong>postDepositFolio</p>
     * Create Deposit Folio
     */
    async postDepositFolio(requestParameters, initOverrides) {
        const response = await this.postDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    async postDepositPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDepositPaymentByExtIdRequestToJSON)(requestParameters.depositPayment),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositedPaymentFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Deposit Payment. <p><strong>OperationId:</strong>postDepositPayment</p>
     * Create Deposit Payment
     */
    async postDepositPayment(requestParameters, initOverrides) {
        const response = await this.postDepositPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    async postDepositPaymentByExtIdRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSysCode}/reservations/{reservationId}/depositPayments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"externalSysCode"}}`, encodeURIComponent(String(requestParameters.externalSysCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDepositPaymentByExtIdRequestToJSON)(requestParameters.depositPayment),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositedPaymentFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Deposit Payment with external reference. <p><strong>OperationId:</strong>postDepositPaymentByExtId</p>
     * Create Deposit Payment using external reference.
     */
    async postDepositPaymentByExtId(requestParameters, initOverrides) {
        const response = await this.postDepositPaymentByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    async postFBAReimbursementRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/fbaReimbursements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostFBAReimbursementRequestToJSON)(requestParameters.fbaReimbursementCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create FBA Reimbursement. <p><strong>OperationId:</strong>postFBAReimbursement</p>
     * Create FBA Reimbursement
     */
    async postFBAReimbursement(requestParameters, initOverrides) {
        const response = await this.postFBAReimbursementRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    async postFBASettlementRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/fbaSettlements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostFBAReimbursementRequestToJSON)(requestParameters.fbaReimbursementCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create FBA Settlement. <p><strong>OperationId:</strong>postFBASettlement</p>
     * Create FBA Settlement
     */
    async postFBASettlement(requestParameters, initOverrides) {
        const response = await this.postFBASettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalCommandInvoiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalCommands`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostFiscalCommandInvoiceRequestToJSON)(requestParameters.fiscalFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FiscalCommandsResponseInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Fiscal Invoice. <p><strong>OperationId:</strong>postFiscalCommandInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalCommandInvoice(requestParameters, initOverrides) {
        const response = await this.postFiscalCommandInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalInvoiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folio/{folioId}/fiscalCommands`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostFiscalCommandInvoiceRequestToJSON)(requestParameters.fiscalFolioCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Fiscal Invoice.<br><p><strong><mark>This API is deprecated. Please use postFiscalCommandInvoice instead</mark></strong></p> <p><strong>OperationId:</strong>postFiscalInvoice</p>
     * Create Fiscal Invoice
     */
    async postFiscalInvoice(requestParameters, initOverrides) {
        const response = await this.postFiscalInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    async postFixedChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UpdateFixedChargesRequestToJSON)(requestParameters.fixedCharges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create a fixed Charge for a reservation. <p><strong>OperationId:</strong>postFixedCharges</p>
     * Create Fixed Charges
     */
    async postFixedCharges(requestParameters, initOverrides) {
        const response = await this.postFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    async postForeignCurrencyExchangeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/foreignCurrencyExchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostForeignCurrencyExchangeRequestToJSON)(requestParameters.foreignCurrencyExchange),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ForeignCurrencyExchangeTransactionFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Create Foreign Currency Exchange. <p><strong>OperationId:</strong>postForeignCurrencyExchange</p>
     * Create Foreign Currency Exchange
     */
    async postForeignCurrencyExchange(requestParameters, initOverrides) {
        const response = await this.postForeignCurrencyExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    async postGuestCheckDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostGuestCheckDetailsRequestToJSON)(requestParameters.guestCheckDetails),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This operation is to add guest check details for posted check transactions. <p><strong>OperationId:</strong>postGuestCheckDetails</p>
     * Post Guest Check Details
     */
    async postGuestCheckDetails(requestParameters, initOverrides) {
        const response = await this.postGuestCheckDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    async postPasserBySaleRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/passerBySale`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostPasserBySaleRequestToJSON)(requestParameters.passerBySalesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PasserBySaleFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create passer by sale. <p><strong>OperationId:</strong>postPasserBySale</p>
     * Create passer by sale
     */
    async postPasserBySale(requestParameters, initOverrides) {
        const response = await this.postPasserBySaleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    async postPrepaidCardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostPrepaidCardsRequestToJSON)(requestParameters.prepaidCardCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Prepaid Cards. <p><strong>OperationId:</strong>postPrepaidCards</p>
     * Create Prepaid Cards
     */
    async postPrepaidCards(requestParameters, initOverrides) {
        const response = await this.postPrepaidCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     */
    async postProformaRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/proforma`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostProformaRequestToJSON)(requestParameters.reservationFolio),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationFolioInformationFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create proforma for a specific reservation. <p><strong>OperationId:</strong>postProforma</p>
     * Create proforma
     */
    async postProforma(requestParameters, initOverrides) {
        const response = await this.postProformaRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    async postRateCodeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservation/{reservationId}/rateCode/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRateCodeRequestToJSON)(requestParameters.postRateCodeCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostedRateCodeFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create rate codes. <p><strong>OperationId:</strong>postRateCode</p>
     * Create rate codes
     */
    async postRateCode(requestParameters, initOverrides) {
        const response = await this.postRateCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    async postReversePaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/reversePayments`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostReversePaymentRequestToJSON)(requestParameters.paymentReversalCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create reverse payments. <p><strong>OperationId:</strong>postReversePayment</p>
     * Create reverse payments
     */
    async postReversePayment(requestParameters, initOverrides) {
        const response = await this.postReversePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    async postRoomAndTaxForDayUseRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/reservations/{reservationId}/postRoomAndTaxForDayUse`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRoomAndTaxForDayUseRequestToJSON)(requestParameters.postRoomAndTaxForDayUse),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to post post Room And Tax For DayUse <p><strong>OperationId:</strong>postRoomAndTaxForDayUse</p>
     * Operation to post room and tax for day use.
     */
    async postRoomAndTaxForDayUse(requestParameters, initOverrides) {
        const response = await this.postRoomAndTaxForDayUseRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    async postStoredFolioDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/storedFolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostStoredFolioDetailsRequestToJSON)(requestParameters.storedFolioDetails),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Stored Folio Details. <p><strong>OperationId:</strong>postStoredFolioDetails</p>
     * Create Stored Folio Details
     */
    async postStoredFolioDetails(requestParameters, initOverrides) {
        const response = await this.postStoredFolioDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    async postSupplementalFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/supplementFolios`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostSupplementalFolioRequestToJSON)(requestParameters.postSupplementalFolio),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PostSupplementalFolioStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to post supplemental folio. <p><strong>OperationId:</strong>postSupplementalFolio</p>
     * Post supplemental folio
     */
    async postSupplementalFolio(requestParameters, initOverrides) {
        const response = await this.postSupplementalFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch
     */
    async postZeroBalanceCheckoutReservationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/zeroBalanceCheckoutReservations/batchJobs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostZeroBalanceCheckoutReservationsRequestToJSON)(requestParameters.batchZeroBalanceCheckoutReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BatchZeroBalanceCheckoutDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Zero Balance Checkout Reservation Batch. <p><strong>OperationId:</strong>postZeroBalanceCheckoutReservations</p>
     * Create Zero Balance Checkout Reservation Batch
     */
    async postZeroBalanceCheckoutReservations(requestParameters, initOverrides) {
        const response = await this.postZeroBalanceCheckoutReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    async processFiscalRetryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/folios/{folioId}/fiscal`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ProcessFiscalRetryRequestToJSON)(requestParameters.processFiscalRetry),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProcessFiscalRetryStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to process fiscal retry status. <p><strong>OperationId:</strong>processFiscalRetry</p>
     * Process Fiscal retry
     */
    async processFiscalRetry(requestParameters, initOverrides) {
        const response = await this.processFiscalRetryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    async processReservationDepositRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/deposit`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ProcessReservationDepositRequestToJSON)(requestParameters.reservationDepositCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Process reservations deposit. <p><strong>OperationId:</strong>processReservationDeposit</p>
     * Process Reservations deposit
     */
    async processReservationDeposit(requestParameters, initOverrides) {
        const response = await this.processReservationDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    async processRoomRoutingRefreshRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/roomRouting`.replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ProcessRoomRoutingRefreshRequestToJSON)(requestParameters.roomRoutingRefresh),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Room Routing Refresh. <p><strong>OperationId:</strong>processRoomRoutingRefresh</p>
     * Process Room Routing Refresh
     */
    async processRoomRoutingRefresh(requestParameters, initOverrides) {
        const response = await this.processRoomRoutingRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     */
    async putBedTaxInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBedTaxInfoRequestToJSON)(requestParameters.bedTaxCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Update bed tax information for a property. <p><strong>OperationId:</strong>putBedTaxInfo</p>
     * Change bed tax information
     */
    async putBedTaxInfo(requestParameters, initOverrides) {
        const response = await this.putBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    async putBillingChargeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/charges`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutBillingChargeRequestToJSON)(requestParameters.billingCharge),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BillingChargeStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharge</p>
     * Change Billing Charge
     */
    async putBillingCharge(requestParameters, initOverrides) {
        const response = await this.putBillingChargeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    async putBillingChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/billingCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutBillingChargesRequestToJSON)(requestParameters.putBillingCharges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PutBillingChargesStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Billing Charges. <p><strong>OperationId:</strong>putBillingCharges</p>
     * Change Billing Charges
     */
    async putBillingCharges(requestParameters, initOverrides) {
        const response = await this.putBillingChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    async putCashierRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashiers/{cashierId}/closure`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutCashierRequestToJSON)(requestParameters.cashierClosure),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Cashier Closure. <p><strong>OperationId:</strong>putCashier</p>
     * Close Cashier
     */
    async putCashier(requestParameters, initOverrides) {
        const response = await this.putCashierRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    async putCashierLockRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cashierslock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutCashierLockRequestToJSON)(requestParameters.cashierLockCriteriaToExtend),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExtendedCashierLockFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Extend cashiers lock. <p><strong>OperationId:</strong>putCashierLock</p>
     * Extend Cashier Lock
     */
    async putCashierLock(requestParameters, initOverrides) {
        const response = await this.putCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    async putForEarlyDepartureRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutForEarlyDepartureRequestToJSON)(requestParameters.earlyDeparture),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change early Departure. <p><strong>OperationId:</strong>putForEarlyDeparture</p>
     * Change early Departure
     */
    async putForEarlyDeparture(requestParameters, initOverrides) {
        const response = await this.putForEarlyDepartureRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    async putPayeeTaxNumberRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/payees/{payeeId}/taxNumber`.replace(`{${"payeeId"}}`, encodeURIComponent(String(requestParameters.payeeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutPayeeTaxNumberRequestToJSON)(requestParameters.payeeTaxNumber),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Payee Tax Number. <p><strong>OperationId:</strong>putPayeeTaxNumber</p>
     * Change Payee Tax Number
     */
    async putPayeeTaxNumber(requestParameters, initOverrides) {
        const response = await this.putPayeeTaxNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    async putReservationDepositTransferRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{sourceReservationId}/deposit/transfers`.replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutReservationDepositTransferRequestToJSON)(requestParameters.depositTransferCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Reservation Deposit Transfer. <p><strong>OperationId:</strong>putReservationDepositTransfer</p>
     * Change Reservation Deposit Transfer.
     */
    async putReservationDepositTransfer(requestParameters, initOverrides) {
        const response = await this.putReservationDepositTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    async putRoutingInstructionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions/create`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutRoutingInstructionsRequestToJSON)(requestParameters.routingInstructions),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreatedRoutingInstructionsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to add routing instructions to a reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Create routing instructions
     */
    async putRoutingInstructions(requestParameters, initOverrides) {
        const response = await this.putRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    async redeemPrepaidCardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/prepaidCards/redemptions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.RedeemPrepaidCardsRequestToJSON)(requestParameters.redeemPrepaidCards),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RedeemPrepaidCardsStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to redeem Prepaid Cards <p><strong>OperationId:</strong>redeemPrepaidCards</p>
     * Operation to redeem prepaid cards.
     */
    async redeemPrepaidCards(requestParameters, initOverrides) {
        const response = await this.redeemPrepaidCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    async registerManualAuthorizationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods/creditCard/authorize/manual`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.RegisterManualAuthorizationRequestToJSON)(requestParameters.ccManualAuthorizationCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to register Manual Authorization. <p><strong>OperationId:</strong>registerManualAuthorization</p>
     * Register Manual Authorization
     */
    async registerManualAuthorization(requestParameters, initOverrides) {
        const response = await this.registerManualAuthorizationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    async registerVaultTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTransaction/logs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.RegisterVaultTransactionRequestToJSON)(requestParameters.vaultTransaction),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create vault transaction. <p><strong>OperationId:</strong>registerVaultTransaction</p>
     * Register Vault Transaction
     */
    async registerVaultTransaction(requestParameters, initOverrides) {
        const response = await this.registerVaultTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    async reinstateCheckOutRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkOuts/reinstate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReinstateCheckOutRequestToJSON)(requestParameters.reinstateCheckedOutReservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to reinstate Checked Out Reservation. <p><strong>OperationId:</strong>reinstateCheckOut</p>
     * Reinstate Checked Out Reservation
     */
    async reinstateCheckOut(requestParameters, initOverrides) {
        const response = await this.reinstateCheckOutRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    async releaseCashierLockRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/cashiersLock/{lockId}`.replace(`{${"lockId"}}`, encodeURIComponent(String(requestParameters.lockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Release Cashier Lock. <p><strong>OperationId:</strong>releaseCashierLock</p>
     * Release Cashier Lock
     */
    async releaseCashierLock(requestParameters, initOverrides) {
        const response = await this.releaseCashierLockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    async reloadPrepaidCardRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/prepaidCards/reload`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReloadPrepaidCardRequestToJSON)(requestParameters.reloadPrepaidCard),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReloadPrepaidCardStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to reload Prepaid Card. <p><strong>OperationId:</strong>reloadPrepaidCard</p>
     * Operation to reload prepaid card.
     */
    async reloadPrepaidCard(requestParameters, initOverrides) {
        const response = await this.reloadPrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     */
    async removeBedTaxInfoRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bedTax/{taxRegistraitionNo}`.replace(`{${"taxRegistraitionNo"}}`, encodeURIComponent(String(requestParameters.taxRegistraitionNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete bed tax information for a property. <p><strong>OperationId:</strong>removeBedTaxInfo</p>
     * Delete bed tax information
     */
    async removeBedTaxInfo(requestParameters, initOverrides) {
        const response = await this.removeBedTaxInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges
     */
    async removeFixedChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fixedChargeID) {
            queryParameters['fixedChargeID'] = requestParameters.fixedChargeID;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to remove fixed Charges for a reservation. <p><strong>OperationId:</strong>removeFixedCharges</p>
     * Delete Fixed Charges
     */
    async removeFixedCharges(requestParameters, initOverrides) {
        const response = await this.removeFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    async reverseARInvoiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.reasonCode !== undefined) {
            queryParameters['reasonCode'] = requestParameters.reasonCode;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/arInvoices/reverse`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to reverse an AR Invoice. <p><strong>OperationId:</strong>reverseARInvoice</p>
     * Reverse AR Invoice
     */
    async reverseARInvoice(requestParameters, initOverrides) {
        const response = await this.reverseARInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    async reverseCertificatePostingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/reverseCertificate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReverseCertificatePostingsRequestToJSON)(requestParameters.reverseCertificatePostingsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Reverse certificate postings. <p><strong>OperationId:</strong>reverseCertificatePostings</p>
     * Reverse certificate postings
     */
    async reverseCertificatePostings(requestParameters, initOverrides) {
        const response = await this.reverseCertificatePostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/compRedemptionReversals`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReverseCompRedemptionsRequestToJSON)(requestParameters.reverseCompRedemptions),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to reverse complimentary bucket redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary bucket redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptions(requestParameters, initOverrides) {
        const response = await this.reverseCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    async reverseFlexibleBenefitPostingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}/flexibleBenefitPostings`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete flexible benefit postings. <p><strong>OperationId:</strong>reverseFlexibleBenefitPosting</p>
     * Delete flexible benefit postings
     */
    async reverseFlexibleBenefitPosting(requestParameters, initOverrides) {
        const response = await this.reverseFlexibleBenefitPostingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    async reverseFolioTaxPaymentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/cashiers/{cashierId}/folioTaxPayments`.replace(`{${"cashierId"}}`, encodeURIComponent(String(requestParameters.cashierId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ReverseFolioTaxPaymentRequestToJSON)(requestParameters.transactionReversal),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FolioTaxPaymentReversalFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change folio tax payments. <p><strong>OperationId:</strong>reverseFolioTaxPayment</p>
     * Change folio tax payments
     */
    async reverseFolioTaxPayment(requestParameters, initOverrides) {
        const response = await this.reverseFolioTaxPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    async splitAndTransferTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/splitAndTransfer`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SplitAndTransferTransactionRequestToJSON)(requestParameters.transactionToSplitAndTransfer),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to split and transfer transactions. <p><strong>OperationId:</strong>splitAndTransferTransaction</p>
     * Split and transfer transactions
     */
    async splitAndTransferTransaction(requestParameters, initOverrides) {
        const response = await this.splitAndTransferTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    async splitDepositTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SplitDepositTransactionRequestToJSON)(requestParameters.splitDepositTransaction),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SplitDepositTransactionStatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Split deposit transaction. <p><strong>OperationId:</strong>splitDepositTransaction</p>
     * Split deposit transaction
     */
    async splitDepositTransaction(requestParameters, initOverrides) {
        const response = await this.splitDepositTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    async splitTransactionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/split`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SplitTransactionRequestToJSON)(requestParameters.transactionToSplit),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Split transactions. <p><strong>OperationId:</strong>splitTransaction</p>
     * Split transactions
     */
    async splitTransaction(requestParameters, initOverrides) {
        const response = await this.splitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    async transferCompTransactionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transferCompTransactions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransferCompTransactionsRequestToJSON)(requestParameters.transferCompTransactions),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to transfer comp transactions to window <p><strong>OperationId:</strong>transferCompTransactions</p>
     * Transfer comp transactions to window
     */
    async transferCompTransactions(requestParameters, initOverrides) {
        const response = await this.transferCompTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    async transferFolioToWindowRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transferFolioTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransferFolioToWindowRequestToJSON)(requestParameters.folioToWindow),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to transfer Folio to Window. <p><strong>OperationId:</strong>transferFolioToWindow</p>
     * Transfer Folio to Window.
     */
    async transferFolioToWindow(requestParameters, initOverrides) {
        const response = await this.transferFolioToWindowRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    async transferTransactionToReservationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{toReservationId}/transferTransaction`.replace(`{${"toReservationId"}}`, encodeURIComponent(String(requestParameters.toReservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransferTransactionToReservationRequestToJSON)(requestParameters.reservationTransaction),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Transfer Transaction to Reservation. <p><strong>OperationId:</strong>transferTransactionToReservation</p>
     * Transfer Transaction to Reservation
     */
    async transferTransactionToReservation(requestParameters, initOverrides) {
        const response = await this.transferTransactionToReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    async transferTransactionToWindowRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transferTransactions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransferTransactionToWindowRequestToJSON)(requestParameters.transactionToWindow),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransferTransactionToWindowFromJSON)(jsonValue));
    }
    /**
     * You can use this API to transfer Transaction to Window. <p><strong>OperationId:</strong>transferTransactionToWindow</p>
     * Transfer Transaction to Window
     */
    async transferTransactionToWindow(requestParameters, initOverrides) {
        const response = await this.transferTransactionToWindowRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    async transitionDepositToGuestFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositTransition`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransitionDepositToGuestFolioRequestToJSON)(requestParameters.depositToGuestFolio),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Transfer Deposit to Guest Folio. <p><strong>OperationId:</strong>transitionDepositToGuestFolio</p>
     * Transition Deposit to Guest Folio
     */
    async transitionDepositToGuestFolio(requestParameters, initOverrides) {
        const response = await this.transitionDepositToGuestFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    async unlinkReservationPackageAllowanceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packageAllowance/links`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to unlink reservation package allowance. <p><strong>OperationId:</strong>unlinkReservationPackageAllowance</p>
     * Unlink reservation package allowance
     */
    async unlinkReservationPackageAllowance(requestParameters, initOverrides) {
        const response = await this.unlinkReservationPackageAllowanceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges
     */
    async updateFixedChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/fixedCharges`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UpdateFixedChargesRequestToJSON)(requestParameters.fixedCharges),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to update fixed Charges for a reservation. <p><strong>OperationId:</strong>updateFixedCharges</p>
     * Updates Fixed Charges
     */
    async updateFixedCharges(requestParameters, initOverrides) {
        const response = await this.updateFixedChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    async validateCreditBillRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/creditBill/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCreditBillRequestToJSON)(requestParameters.creditBillCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ValidatedCreditBillFromJSON)(jsonValue));
    }
    /**
     * You can use this API to validate credit Bill. <p><strong>OperationId:</strong>validateCreditBill</p>
     * Validate Credit Bill
     */
    async validateCreditBill(requestParameters, initOverrides) {
        const response = await this.validateCreditBillRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    async validateDepositFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/depositfolios/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ValidateDepositFolioRequestToJSON)(requestParameters.depositFolioValidateCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DepositedFolioValidateFromJSON)(jsonValue));
    }
    /**
     * You can use this API to validate Deposit Folio. <p><strong>OperationId:</strong>validateDepositFolio</p>
     * Validate Deposit Folio
     */
    async validateDepositFolio(requestParameters, initOverrides) {
        const response = await this.validateDepositFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    async validateTransactionCodesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }
        if (requestParameters.fiscalBillNo !== undefined) {
            queryParameters['fiscalBillNo'] = requestParameters.fiscalBillNo;
        }
        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substr(0, 10);
        }
        if (requestParameters.folioNo !== undefined) {
            queryParameters['folioNo'] = requestParameters.folioNo;
        }
        if (requestParameters.folioStatus !== undefined) {
            queryParameters['folioStatus'] = requestParameters.folioStatus;
        }
        if (requestParameters.folioTypeName !== undefined) {
            queryParameters['folioTypeName'] = requestParameters.folioTypeName;
        }
        if (requestParameters.internalFolioWindowID !== undefined) {
            queryParameters['internalFolioWindowID'] = requestParameters.internalFolioWindowID;
        }
        if (requestParameters.invoiceNo !== undefined) {
            queryParameters['invoiceNo'] = requestParameters.invoiceNo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/transactions/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ValidatedTransactionCodeFromJSON)(jsonValue));
    }
    /**
     * You can use this API to validate Transaction Codes. <p><strong>OperationId:</strong>validateTransactionCodes</p>
     * Validate Transaction Codes
     */
    async validateTransactionCodes(requestParameters, initOverrides) {
        const response = await this.validateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    async verifyForEarlyDepartureRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.ignoreCheckOnTieredRate !== undefined) {
            queryParameters['ignoreCheckOnTieredRate'] = requestParameters.ignoreCheckOnTieredRate;
        }
        if (requestParameters.ignoreRateRestriction !== undefined) {
            queryParameters['ignoreRateRestriction'] = requestParameters.ignoreRateRestriction;
        }
        if (requestParameters.postConsumedAllowanceToGuest !== undefined) {
            queryParameters['postConsumedAllowanceToGuest'] = requestParameters.postConsumedAllowanceToGuest;
        }
        if (requestParameters.postEarlyDeparturePenalty !== undefined) {
            queryParameters['postEarlyDeparturePenalty'] = requestParameters.postEarlyDeparturePenalty;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/earlyDeparture/verify`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EarlyDepartureInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to verify early Departure. <p><strong>OperationId:</strong>verifyForEarlyDeparture</p>
     * Verify for early Departure
     */
    async verifyForEarlyDeparture(requestParameters, initOverrides) {
        const response = await this.verifyForEarlyDepartureRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    async voidBillingCheckChargesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.revenueDate !== undefined) {
            queryParameters['revenueDate'] = requestParameters.revenueDate.toISOString().substr(0, 10);
        }
        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }
        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }
        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }
        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.checkId !== undefined) {
            queryParameters['checkId'] = requestParameters.checkId;
        }
        if (requestParameters.checkIdContext !== undefined) {
            queryParameters['checkIdContext'] = requestParameters.checkIdContext;
        }
        if (requestParameters.checkIdType !== undefined) {
            queryParameters['checkIdType'] = requestParameters.checkIdType;
        }
        if (requestParameters.cashierId !== undefined) {
            queryParameters['cashierId'] = requestParameters.cashierId;
        }
        if (requestParameters.postingRemark !== undefined) {
            queryParameters['postingRemark'] = requestParameters.postingRemark;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/check/{checkNumber}/charges`.replace(`{${"checkNumber"}}`, encodeURIComponent(String(requestParameters.checkNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete (void) Billing Check Charges. <p><strong>OperationId:</strong>voidBillingCheckCharges</p>
     * Delete Billing Check Charges
     */
    async voidBillingCheckCharges(requestParameters, initOverrides) {
        const response = await this.voidBillingCheckChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    async voidFolioRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/voidfolios/{folioId}`.replace(`{${"folioId"}}`, encodeURIComponent(String(requestParameters.folioId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.VoidFolioRequestToJSON)(requestParameters.folioToVoid),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.VoidedFolioFromJSON)(jsonValue));
    }
    /**
     * You can use this API to void a folio. <p><strong>OperationId:</strong>voidFolio</p>
     * Void folio
     */
    async voidFolio(requestParameters, initOverrides) {
        const response = await this.voidFolioRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.CashieringApi = CashieringApi;
/**
 * @export
 */
exports.GetAlertsAlertAreaEnum = {
    CheckIn: 'CheckIn',
    CheckOut: 'CheckOut',
    Reservation: 'Reservation',
    Billing: 'Billing',
    InHouse: 'InHouse'
};
/**
 * @export
 */
exports.GetAuthorizationHistoryTransactionTypeEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetBalanceInfoEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetBalanceInfoFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileSourceOfAuthorizationEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCAuthorizationInstructionsByProfileEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetCCSurchargeInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetCashierReportPostingsRequestTypeEnum = {
    Cash: 'Cash',
    Check: 'Check',
    ForeignCurrency: 'ForeignCurrency',
    CreditCard: 'CreditCard',
    Miscellaneous: 'Miscellaneous',
    ArSettlements: 'ArSettlements',
    DepositTransfers: 'DepositTransfers',
    Shiftdrop: 'Shiftdrop'
};
/**
 * @export
 */
exports.GetCompRoutingInstructionsResStatusCodeEnum = {
    Reserved: 'Reserved',
    Requested: 'Requested',
    NoShow: 'NoShow',
    Cancelled: 'Cancelled',
    InHouse: 'InHouse',
    CheckedOut: 'CheckedOut',
    Waitlisted: 'Waitlisted',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    Walkin: 'Walkin',
    PendingCheckout: 'PendingCheckout'
};
/**
 * @export
 */
exports.GetCompRoutingInstructionsCompRoutingStatusesEnum = {
    Request: 'Request',
    Comp: 'Comp',
    Declined: 'Declined'
};
/**
 * @export
 */
exports.GetDepositFolioFetchInstructionsEnum = {
    ProjectedRevenue: 'ProjectedRevenue'
};
/**
 * @export
 */
exports.GetFinancialPostingsCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetFinancialPostingsCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetFinancialPostingsProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
};
/**
 * @export
 */
exports.GetFolioFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Windowbalances: 'Windowbalances',
    Payment: 'Payment',
    Payee: 'Payee',
    Account: 'Account',
    Guestpay: 'Guestpay',
    Notifications: 'Notifications',
    Transactioncodes: 'Transactioncodes',
    Foliohistory: 'Foliohistory',
    Totalbalance: 'Totalbalance',
    Postings: 'Postings'
};
/**
 * @export
 */
exports.GetFolioGroupTypeEnum = {
    CheckNo: 'CheckNo',
    TransactionDate: 'TransactionDate',
    TransactionCode: 'TransactionCode',
    TransactionType: 'TransactionType'
};
/**
 * @export
 */
exports.GetFolioPrintersEventTypeEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetFolioPrintersFiscalFolioInstructionEnum = {
    Retry: 'Retry',
    New: 'New',
    Void: 'Void',
    Offline: 'Offline'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoTaxPaymentTypeEnum = {
    Deposit: 'Deposit',
    FrontOffice: 'FrontOffice',
    CreditNote: 'CreditNote',
    CityLedger: 'CityLedger',
    AccountsReceivables: 'AccountsReceivables',
    NonVat: 'NonVat'
};
/**
 * @export
 */
exports.GetFolioTaxPaymentsInfoActionEnum = {
    Billing: 'Billing',
    Settlefolio: 'Settlefolio',
    Deposit: 'Deposit',
    Compredemption: 'Compredemption',
    Prepaidcardredemption: 'Prepaidcardredemption',
    Advancepayment: 'Advancepayment'
};
/**
 * @export
 */
exports.GetFolioTypeNameFolioReportGroupEnum = {
    Guest: 'Guest',
    Group: 'Group',
    AccountsReceivables: 'AccountsReceivables',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    Expense: 'Expense',
    CorrectionHeader: 'CorrectionHeader'
};
/**
 * @export
 */
exports.GetGuestsTransactionsCashieringTransactionTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
};
/**
 * @export
 */
exports.GetGuestsTransactionsPostedTransactionTypeEnum = {
    All: 'All',
    Routed: 'Routed',
    Direct: 'Direct',
    Transferred: 'Transferred',
    Payments: 'Payments',
    NonBilled: 'NonBilled'
};
/**
 * @export
 */
exports.GetPostBillingChargesOptionEnum = {
    PackageAllowance: 'PackageAllowance',
    RoomRouting: 'RoomRouting',
    PostingStatus: 'PostingStatus'
};
/**
 * @export
 */
exports.GetPostingSummaryPostingSummaryTypeEnum = {
    Postings: 'Postings',
    Adjustments: 'Adjustments',
    All: 'All'
};
/**
 * @export
 */
exports.GetPostingsForRefreshColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
};
/**
 * @export
 */
exports.GetRoundingDifferenceEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetRoundingDifferenceCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.GetRoundingDifferenceCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetRoundingDifferenceProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.GetRoundingDifferenceEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetStoredFolioDetailsFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.GetTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
/**
 * @export
 */
exports.GetTransactionCodesTrxServiceTypeEnum = {
    Services: 'Services',
    Goods: 'Goods'
};
/**
 * @export
 */
exports.GetValidateFiscalPrintingDetailsFetchInstructionEnum = {
    Paymentmethod: 'Paymentmethod',
    Profile: 'Profile',
    Foliotype: 'Foliotype',
    Reservation: 'Reservation'
};
/**
 * @export
 */
exports.ValidateTransactionCodesEventEnum = {
    CheckOut: 'CheckOut',
    EarlyDeparture: 'EarlyDeparture',
    AdvanceBill: 'AdvanceBill',
    InterimBill: 'InterimBill',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    CreditBill: 'CreditBill',
    Deposit: 'Deposit',
    DepositRefund: 'DepositRefund',
    AutoFolio: 'AutoFolio',
    PrepaidCard: 'PrepaidCard',
    AutoSettlement: 'AutoSettlement',
    InformationFolio: 'InformationFolio',
    SupplementalFolio: 'SupplementalFolio'
};
/**
 * @export
 */
exports.ValidateTransactionCodesFolioStatusEnum = {
    Deposit: 'Deposit',
    Void: 'Void',
    Ok: 'Ok',
    Zero: 'Zero',
    Compress: 'Compress',
    Converted: 'Converted',
    Internal: 'Internal'
};
