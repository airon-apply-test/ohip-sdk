"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMembershipDetailsModeEnum = exports.ProfileMembershipApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ProfileMembershipApi extends runtime.BaseAPI {
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    async getMembershipDetailsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.operaProfileId) {
            queryParameters['operaProfileId'] = requestParameters.operaProfileId;
        }
        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
            headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/profiles/{externalProfileId}/memberships`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"externalProfileId"}}`, encodeURIComponent(String(requestParameters.externalProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MemberInformationFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    async getMembershipDetails(requestParameters, initOverrides) {
        const response = await this.getMembershipDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    async postEnrollmentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
            headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/chains/{chainCode}/enrollments`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostEnrollmentRequestToJSON)(requestParameters.enrollment),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EnrollmentFromJSON)(jsonValue));
    }
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    async postEnrollment(requestParameters, initOverrides) {
        const response = await this.postEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    async redeemAwardRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
            headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/profiles/{externalProfileId}/profileAwards`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"externalProfileId"}}`, encodeURIComponent(String(requestParameters.externalProfileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.RedeemAwardRequestToJSON)(requestParameters.award),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AwardFromJSON)(jsonValue));
    }
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    async redeemAward(requestParameters, initOverrides) {
        const response = await this.redeemAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ProfileMembershipApi = ProfileMembershipApi;
/**
 * @export
 */
exports.GetMembershipDetailsModeEnum = {
    TransactionDate: 'TransactionDate',
    StayBeginDate: 'StayBeginDate',
    StayEndDate: 'StayEndDate',
    PointsCreditDate: 'PointsCreditDate'
};
