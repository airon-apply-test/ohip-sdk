"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InventoryApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class InventoryApi extends runtime.BaseAPI {
    /**
     * You can use this API to create sell limits in OPERA by date. <p><strong>OperationId:</strong>changeSellLimitByDate</p>
     * Set sell limits by date
     */
    async changeSellLimitByDateRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/sellLimits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeSellLimitByDateRequestToJSON)(requestParameters.sellLimit),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SellLimitResponseFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create sell limits in OPERA by date. <p><strong>OperationId:</strong>changeSellLimitByDate</p>
     * Set sell limits by date
     */
    async changeSellLimitByDate(requestParameters, initOverrides) {
        const response = await this.changeSellLimitByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create sell limits in OPERA by date range. <p><strong>OperationId:</strong>changeSellLimitByDateRange</p>
     * Set sell limits by date range
     */
    async changeSellLimitByDateRangeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/sellLimitsByDateRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeSellLimitByDateRangeRequestToJSON)(requestParameters.sellLimitByRange),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SellLimitByDateResponseFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create sell limits in OPERA by date range. <p><strong>OperationId:</strong>changeSellLimitByDateRange</p>
     * Set sell limits by date range
     */
    async changeSellLimitByDateRange(requestParameters, initOverrides) {
        const response = await this.changeSellLimitByDateRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API facilitates clearing of cache in inventory service <p><strong>OperationId:</strong>deleteInventoryServiceCache</p>
     * Clear Cache
     */
    async deleteInventoryServiceCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/inventory/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API facilitates clearing of cache in inventory service <p><strong>OperationId:</strong>deleteInventoryServiceCache</p>
     * Clear Cache
     */
    async deleteInventoryServiceCache(requestParameters, initOverrides) {
        const response = await this.deleteInventoryServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Fetch item inventory that is currently being held. <p><strong>OperationId:</strong>getHoldItemsInventory</p>
     * Get items inventory that are held
     */
    async getHoldItemsInventoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.itemHoldId) {
            queryParameters['itemHoldId'] = requestParameters.itemHoldId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventoryHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HoldItemsInventoryFromJSON)(jsonValue));
    }
    /**
     * Fetch item inventory that is currently being held. <p><strong>OperationId:</strong>getHoldItemsInventory</p>
     * Get items inventory that are held
     */
    async getHoldItemsInventory(requestParameters, initOverrides) {
        const response = await this.getHoldItemsInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    async getHotelInventoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.dateRangeStart !== undefined) {
            queryParameters['dateRangeStart'] = requestParameters.dateRangeStart.toISOString().substr(0, 10);
        }
        if (requestParameters.dateRangeEnd !== undefined) {
            queryParameters['dateRangeEnd'] = requestParameters.dateRangeEnd.toISOString().substr(0, 10);
        }
        if (requestParameters.roomCountRequested !== undefined) {
            queryParameters['roomCountRequested'] = requestParameters.roomCountRequested;
        }
        if (requestParameters.includeTentativeInventory !== undefined) {
            queryParameters['includeTentativeInventory'] = requestParameters.includeTentativeInventory;
        }
        if (requestParameters.dailyInventory !== undefined) {
            queryParameters['dailyInventory'] = requestParameters.dailyInventory;
        }
        if (requestParameters.houseLevel !== undefined) {
            queryParameters['houseLevel'] = requestParameters.houseLevel;
        }
        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }
        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/hotelInventory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelInventoryFromJSON)(jsonValue));
    }
    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    async getHotelInventory(requestParameters, initOverrides) {
        const response = await this.getHotelInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    async getItemInventoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }
        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }
        if (requestParameters.itemClass !== undefined) {
            queryParameters['itemClass'] = requestParameters.itemClass;
        }
        if (requestParameters.itemPool) {
            queryParameters['itemPool'] = requestParameters.itemPool;
        }
        if (requestParameters.itemCode) {
            queryParameters['itemCode'] = requestParameters.itemCode;
        }
        if (requestParameters.defaultDuration !== undefined) {
            queryParameters['defaultDuration'] = requestParameters.defaultDuration;
        }
        if (requestParameters.fixedCharge !== undefined) {
            queryParameters['fixedCharge'] = requestParameters.fixedCharge;
        }
        if (requestParameters.outsideStay !== undefined) {
            queryParameters['outsideStay'] = requestParameters.outsideStay;
        }
        if (requestParameters.requiredForBooking !== undefined) {
            queryParameters['requiredForBooking'] = requestParameters.requiredForBooking;
        }
        if (requestParameters.sellInEvent !== undefined) {
            queryParameters['sellInEvent'] = requestParameters.sellInEvent;
        }
        if (requestParameters.sellInReservation !== undefined) {
            queryParameters['sellInReservation'] = requestParameters.sellInReservation;
        }
        if (requestParameters.sellSeparate !== undefined) {
            queryParameters['sellSeparate'] = requestParameters.sellSeparate;
        }
        if (requestParameters.welcomeOffer !== undefined) {
            queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ItemInventoryFromJSON)(jsonValue));
    }
    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    async getItemInventory(requestParameters, initOverrides) {
        const response = await this.getItemInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API facilitates status check of inventory service <p><strong>OperationId:</strong>pingInventoryService</p>
     * Ping
     */
    async pingInventoryServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/inventory/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PingDetailFromJSON)(jsonValue));
    }
    /**
     * This API facilitates status check of inventory service <p><strong>OperationId:</strong>pingInventoryService</p>
     * Ping
     */
    async pingInventoryService(requestParameters, initOverrides) {
        const response = await this.pingInventoryServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    async postHoldItemInventoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventoryHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutHoldItemsInventoryRequestToJSON)(requestParameters.holdItemInventory),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    async postHoldItemInventory(requestParameters, initOverrides) {
        const response = await this.postHoldItemInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can update item inventory that is being held using this API. <p><strong>OperationId:</strong>putHoldItemsInventory</p>
     * update items inventory that are held
     */
    async putHoldItemsInventoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventoryHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutHoldItemsInventoryRequestToJSON)(requestParameters.holdItemInventory),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HoldItemInventoryFromJSON)(jsonValue));
    }
    /**
     * You can update item inventory that is being held using this API. <p><strong>OperationId:</strong>putHoldItemsInventory</p>
     * update items inventory that are held
     */
    async putHoldItemsInventory(requestParameters, initOverrides) {
        const response = await this.putHoldItemsInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will release item inventory that has been held. <p><strong>OperationId:</strong>putItemInventoryHold</p>
     * Release item inventory held
     */
    async putItemInventoryHoldRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/releasedItemInventory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutItemInventoryHoldRequestToJSON)(requestParameters.releaseItemInventoryHold),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReleasedItemInventoryHeldFromJSON)(jsonValue));
    }
    /**
     * This API will release item inventory that has been held. <p><strong>OperationId:</strong>putItemInventoryHold</p>
     * Release item inventory held
     */
    async putItemInventoryHold(requestParameters, initOverrides) {
        const response = await this.putItemInventoryHoldRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.InventoryApi = InventoryApi;
