/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Company, Guest, MergeProfilesRequest, PostCompanyProfileRequest, PostGuestProfileRequest, PostProfileRelationshipRequest, PostProfileRequest, Profile, ProfileRelationships, ProfileStayHistory, ProfileSummaries, PutProfileRelationshipRequest, PutProfileRequest, Status, StoreEmailRequest } from '../models';
export interface DeleteProfileRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCompanyProfileRequest {
    corporateID?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetCompanyProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetGuestProfileRequest {
    guestId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetGuestProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetProfileFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileByExtIdRequest {
    profileExternalId?: string;
    extSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    fetchInstructions?: Set<GetProfileByExtIdFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileByExtIdInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileByExtIdAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileRelationshipsRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    relationshipPrimaryProfile?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeInactive?: boolean;
    hotelId?: string;
    includeHasHierarchyOnly?: boolean;
    includePrimaryOwnersOnly?: boolean;
    includePurgeProfiles?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetProfilesSearchTypeEnum;
    summaryInfo?: boolean;
    searchString?: string;
    includeAnonymized?: boolean;
    profileType?: Set<GetProfilesProfileTypeEnum>;
    profileIds?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    corporateIds?: Array<string>;
    profileName?: string;
    givenName?: string;
    incognitoName?: string;
    incognitoGivenName?: string;
    city?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    keyword?: string;
    communication?: string;
    membership?: string;
    membershipType?: string;
    membershipLevel?: string;
    aRNumber?: string;
    businessSegment?: Array<string>;
    accountsReceivables?: boolean;
    corporateProfiles?: boolean;
    excludeIncompleteProfiles?: boolean;
    negotiatedRates?: boolean;
    relatedProfileExcludeInactive?: boolean;
    realtedProfileIncludeHasHierarchyOnly?: boolean;
    relatedProfileNegotiatedRates?: boolean;
    relatedProfileType?: GetProfilesRelatedProfileTypeEnum;
    relatedProfileName?: string;
    protectedProfiles?: boolean;
    identificationNo?: string;
    fetchInstructions?: Set<GetProfilesFetchInstructionsEnum>;
    allowedAction?: Set<GetProfilesAllowedActionEnum>;
    vipCodes?: Array<string>;
    predefinedFilterId?: number;
    predefinedFilterCode?: string;
    prioritieCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStayHistoryRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    includePurgeProfiles?: boolean;
    markAsRecentlyAccessed?: boolean;
    limit?: Array<number>;
    fetchInstructions?: Set<GetStayHistoryFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface MergeProfilesOperationRequest {
    survivorProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileToBeMerged?: MergeProfilesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCompanyProfileOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    company?: PostCompanyProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostGuestProfileOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guest?: PostGuestProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile?: PostProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileRelationshipOperationRequest {
    targetProfileId?: string;
    sourceProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationship?: PostProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutProfileOperationRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile?: PutProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutProfileRelationshipOperationRequest {
    targetProfileId?: string;
    sourceProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationshipToBeChanged?: PutProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveProfileRelationshipRequest {
    targetProfileId?: string;
    sourceProfileId?: string;
    sourceRelation?: string;
    targetRelation?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    primary?: boolean;
    sourceRelationDescription?: string;
    targetRelationDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface StoreEmailOperationRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    emailMessageType?: StoreEmailRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ProfileApi extends runtime.BaseAPI {
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    deleteProfileRaw(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    deleteProfile(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    getCompanyProfileRaw(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>>;
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    getCompanyProfile(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company>;
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don’t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    getGuestProfileRaw(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Guest>>;
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don’t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    getGuestProfile(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Guest>;
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    getProfileByExtIdRaw(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    getProfileByExtId(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    getProfileRelationshipsRaw(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRelationships>>;
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    getProfileRelationships(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRelationships>;
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    getProfilesRaw(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileSummaries>>;
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    getProfiles(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileSummaries>;
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    getStayHistoryRaw(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileStayHistory>>;
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    getStayHistory(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileStayHistory>;
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    mergeProfilesRaw(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    mergeProfiles(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    postCompanyProfileRaw(requestParameters: PostCompanyProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    postCompanyProfile(requestParameters: PostCompanyProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    postGuestProfileRaw(requestParameters: PostGuestProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    postGuestProfile(requestParameters: PostGuestProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    postProfileRaw(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    postProfile(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    postProfileRelationshipRaw(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    postProfileRelationship(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    putProfileRaw(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    putProfile(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    putProfileRelationshipRaw(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    putProfileRelationship(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    removeProfileRelationshipRaw(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    removeProfileRelationship(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    storeEmailRaw(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    storeEmail(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetCompanyProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
};
export type GetCompanyProfileFetchInstructionsEnum = typeof GetCompanyProfileFetchInstructionsEnum[keyof typeof GetCompanyProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetGuestProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetGuestProfileFetchInstructionsEnum = typeof GetGuestProfileFetchInstructionsEnum[keyof typeof GetGuestProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly Subscriptions: "Subscriptions";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetProfileFetchInstructionsEnum = typeof GetProfileFetchInstructionsEnum[keyof typeof GetProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfileInstructionParameterTypeEnum: {
    readonly NegotiatedRateShowInactive: "NegotiatedRateShowInactive";
    readonly NegotiatedRateResort: "NegotiatedRateResort";
    readonly NegotiatedRateMaxFetchCount: "NegotiatedRateMaxFetchCount";
    readonly NegotiatedRateCode: "NegotiatedRateCode";
    readonly GdsNegotiatedRateShowInactive: "GdsNegotiatedRateShowInactive";
    readonly PreferencesShowInactive: "PreferencesShowInactive";
    readonly ResortForRoutingInstructions: "ResortForRoutingInstructions";
    readonly RelationshipPrimaryProfile: "RelationshipPrimaryProfile";
    readonly AddressPrimaryOnly: "AddressPrimaryOnly";
    readonly CommunicationPrimaryOnly: "CommunicationPrimaryOnly";
    readonly DeliveryMethodsHotelCode: "DeliveryMethodsHotelCode";
};
export type GetProfileInstructionParameterTypeEnum = typeof GetProfileInstructionParameterTypeEnum[keyof typeof GetProfileInstructionParameterTypeEnum];
/**
 * @export
 */
export declare const GetProfileAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfileAllowedActionEnum = typeof GetProfileAllowedActionEnum[keyof typeof GetProfileAllowedActionEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly Subscriptions: "Subscriptions";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetProfileByExtIdFetchInstructionsEnum = typeof GetProfileByExtIdFetchInstructionsEnum[keyof typeof GetProfileByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdInstructionParameterTypeEnum: {
    readonly NegotiatedRateShowInactive: "NegotiatedRateShowInactive";
    readonly NegotiatedRateResort: "NegotiatedRateResort";
    readonly NegotiatedRateMaxFetchCount: "NegotiatedRateMaxFetchCount";
    readonly NegotiatedRateCode: "NegotiatedRateCode";
    readonly GdsNegotiatedRateShowInactive: "GdsNegotiatedRateShowInactive";
    readonly PreferencesShowInactive: "PreferencesShowInactive";
    readonly ResortForRoutingInstructions: "ResortForRoutingInstructions";
    readonly RelationshipPrimaryProfile: "RelationshipPrimaryProfile";
    readonly AddressPrimaryOnly: "AddressPrimaryOnly";
    readonly CommunicationPrimaryOnly: "CommunicationPrimaryOnly";
    readonly DeliveryMethodsHotelCode: "DeliveryMethodsHotelCode";
};
export type GetProfileByExtIdInstructionParameterTypeEnum = typeof GetProfileByExtIdInstructionParameterTypeEnum[keyof typeof GetProfileByExtIdInstructionParameterTypeEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfileByExtIdAllowedActionEnum = typeof GetProfileByExtIdAllowedActionEnum[keyof typeof GetProfileByExtIdAllowedActionEnum];
/**
 * @export
 */
export declare const GetProfilesSearchTypeEnum: {
    readonly PurgeableProfiles: "PurgeableProfiles";
    readonly Any: "Any";
    readonly PatronTrackingSystemMemberProfiles: "PatronTrackingSystemMemberProfiles";
};
export type GetProfilesSearchTypeEnum = typeof GetProfilesSearchTypeEnum[keyof typeof GetProfilesSearchTypeEnum];
/**
 * @export
 */
export declare const GetProfilesProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetProfilesProfileTypeEnum = typeof GetProfilesProfileTypeEnum[keyof typeof GetProfilesProfileTypeEnum];
/**
 * @export
 */
export declare const GetProfilesRelatedProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetProfilesRelatedProfileTypeEnum = typeof GetProfilesRelatedProfileTypeEnum[keyof typeof GetProfilesRelatedProfileTypeEnum];
/**
 * @export
 */
export declare const GetProfilesFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly Relationship: "Relationship";
    readonly Correspondence: "Correspondence";
    readonly Routing: "Routing";
    readonly Indicators: "Indicators";
    readonly Profile: "Profile";
    readonly WebUserAccount: "WebUserAccount";
    readonly SalesInfo: "SalesInfo";
    readonly ECertificate: "ECertificate";
    readonly Subscriptions: "Subscriptions";
    readonly PrimaryAccountInfo: "PrimaryAccountInfo";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly RoomOwnership: "RoomOwnership";
};
export type GetProfilesFetchInstructionsEnum = typeof GetProfilesFetchInstructionsEnum[keyof typeof GetProfilesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfilesAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfilesAllowedActionEnum = typeof GetProfilesAllowedActionEnum[keyof typeof GetProfilesAllowedActionEnum];
/**
 * @export
 */
export declare const GetStayHistoryFetchInstructionsEnum: {
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
};
export type GetStayHistoryFetchInstructionsEnum = typeof GetStayHistoryFetchInstructionsEnum[keyof typeof GetStayHistoryFetchInstructionsEnum];
