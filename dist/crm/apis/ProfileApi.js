"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStayHistoryFetchInstructionsEnum = exports.GetProfilesAllowedActionEnum = exports.GetProfilesFetchInstructionsEnum = exports.GetProfilesRelatedProfileTypeEnum = exports.GetProfilesProfileTypeEnum = exports.GetProfilesSearchTypeEnum = exports.GetProfileByExtIdAllowedActionEnum = exports.GetProfileByExtIdInstructionParameterTypeEnum = exports.GetProfileByExtIdFetchInstructionsEnum = exports.GetProfileAllowedActionEnum = exports.GetProfileInstructionParameterTypeEnum = exports.GetProfileFetchInstructionsEnum = exports.GetGuestProfileFetchInstructionsEnum = exports.GetCompanyProfileFetchInstructionsEnum = exports.ProfileApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ProfileApi extends runtime.BaseAPI {
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    async deleteProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    async deleteProfile(requestParameters, initOverrides) {
        const response = await this.deleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    async getCompanyProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/companies/{corporateID}`.replace(`{${"corporateID"}}`, encodeURIComponent(String(requestParameters.corporateID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CompanyFromJSON)(jsonValue));
    }
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    async getCompanyProfile(requestParameters, initOverrides) {
        const response = await this.getCompanyProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you donâ€™t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    async getGuestProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/guests/{guestId}`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GuestFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you donâ€™t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    async getGuestProfile(requestParameters, initOverrides) {
        const response = await this.getGuestProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    async getProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.logViewProfile !== undefined) {
            queryParameters['logViewProfile'] = requestParameters.logViewProfile;
        }
        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }
        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.instructionParameterType) {
            queryParameters['instructionParameterType'] = requestParameters.instructionParameterType;
        }
        if (requestParameters.value) {
            queryParameters['value'] = requestParameters.value;
        }
        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileFromJSON)(jsonValue));
    }
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    async getProfile(requestParameters, initOverrides) {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    async getProfileByExtIdRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.logViewProfile !== undefined) {
            queryParameters['logViewProfile'] = requestParameters.logViewProfile;
        }
        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.instructionParameterType) {
            queryParameters['instructionParameterType'] = requestParameters.instructionParameterType;
        }
        if (requestParameters.value) {
            queryParameters['value'] = requestParameters.value;
        }
        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/profiles/{profileExternalId}`.replace(`{${"profileExternalId"}}`, encodeURIComponent(String(requestParameters.profileExternalId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileFromJSON)(jsonValue));
    }
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    async getProfileByExtId(requestParameters, initOverrides) {
        const response = await this.getProfileByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    async getProfileRelationshipsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.relationshipPrimaryProfile !== undefined) {
            queryParameters['relationshipPrimaryProfile'] = requestParameters.relationshipPrimaryProfile;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}/relationships`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileRelationshipsFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    async getProfileRelationships(requestParameters, initOverrides) {
        const response = await this.getProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    async getProfilesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.excludeInactive !== undefined) {
            queryParameters['excludeInactive'] = requestParameters.excludeInactive;
        }
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.includeHasHierarchyOnly !== undefined) {
            queryParameters['includeHasHierarchyOnly'] = requestParameters.includeHasHierarchyOnly;
        }
        if (requestParameters.includePrimaryOwnersOnly !== undefined) {
            queryParameters['includePrimaryOwnersOnly'] = requestParameters.includePrimaryOwnersOnly;
        }
        if (requestParameters.includePurgeProfiles !== undefined) {
            queryParameters['includePurgeProfiles'] = requestParameters.includePurgeProfiles;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }
        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }
        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }
        if (requestParameters.includeAnonymized !== undefined) {
            queryParameters['includeAnonymized'] = requestParameters.includeAnonymized;
        }
        if (requestParameters.profileType) {
            queryParameters['profileType'] = requestParameters.profileType;
        }
        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }
        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }
        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }
        if (requestParameters.corporateIds) {
            queryParameters['corporateIds'] = requestParameters.corporateIds;
        }
        if (requestParameters.profileName !== undefined) {
            queryParameters['profileName'] = requestParameters.profileName;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.incognitoName !== undefined) {
            queryParameters['incognitoName'] = requestParameters.incognitoName;
        }
        if (requestParameters.incognitoGivenName !== undefined) {
            queryParameters['incognitoGivenName'] = requestParameters.incognitoGivenName;
        }
        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }
        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }
        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }
        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }
        if (requestParameters.streetAddress !== undefined) {
            queryParameters['streetAddress'] = requestParameters.streetAddress;
        }
        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }
        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }
        if (requestParameters.membership !== undefined) {
            queryParameters['membership'] = requestParameters.membership;
        }
        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }
        if (requestParameters.aRNumber !== undefined) {
            queryParameters['aRNumber'] = requestParameters.aRNumber;
        }
        if (requestParameters.businessSegment) {
            queryParameters['businessSegment'] = requestParameters.businessSegment;
        }
        if (requestParameters.accountsReceivables !== undefined) {
            queryParameters['accountsReceivables'] = requestParameters.accountsReceivables;
        }
        if (requestParameters.corporateProfiles !== undefined) {
            queryParameters['corporateProfiles'] = requestParameters.corporateProfiles;
        }
        if (requestParameters.excludeIncompleteProfiles !== undefined) {
            queryParameters['excludeIncompleteProfiles'] = requestParameters.excludeIncompleteProfiles;
        }
        if (requestParameters.negotiatedRates !== undefined) {
            queryParameters['negotiatedRates'] = requestParameters.negotiatedRates;
        }
        if (requestParameters.relatedProfileExcludeInactive !== undefined) {
            queryParameters['relatedProfileExcludeInactive'] = requestParameters.relatedProfileExcludeInactive;
        }
        if (requestParameters.realtedProfileIncludeHasHierarchyOnly !== undefined) {
            queryParameters['realtedProfileIncludeHasHierarchyOnly'] = requestParameters.realtedProfileIncludeHasHierarchyOnly;
        }
        if (requestParameters.relatedProfileNegotiatedRates !== undefined) {
            queryParameters['relatedProfileNegotiatedRates'] = requestParameters.relatedProfileNegotiatedRates;
        }
        if (requestParameters.relatedProfileType !== undefined) {
            queryParameters['relatedProfileType'] = requestParameters.relatedProfileType;
        }
        if (requestParameters.relatedProfileName !== undefined) {
            queryParameters['relatedProfileName'] = requestParameters.relatedProfileName;
        }
        if (requestParameters.protectedProfiles !== undefined) {
            queryParameters['protectedProfiles'] = requestParameters.protectedProfiles;
        }
        if (requestParameters.identificationNo !== undefined) {
            queryParameters['identificationNo'] = requestParameters.identificationNo;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }
        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }
        if (requestParameters.predefinedFilterId !== undefined) {
            queryParameters['predefinedFilterId'] = requestParameters.predefinedFilterId;
        }
        if (requestParameters.predefinedFilterCode !== undefined) {
            queryParameters['predefinedFilterCode'] = requestParameters.predefinedFilterCode;
        }
        if (requestParameters.prioritieCodes) {
            queryParameters['prioritieCodes'] = requestParameters.prioritieCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileSummariesFromJSON)(jsonValue));
    }
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    async getProfiles(requestParameters, initOverrides) {
        const response = await this.getProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    async getStayHistoryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.includePurgeProfiles !== undefined) {
            queryParameters['includePurgeProfiles'] = requestParameters.includePurgeProfiles;
        }
        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }
        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}/stayHistory`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileStayHistoryFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    async getStayHistory(requestParameters, initOverrides) {
        const response = await this.getStayHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    async mergeProfilesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{survivorProfileId}/merges`.replace(`{${"survivorProfileId"}}`, encodeURIComponent(String(requestParameters.survivorProfileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.MergeProfilesRequestToJSON)(requestParameters.profileToBeMerged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    async mergeProfiles(requestParameters, initOverrides) {
        const response = await this.mergeProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    async postCompanyProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCompanyProfileRequestToJSON)(requestParameters.company),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    async postCompanyProfile(requestParameters, initOverrides) {
        const response = await this.postCompanyProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    async postGuestProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/guests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostGuestProfileRequestToJSON)(requestParameters.guest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    async postGuestProfile(requestParameters, initOverrides) {
        const response = await this.postGuestProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    async postProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostProfileRequestToJSON)(requestParameters.profile),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    async postProfile(requestParameters, initOverrides) {
        const response = await this.postProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async postProfileRelationshipRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostProfileRelationshipRequestToJSON)(requestParameters.profileRelationship),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async postProfileRelationship(requestParameters, initOverrides) {
        const response = await this.postProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    async putProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileRequestToJSON)(requestParameters.profile),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileFromJSON)(jsonValue));
    }
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    async putProfile(requestParameters, initOverrides) {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    async putProfileRelationshipRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileRelationshipRequestToJSON)(requestParameters.profileRelationshipToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    async putProfileRelationship(requestParameters, initOverrides) {
        const response = await this.putProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async removeProfileRelationshipRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.sourceRelation !== undefined) {
            queryParameters['sourceRelation'] = requestParameters.sourceRelation;
        }
        if (requestParameters.targetRelation !== undefined) {
            queryParameters['targetRelation'] = requestParameters.targetRelation;
        }
        if (requestParameters.primary !== undefined) {
            queryParameters['primary'] = requestParameters.primary;
        }
        if (requestParameters.sourceRelationDescription !== undefined) {
            queryParameters['sourceRelationDescription'] = requestParameters.sourceRelationDescription;
        }
        if (requestParameters.targetRelationDescription !== undefined) {
            queryParameters['targetRelationDescription'] = requestParameters.targetRelationDescription;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async removeProfileRelationship(requestParameters, initOverrides) {
        const response = await this.removeProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    async storeEmailRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}/emails`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.StoreEmailRequestToJSON)(requestParameters.emailMessageType),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    async storeEmail(requestParameters, initOverrides) {
        const response = await this.storeEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ProfileApi = ProfileApi;
/**
 * @export
 */
exports.GetCompanyProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship'
};
/**
 * @export
 */
exports.GetGuestProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    WebUserAccount: 'WebUserAccount'
};
/**
 * @export
 */
exports.GetProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    Subscriptions: 'Subscriptions',
    DeliveryMethods: 'DeliveryMethods',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    NegotiatedRate: 'NegotiatedRate',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    WebUserAccount: 'WebUserAccount'
};
/**
 * @export
 */
exports.GetProfileInstructionParameterTypeEnum = {
    NegotiatedRateShowInactive: 'NegotiatedRateShowInactive',
    NegotiatedRateResort: 'NegotiatedRateResort',
    NegotiatedRateMaxFetchCount: 'NegotiatedRateMaxFetchCount',
    NegotiatedRateCode: 'NegotiatedRateCode',
    GdsNegotiatedRateShowInactive: 'GdsNegotiatedRateShowInactive',
    PreferencesShowInactive: 'PreferencesShowInactive',
    ResortForRoutingInstructions: 'ResortForRoutingInstructions',
    RelationshipPrimaryProfile: 'RelationshipPrimaryProfile',
    AddressPrimaryOnly: 'AddressPrimaryOnly',
    CommunicationPrimaryOnly: 'CommunicationPrimaryOnly',
    DeliveryMethodsHotelCode: 'DeliveryMethodsHotelCode'
};
/**
 * @export
 */
exports.GetProfileAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
};
/**
 * @export
 */
exports.GetProfileByExtIdFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    Subscriptions: 'Subscriptions',
    DeliveryMethods: 'DeliveryMethods',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    NegotiatedRate: 'NegotiatedRate',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    WebUserAccount: 'WebUserAccount'
};
/**
 * @export
 */
exports.GetProfileByExtIdInstructionParameterTypeEnum = {
    NegotiatedRateShowInactive: 'NegotiatedRateShowInactive',
    NegotiatedRateResort: 'NegotiatedRateResort',
    NegotiatedRateMaxFetchCount: 'NegotiatedRateMaxFetchCount',
    NegotiatedRateCode: 'NegotiatedRateCode',
    GdsNegotiatedRateShowInactive: 'GdsNegotiatedRateShowInactive',
    PreferencesShowInactive: 'PreferencesShowInactive',
    ResortForRoutingInstructions: 'ResortForRoutingInstructions',
    RelationshipPrimaryProfile: 'RelationshipPrimaryProfile',
    AddressPrimaryOnly: 'AddressPrimaryOnly',
    CommunicationPrimaryOnly: 'CommunicationPrimaryOnly',
    DeliveryMethodsHotelCode: 'DeliveryMethodsHotelCode'
};
/**
 * @export
 */
exports.GetProfileByExtIdAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
};
/**
 * @export
 */
exports.GetProfilesSearchTypeEnum = {
    PurgeableProfiles: 'PurgeableProfiles',
    Any: 'Any',
    PatronTrackingSystemMemberProfiles: 'PatronTrackingSystemMemberProfiles'
};
/**
 * @export
 */
exports.GetProfilesProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
};
/**
 * @export
 */
exports.GetProfilesRelatedProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
};
/**
 * @export
 */
exports.GetProfilesFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    NegotiatedRate: 'NegotiatedRate',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    Relationship: 'Relationship',
    Correspondence: 'Correspondence',
    Routing: 'Routing',
    Indicators: 'Indicators',
    Profile: 'Profile',
    WebUserAccount: 'WebUserAccount',
    SalesInfo: 'SalesInfo',
    ECertificate: 'ECertificate',
    Subscriptions: 'Subscriptions',
    PrimaryAccountInfo: 'PrimaryAccountInfo',
    DeliveryMethods: 'DeliveryMethods',
    RoomOwnership: 'RoomOwnership'
};
/**
 * @export
 */
exports.GetProfilesAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
};
/**
 * @export
 */
exports.GetStayHistoryFetchInstructionsEnum = {
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation'
};
