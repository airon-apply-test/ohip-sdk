/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ConversionCodeMasterType } from './ConversionCodeMasterType';
/**
 * A common type contains basic information about Conversion Code.
 * @export
 * @interface ConversionCodeType
 */
export interface ConversionCodeType {
    /**
     * Hotel Code of the Property.
     * @type {string}
     * @memberof ConversionCodeType
     */
    hotelId?: string;
    /**
     * Identifier of the Interface.
     * @type {string}
     * @memberof ConversionCodeType
     */
    interfaceId?: string;
    /**
     * Type of Conversion Code or user-defined function (UDF) module name configured in the system.
     * @type {string}
     * @memberof ConversionCodeType
     */
    conversionCode?: string;
    /**
     * A flag that is true if the conversion code is an user-defined function (UDF) module code.
     * @type {boolean}
     * @memberof ConversionCodeType
     */
    uDFCode?: boolean;
    /**
     * Label of the Conversion Code that is displayed in UI.
     * @type {string}
     * @memberof ConversionCodeType
     */
    label?: string;
    /**
     * Description of the Conversion Code.
     * @type {string}
     * @memberof ConversionCodeType
     */
    description?: string;
    /**
     * A field that distinguishes active and inactive Conversion Codes.
     * @type {boolean}
     * @memberof ConversionCodeType
     */
    active?: boolean;
    /**
     * XML Types for the Conversion Code.
     * @type {string}
     * @memberof ConversionCodeType
     */
    group?: string;
    /**
     *
     * @type {ConversionCodeMasterType}
     * @memberof ConversionCodeType
     */
    master?: ConversionCodeMasterType;
}
/**
 * Check if a given object implements the ConversionCodeType interface.
 */
export declare function instanceOfConversionCodeType(value: object): boolean;
export declare function ConversionCodeTypeFromJSON(json: any): ConversionCodeType;
export declare function ConversionCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversionCodeType;
export declare function ConversionCodeTypeToJSON(value?: ConversionCodeType | null): any;
