"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationMethodEditTypeToJSON = exports.CommunicationMethodEditTypeFromJSONTyped = exports.CommunicationMethodEditTypeFromJSON = exports.instanceOfCommunicationMethodEditType = void 0;
const runtime_1 = require("../runtime");
const CommunicationMethodType_1 = require("./CommunicationMethodType");
const CommunicationType_1 = require("./CommunicationType");
/**
 * Check if a given object implements the CommunicationMethodEditType interface.
 */
function instanceOfCommunicationMethodEditType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCommunicationMethodEditType = instanceOfCommunicationMethodEditType;
function CommunicationMethodEditTypeFromJSON(json) {
    return CommunicationMethodEditTypeFromJSONTyped(json, false);
}
exports.CommunicationMethodEditTypeFromJSON = CommunicationMethodEditTypeFromJSON;
function CommunicationMethodEditTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : json['interfaceId'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'communicationType': !(0, runtime_1.exists)(json, 'communicationType') ? undefined : (0, CommunicationType_1.CommunicationTypeFromJSON)(json['communicationType']),
        'communicationFlow': !(0, runtime_1.exists)(json, 'communicationFlow') ? undefined : json['communicationFlow'],
        'newMethod': !(0, runtime_1.exists)(json, 'newMethod') ? undefined : (0, CommunicationMethodType_1.CommunicationMethodTypeFromJSON)(json['newMethod']),
    };
}
exports.CommunicationMethodEditTypeFromJSONTyped = CommunicationMethodEditTypeFromJSONTyped;
function CommunicationMethodEditTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'interfaceId': value.interfaceId,
        'hotelId': value.hotelId,
        'communicationType': (0, CommunicationType_1.CommunicationTypeToJSON)(value.communicationType),
        'communicationFlow': value.communicationFlow,
        'newMethod': (0, CommunicationMethodType_1.CommunicationMethodTypeToJSON)(value.newMethod),
    };
}
exports.CommunicationMethodEditTypeToJSON = CommunicationMethodEditTypeToJSON;
