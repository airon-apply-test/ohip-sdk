/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ApplicationSettingConversionType } from './ApplicationSettingConversionType';
import type { ApplicationSettingLevelType } from './ApplicationSettingLevelType';
import type { ApplicationSettingTypeType } from './ApplicationSettingTypeType';
import type { BaseApplicationSettingType } from './BaseApplicationSettingType';
/**
 * Internal settings that can be of a certain valueType.
 * @export
 * @interface InterfaceControlType
 */
export interface InterfaceControlType {
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    description?: string;
    /**
     * A flag which indicate whether a wild card search should be made.
     * @type {boolean}
     * @memberof InterfaceControlType
     */
    wildCardMatch?: boolean;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    displayName?: string;
    /**
     *
     * @type {ApplicationSettingTypeType}
     * @memberof InterfaceControlType
     */
    type?: ApplicationSettingTypeType;
    /**
     * Each configuration item will come with a HotelCode which will help the configuration to specify what context the update has to be. Eg. _Global,ORS,'CRO', etc.
     * @type {string}
     * @memberof InterfaceControlType
     */
    hotelId?: string;
    /**
     *
     * @type {number}
     * @memberof InterfaceControlType
     */
    sequence?: number;
    /**
     *
     * @type {boolean}
     * @memberof InterfaceControlType
     */
    editAllowed?: boolean;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    scope?: InterfaceControlTypeScopeEnum;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    valueType?: InterfaceControlTypeValueTypeEnum;
    /**
     *
     * @type {ApplicationSettingConversionType}
     * @memberof InterfaceControlType
     */
    conversionType?: ApplicationSettingConversionType;
    /**
     * Indicator if the function does not count against the OPERA Control function count limit or not
     * @type {boolean}
     * @memberof InterfaceControlType
     */
    subscriptionCountEligible?: boolean;
    /**
     *
     * @type {Array<BaseApplicationSettingType>}
     * @memberof InterfaceControlType
     */
    settings?: Array<BaseApplicationSettingType>;
    /**
     *
     * @type {ApplicationSettingLevelType}
     * @memberof InterfaceControlType
     */
    levelType?: ApplicationSettingLevelType;
    /**
     *
     * @type {string}
     * @memberof InterfaceControlType
     */
    levelCode?: string;
    /**
     * Identifier of the Interface.
     * @type {string}
     * @memberof InterfaceControlType
     */
    interfaceId?: string;
    /**
     * Flag indicating to use global inbound/outbound value for conversion code.
     * @type {boolean}
     * @memberof InterfaceControlType
     */
    useGlobal?: boolean;
    /**
     * V5 parameter group.
     * @type {string}
     * @memberof InterfaceControlType
     */
    oxiParameterGroup?: string;
}
/**
 * @export
 */
export declare const InterfaceControlTypeScopeEnum: {
    readonly P: "P";
    readonly G: "G";
    readonly Ch: "Ch";
    readonly C: "C";
};
export type InterfaceControlTypeScopeEnum = typeof InterfaceControlTypeScopeEnum[keyof typeof InterfaceControlTypeScopeEnum];
/**
 * @export
 */
export declare const InterfaceControlTypeValueTypeEnum: {
    readonly Yn: "Yn";
    readonly Integer: "Integer";
    readonly String: "String";
    readonly SingleSelectLov: "SingleSelectLov";
    readonly MultiSelectLov: "MultiSelectLov";
    readonly ShuttleLov: "ShuttleLov";
    readonly Custom: "Custom";
    readonly Double: "Double";
    readonly Secure: "Secure";
};
export type InterfaceControlTypeValueTypeEnum = typeof InterfaceControlTypeValueTypeEnum[keyof typeof InterfaceControlTypeValueTypeEnum];
/**
 * Check if a given object implements the InterfaceControlType interface.
 */
export declare function instanceOfInterfaceControlType(value: object): boolean;
export declare function InterfaceControlTypeFromJSON(json: any): InterfaceControlType;
export declare function InterfaceControlTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceControlType;
export declare function InterfaceControlTypeToJSON(value?: InterfaceControlType | null): any;
