"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceSetupXMLVersionTypeToJSON = exports.InterfaceSetupXMLVersionTypeFromJSONTyped = exports.InterfaceSetupXMLVersionTypeFromJSON = exports.instanceOfInterfaceSetupXMLVersionType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the InterfaceSetupXMLVersionType interface.
 */
function instanceOfInterfaceSetupXMLVersionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfInterfaceSetupXMLVersionType = instanceOfInterfaceSetupXMLVersionType;
function InterfaceSetupXMLVersionTypeFromJSON(json) {
    return InterfaceSetupXMLVersionTypeFromJSONTyped(json, false);
}
exports.InterfaceSetupXMLVersionTypeFromJSON = InterfaceSetupXMLVersionTypeFromJSON;
function InterfaceSetupXMLVersionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'xMLType': !(0, runtime_1.exists)(json, 'xMLType') ? undefined : json['xMLType'],
        'maximumVersion': !(0, runtime_1.exists)(json, 'maximumVersion') ? undefined : json['maximumVersion'],
        'version': !(0, runtime_1.exists)(json, 'version') ? undefined : json['version'],
    };
}
exports.InterfaceSetupXMLVersionTypeFromJSONTyped = InterfaceSetupXMLVersionTypeFromJSONTyped;
function InterfaceSetupXMLVersionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'xMLType': value.xMLType,
        'maximumVersion': value.maximumVersion,
        'version': value.version,
    };
}
exports.InterfaceSetupXMLVersionTypeToJSON = InterfaceSetupXMLVersionTypeToJSON;
