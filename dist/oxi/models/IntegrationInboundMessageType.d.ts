/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { UniqueIDType } from './UniqueIDType';
import type { WarningType } from './WarningType';
/**
 * Elements that uniquely identifies inbound message
 * @export
 * @interface IntegrationInboundMessageType
 */
export interface IntegrationInboundMessageType {
    /**
     *
     * @type {UniqueIDType}
     * @memberof IntegrationInboundMessageType
     */
    messageId?: UniqueIDType;
    /**
     * TimeStamp of enqueue of message in OXI Monitoring tables (Inbound/Outbound).
     * @type {Date}
     * @memberof IntegrationInboundMessageType
     */
    enqueueTime?: Date;
    /**
     * TimeStamp of dequeue of message from OXI Monitoring tables (Inbound/Outbound).
     * @type {Date}
     * @memberof IntegrationInboundMessageType
     */
    dequeueTime?: Date;
    /**
     * The interface this message was created for
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    _interface?: string;
    /**
     * This identifies the kind of message sent (e.g., reservation, profile, rate, block, rate restriction, inventory, and result)
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    messageType?: string;
    /**
     * Property this message was sent from.
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    hotelId?: string;
    /**
     * Status of the transmitted message.
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    messageStatus?: string;
    /**
     * Flag that tells whether the message is marked as reviewed or not
     * @type {boolean}
     * @memberof IntegrationInboundMessageType
     */
    reviewed?: boolean;
    /**
     * Integration message reference
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    messageReference?: string;
    /**
     * Information that was obtained in a message such as guest last/first name from a reservation message or block code from a block message.
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    messagePrimayInfo?: string;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof IntegrationInboundMessageType
     */
    notices?: Array<WarningType>;
    /**
     * Flag that tells whether the message has attachments or not
     * @type {boolean}
     * @memberof IntegrationInboundMessageType
     */
    attachmentExists?: boolean;
    /**
     * Status of the transmitted message.
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    processStatus?: string;
    /**
     * Shows whether the processing of this message was retried and how many times.
     * @type {number}
     * @memberof IntegrationInboundMessageType
     */
    retryCount?: number;
    /**
     * Populated if external message key is available
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    externalMessageKey?: string;
    /**
     * External system hotel code
     * @type {string}
     * @memberof IntegrationInboundMessageType
     */
    externalHotelCode?: string;
}
/**
 * Check if a given object implements the IntegrationInboundMessageType interface.
 */
export declare function instanceOfIntegrationInboundMessageType(value: object): boolean;
export declare function IntegrationInboundMessageTypeFromJSON(json: any): IntegrationInboundMessageType;
export declare function IntegrationInboundMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationInboundMessageType;
export declare function IntegrationInboundMessageTypeToJSON(value?: IntegrationInboundMessageType | null): any;
