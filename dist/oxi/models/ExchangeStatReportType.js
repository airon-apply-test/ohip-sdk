"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangeStatReportTypeToJSON = exports.ExchangeStatReportTypeFromJSONTyped = exports.ExchangeStatReportTypeFromJSON = exports.instanceOfExchangeStatReportType = void 0;
const runtime_1 = require("../runtime");
const ExchangeStatReportCodeType_1 = require("./ExchangeStatReportCodeType");
const ExchangeStatType_1 = require("./ExchangeStatType");
/**
 * Check if a given object implements the ExchangeStatReportType interface.
 */
function instanceOfExchangeStatReportType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExchangeStatReportType = instanceOfExchangeStatReportType;
function ExchangeStatReportTypeFromJSON(json) {
    return ExchangeStatReportTypeFromJSONTyped(json, false);
}
exports.ExchangeStatReportTypeFromJSON = ExchangeStatReportTypeFromJSON;
function ExchangeStatReportTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'stat': !(0, runtime_1.exists)(json, 'stat') ? undefined : (json['stat'].map(ExchangeStatType_1.ExchangeStatTypeFromJSON)),
        'reportCode': !(0, runtime_1.exists)(json, 'reportCode') ? undefined : (0, ExchangeStatReportCodeType_1.ExchangeStatReportCodeTypeFromJSON)(json['reportCode']),
        'start': !(0, runtime_1.exists)(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !(0, runtime_1.exists)(json, 'end') ? undefined : (new Date(json['end'])),
    };
}
exports.ExchangeStatReportTypeFromJSONTyped = ExchangeStatReportTypeFromJSONTyped;
function ExchangeStatReportTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'stat': value.stat === undefined ? undefined : (value.stat.map(ExchangeStatType_1.ExchangeStatTypeToJSON)),
        'reportCode': (0, ExchangeStatReportCodeType_1.ExchangeStatReportCodeTypeToJSON)(value.reportCode),
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0, 10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0, 10)),
    };
}
exports.ExchangeStatReportTypeToJSON = ExchangeStatReportTypeToJSON;
