"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceControlTypeToJSON = exports.InterfaceControlTypeFromJSONTyped = exports.InterfaceControlTypeFromJSON = exports.instanceOfInterfaceControlType = exports.InterfaceControlTypeValueTypeEnum = exports.InterfaceControlTypeScopeEnum = void 0;
const runtime_1 = require("../runtime");
const ApplicationSettingConversionType_1 = require("./ApplicationSettingConversionType");
const ApplicationSettingLevelType_1 = require("./ApplicationSettingLevelType");
const ApplicationSettingTypeType_1 = require("./ApplicationSettingTypeType");
const BaseApplicationSettingType_1 = require("./BaseApplicationSettingType");
/**
 * @export
 */
exports.InterfaceControlTypeScopeEnum = {
    P: 'P',
    G: 'G',
    Ch: 'Ch',
    C: 'C'
};
/**
 * @export
 */
exports.InterfaceControlTypeValueTypeEnum = {
    Yn: 'Yn',
    Integer: 'Integer',
    String: 'String',
    SingleSelectLov: 'SingleSelectLov',
    MultiSelectLov: 'MultiSelectLov',
    ShuttleLov: 'ShuttleLov',
    Custom: 'Custom',
    Double: 'Double',
    Secure: 'Secure'
};
/**
 * Check if a given object implements the InterfaceControlType interface.
 */
function instanceOfInterfaceControlType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfInterfaceControlType = instanceOfInterfaceControlType;
function InterfaceControlTypeFromJSON(json) {
    return InterfaceControlTypeFromJSONTyped(json, false);
}
exports.InterfaceControlTypeFromJSON = InterfaceControlTypeFromJSON;
function InterfaceControlTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'shortDescription': !(0, runtime_1.exists)(json, 'shortDescription') ? undefined : json['shortDescription'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'wildCardMatch': !(0, runtime_1.exists)(json, 'wildCardMatch') ? undefined : json['wildCardMatch'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'displayName': !(0, runtime_1.exists)(json, 'displayName') ? undefined : json['displayName'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, ApplicationSettingTypeType_1.ApplicationSettingTypeTypeFromJSON)(json['type']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'editAllowed': !(0, runtime_1.exists)(json, 'editAllowed') ? undefined : json['editAllowed'],
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
        'scope': !(0, runtime_1.exists)(json, 'scope') ? undefined : json['scope'],
        'valueType': !(0, runtime_1.exists)(json, 'valueType') ? undefined : json['valueType'],
        'conversionType': !(0, runtime_1.exists)(json, 'conversionType') ? undefined : (0, ApplicationSettingConversionType_1.ApplicationSettingConversionTypeFromJSON)(json['conversionType']),
        'subscriptionCountEligible': !(0, runtime_1.exists)(json, 'subscriptionCountEligible') ? undefined : json['subscriptionCountEligible'],
        'settings': !(0, runtime_1.exists)(json, 'settings') ? undefined : (json['settings'].map(BaseApplicationSettingType_1.BaseApplicationSettingTypeFromJSON)),
        'levelType': !(0, runtime_1.exists)(json, 'levelType') ? undefined : (0, ApplicationSettingLevelType_1.ApplicationSettingLevelTypeFromJSON)(json['levelType']),
        'levelCode': !(0, runtime_1.exists)(json, 'levelCode') ? undefined : json['levelCode'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : json['interfaceId'],
        'useGlobal': !(0, runtime_1.exists)(json, 'useGlobal') ? undefined : json['useGlobal'],
        'oxiParameterGroup': !(0, runtime_1.exists)(json, 'oxiParameterGroup') ? undefined : json['oxiParameterGroup'],
    };
}
exports.InterfaceControlTypeFromJSONTyped = InterfaceControlTypeFromJSONTyped;
function InterfaceControlTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'shortDescription': value.shortDescription,
        'description': value.description,
        'wildCardMatch': value.wildCardMatch,
        'name': value.name,
        'displayName': value.displayName,
        'type': (0, ApplicationSettingTypeType_1.ApplicationSettingTypeTypeToJSON)(value.type),
        'hotelId': value.hotelId,
        'sequence': value.sequence,
        'editAllowed': value.editAllowed,
        'value': value.value,
        'scope': value.scope,
        'valueType': value.valueType,
        'conversionType': (0, ApplicationSettingConversionType_1.ApplicationSettingConversionTypeToJSON)(value.conversionType),
        'subscriptionCountEligible': value.subscriptionCountEligible,
        'settings': value.settings === undefined ? undefined : (value.settings.map(BaseApplicationSettingType_1.BaseApplicationSettingTypeToJSON)),
        'levelType': (0, ApplicationSettingLevelType_1.ApplicationSettingLevelTypeToJSON)(value.levelType),
        'levelCode': value.levelCode,
        'interfaceId': value.interfaceId,
        'useGlobal': value.useGlobal,
        'oxiParameterGroup': value.oxiParameterGroup,
    };
}
exports.InterfaceControlTypeToJSON = InterfaceControlTypeToJSON;
