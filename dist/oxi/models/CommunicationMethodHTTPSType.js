"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationMethodHTTPSTypeToJSON = exports.CommunicationMethodHTTPSTypeFromJSONTyped = exports.CommunicationMethodHTTPSTypeFromJSON = exports.instanceOfCommunicationMethodHTTPSType = void 0;
const runtime_1 = require("../runtime");
const SystemType_1 = require("./SystemType");
/**
 * Check if a given object implements the CommunicationMethodHTTPSType interface.
 */
function instanceOfCommunicationMethodHTTPSType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCommunicationMethodHTTPSType = instanceOfCommunicationMethodHTTPSType;
function CommunicationMethodHTTPSTypeFromJSON(json) {
    return CommunicationMethodHTTPSTypeFromJSONTyped(json, false);
}
exports.CommunicationMethodHTTPSTypeFromJSON = CommunicationMethodHTTPSTypeFromJSON;
function CommunicationMethodHTTPSTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'userName': !(0, runtime_1.exists)(json, 'userName') ? undefined : json['userName'],
        'password': !(0, runtime_1.exists)(json, 'password') ? undefined : json['password'],
        'sleepTime': !(0, runtime_1.exists)(json, 'sleepTime') ? undefined : json['sleepTime'],
        'timeOut': !(0, runtime_1.exists)(json, 'timeOut') ? undefined : json['timeOut'],
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : json['address'],
        'proxyAddress': !(0, runtime_1.exists)(json, 'proxyAddress') ? undefined : json['proxyAddress'],
        'compressData': !(0, runtime_1.exists)(json, 'compressData') ? undefined : json['compressData'],
        'useClientCertificate': !(0, runtime_1.exists)(json, 'useClientCertificate') ? undefined : json['useClientCertificate'],
        'system': !(0, runtime_1.exists)(json, 'system') ? undefined : (0, SystemType_1.SystemTypeFromJSON)(json['system']),
        'locale': !(0, runtime_1.exists)(json, 'locale') ? undefined : json['locale'],
        'useVaultProxy': !(0, runtime_1.exists)(json, 'useVaultProxy') ? undefined : json['useVaultProxy'],
        'allowCompressData': !(0, runtime_1.exists)(json, 'allowCompressData') ? undefined : json['allowCompressData'],
    };
}
exports.CommunicationMethodHTTPSTypeFromJSONTyped = CommunicationMethodHTTPSTypeFromJSONTyped;
function CommunicationMethodHTTPSTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'userName': value.userName,
        'password': value.password,
        'sleepTime': value.sleepTime,
        'timeOut': value.timeOut,
        'address': value.address,
        'proxyAddress': value.proxyAddress,
        'compressData': value.compressData,
        'useClientCertificate': value.useClientCertificate,
        'system': (0, SystemType_1.SystemTypeToJSON)(value.system),
        'locale': value.locale,
        'useVaultProxy': value.useVaultProxy,
        'allowCompressData': value.allowCompressData,
    };
}
exports.CommunicationMethodHTTPSTypeToJSON = CommunicationMethodHTTPSTypeToJSON;
