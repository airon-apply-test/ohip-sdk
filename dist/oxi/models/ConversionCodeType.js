"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionCodeTypeToJSON = exports.ConversionCodeTypeFromJSONTyped = exports.ConversionCodeTypeFromJSON = exports.instanceOfConversionCodeType = void 0;
const runtime_1 = require("../runtime");
const ConversionCodeMasterType_1 = require("./ConversionCodeMasterType");
/**
 * Check if a given object implements the ConversionCodeType interface.
 */
function instanceOfConversionCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConversionCodeType = instanceOfConversionCodeType;
function ConversionCodeTypeFromJSON(json) {
    return ConversionCodeTypeFromJSONTyped(json, false);
}
exports.ConversionCodeTypeFromJSON = ConversionCodeTypeFromJSON;
function ConversionCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : json['interfaceId'],
        'conversionCode': !(0, runtime_1.exists)(json, 'conversionCode') ? undefined : json['conversionCode'],
        'uDFCode': !(0, runtime_1.exists)(json, 'uDFCode') ? undefined : json['uDFCode'],
        'label': !(0, runtime_1.exists)(json, 'label') ? undefined : json['label'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'active': !(0, runtime_1.exists)(json, 'active') ? undefined : json['active'],
        'group': !(0, runtime_1.exists)(json, 'group') ? undefined : json['group'],
        'master': !(0, runtime_1.exists)(json, 'master') ? undefined : (0, ConversionCodeMasterType_1.ConversionCodeMasterTypeFromJSON)(json['master']),
    };
}
exports.ConversionCodeTypeFromJSONTyped = ConversionCodeTypeFromJSONTyped;
function ConversionCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'interfaceId': value.interfaceId,
        'conversionCode': value.conversionCode,
        'uDFCode': value.uDFCode,
        'label': value.label,
        'description': value.description,
        'active': value.active,
        'group': value.group,
        'master': (0, ConversionCodeMasterType_1.ConversionCodeMasterTypeToJSON)(value.master),
    };
}
exports.ConversionCodeTypeToJSON = ConversionCodeTypeToJSON;
