/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { InterfaceSetupMessageIndicatorType } from './InterfaceSetupMessageIndicatorType';
import type { InterfaceSetupXMLVersionType } from './InterfaceSetupXMLVersionType';
import type { InterfaceSystemType } from './InterfaceSystemType';
/**
 * Type represents ID one Interface Setup
 * @export
 * @interface InterfaceSetupType
 */
export interface InterfaceSetupType {
    /**
     * ID of the Interface Setup
     * @type {string}
     * @memberof InterfaceSetupType
     */
    interfaceId?: string;
    /**
     * Property for which the Interface Setup is defined.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    hotelId?: string;
    /**
     * Corresponding property in the external system
     * @type {string}
     * @memberof InterfaceSetupType
     */
    externalHotelCode?: string;
    /**
     * Logical Name of the machine that runs the OXIHUB
     * @type {number}
     * @memberof InterfaceSetupType
     */
    machine?: number;
    /**
     * Detailed information about the interface.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    description?: string;
    /**
     * Type of the message. (XML, TPI, AMF, etc.).
     * @type {string}
     * @memberof InterfaceSetupType
     */
    messageFormat?: string;
    /**
     * Collection of XMLTypes
     * @type {Array<InterfaceSetupXMLVersionType>}
     * @memberof InterfaceSetupType
     */
    xMLVersions?: Array<InterfaceSetupXMLVersionType>;
    /**
     * Database ID
     * @type {string}
     * @memberof InterfaceSetupType
     */
    databaseId?: string;
    /**
     * Type of the interface (UPLOAD, DOWNLOAD, EXPORT, FTCRS, HOLIDEX, etc.,).
     * @type {string}
     * @memberof InterfaceSetupType
     */
    interfaceType?: string;
    /**
     * Indicates if external system is active
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    externalSystemActivated?: boolean;
    /**
     *
     * @type {InterfaceSystemType}
     * @memberof InterfaceSetupType
     */
    systemType?: InterfaceSystemType;
    /**
     * Select for all interfaces that send data from Opera to an external system.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    batchProcessBE?: boolean;
    /**
     * Compress all accumulated Business Events if true.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    zipData?: boolean;
    /**
     * Indicates external system does not send the full message for changes.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    deltaMode?: boolean;
    /**
     *
     * @type {InterfaceSetupMessageIndicatorType}
     * @memberof InterfaceSetupType
     */
    deletionIndicator?: InterfaceSetupMessageIndicatorType;
    /**
     *
     * @type {InterfaceSetupMessageIndicatorType}
     * @memberof InterfaceSetupType
     */
    keepingIndicator?: InterfaceSetupMessageIndicatorType;
    /**
     * Indicates if interface is ORS destination.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    orsDestination?: boolean;
    /**
     * Indicates if XML Versions Negotiable.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    xmlSchemaVersionsNegotiable?: boolean;
    /**
     * Indicates to set all XML Versions to Max version.
     * @type {boolean}
     * @memberof InterfaceSetupType
     */
    negotiateXmlSchemaVersion?: boolean;
    /**
     * XML Version to be used by all XLM schemas.
     * @type {string}
     * @memberof InterfaceSetupType
     */
    setAllToVersion?: string;
}
/**
 * Check if a given object implements the InterfaceSetupType interface.
 */
export declare function instanceOfInterfaceSetupType(value: object): boolean;
export declare function InterfaceSetupTypeFromJSON(json: any): InterfaceSetupType;
export declare function InterfaceSetupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceSetupType;
export declare function InterfaceSetupTypeToJSON(value?: InterfaceSetupType | null): any;
