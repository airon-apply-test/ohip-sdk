"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetIntegrationMessageAttachmentsIntegrationSystemEnum = exports.GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum = exports.OperaExchangeContentApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OperaExchangeContentApi extends runtime.BaseAPI {
    /**
     * API to Fetch OXI Inbound/Outbound XML Message Content by Message Id. <p><strong>OperationId:</strong>getIntegrationMessageAttachments</p>
     * Fetch integration message attachments
     */
    async getIntegrationMessageAttachmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.integrationMessageType !== undefined) {
            queryParameters['integrationMessageType'] = requestParameters.integrationMessageType;
        }
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/messages/{messageId}/integrationMessageAttachments`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchIntegrationMessageAttachmentsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch OXI Inbound/Outbound XML Message Content by Message Id. <p><strong>OperationId:</strong>getIntegrationMessageAttachments</p>
     * Fetch integration message attachments
     */
    async getIntegrationMessageAttachments(requestParameters, initOverrides) {
        const response = await this.getIntegrationMessageAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OperaExchangeContentApi = OperaExchangeContentApi;
/**
 * @export
 */
exports.GetIntegrationMessageAttachmentsIntegrationMessageTypeEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound'
};
/**
 * @export
 */
exports.GetIntegrationMessageAttachmentsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
