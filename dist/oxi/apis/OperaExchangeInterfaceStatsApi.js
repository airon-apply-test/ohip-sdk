"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOXIMessageStatisticsMessageStatusEnum = exports.GetOXIMessageStatisticsQueueNameEnum = exports.GetMessageStatisticsStatCodeEnum = exports.GetMessageStatisticsCodeEnum = exports.DequeueOXIMessagesMessageStatusEnum = exports.DequeueOXIMessagesQueueNameEnum = exports.OperaExchangeInterfaceStatsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OperaExchangeInterfaceStatsApi extends runtime.BaseAPI {
    /**
     * API to purge messages from inbound and outbound queues. <p><strong>OperationId:</strong>dequeueOXIMessages</p>
     * Purge the messages from OXI inbound and outbound queues.
     */
    async dequeueOXIMessagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.messageStatus !== undefined) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString();
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString();
        }
        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }
        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaces/{interfaceId}/hotels/{hotelId}/queues/{queueName}/dequeueOXIMessages`.replace(`{${"queueName"}}`, encodeURIComponent(String(requestParameters.queueName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to purge messages from inbound and outbound queues. <p><strong>OperationId:</strong>dequeueOXIMessages</p>
     * Purge the messages from OXI inbound and outbound queues.
     */
    async dequeueOXIMessages(requestParameters, initOverrides) {
        const response = await this.dequeueOXIMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch OXI Dashboard Tile Statistics (Upload and Download message counts by Success, Fail and Warning Status codes) by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getMessageStatistics</p>
     * Retrieves the statistics of Messages for Opera Exchange Interface.
     */
    async getMessageStatisticsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.endDate) {
            queryParameters['endDate'] = requestParameters.endDate;
        }
        if (requestParameters.startDate) {
            queryParameters['startDate'] = requestParameters.startDate;
        }
        if (requestParameters.statCode) {
            queryParameters['statCode'] = requestParameters.statCode;
        }
        if (requestParameters.interfaceId !== undefined) {
            queryParameters['interfaceId'] = requestParameters.interfaceId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/messageStatistics`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MessageStatisticsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch OXI Dashboard Tile Statistics (Upload and Download message counts by Success, Fail and Warning Status codes) by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getMessageStatistics</p>
     * Retrieves the statistics of Messages for Opera Exchange Interface.
     */
    async getMessageStatistics(requestParameters, initOverrides) {
        const response = await this.getMessageStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to retrieve message statistics for inbound , outbound and business event queues. <p><strong>OperationId:</strong>getOXIMessageStatistics</p>
     * Retrieves the statistics of Messages in inbound,outbound and BE queues.
     */
    async getOXIMessageStatisticsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.messageStatus !== undefined) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }
        if (requestParameters.interfaceId !== undefined) {
            queryParameters['InterfaceId'] = requestParameters.interfaceId;
        }
        if (requestParameters.enqueueEndDate !== undefined) {
            queryParameters['enqueueEndDate'] = requestParameters.enqueueEndDate.toISOString();
        }
        if (requestParameters.enqueueStartDate !== undefined) {
            queryParameters['enqueueStartDate'] = requestParameters.enqueueStartDate.toISOString();
        }
        if (requestParameters.groupByModuleAndActionType !== undefined) {
            queryParameters['groupByModuleAndActionType'] = requestParameters.groupByModuleAndActionType;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/queues/{queueName}/messageStatistics`.replace(`{${"queueName"}}`, encodeURIComponent(String(requestParameters.queueName))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OXIMessageStatisticsFromJSON)(jsonValue));
    }
    /**
     * API to retrieve message statistics for inbound , outbound and business event queues. <p><strong>OperationId:</strong>getOXIMessageStatistics</p>
     * Retrieves the statistics of Messages in inbound,outbound and BE queues.
     */
    async getOXIMessageStatistics(requestParameters, initOverrides) {
        const response = await this.getOXIMessageStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OperaExchangeInterfaceStatsApi = OperaExchangeInterfaceStatsApi;
/**
 * @export
 */
exports.DequeueOXIMessagesQueueNameEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound'
};
/**
 * @export
 */
exports.DequeueOXIMessagesMessageStatusEnum = {
    Processed: 'Processed',
    Failed: 'Failed',
    Ready: 'Ready',
    Expired: 'Expired'
};
/**
 * @export
 */
exports.GetMessageStatisticsCodeEnum = {
    UploadedMessages: 'UploadedMessages',
    DownloadedMessages: 'DownloadedMessages'
};
/**
 * @export
 */
exports.GetMessageStatisticsStatCodeEnum = {
    Success: 'Success',
    Failed: 'Failed',
    Warning: 'Warning',
    Total: 'Total'
};
/**
 * @export
 */
exports.GetOXIMessageStatisticsQueueNameEnum = {
    Inbound: 'Inbound',
    Outbound: 'Outbound',
    Be: 'Be'
};
/**
 * @export
 */
exports.GetOXIMessageStatisticsMessageStatusEnum = {
    Processed: 'Processed',
    Failed: 'Failed',
    Ready: 'Ready',
    Expired: 'Expired'
};
