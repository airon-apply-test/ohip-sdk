"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Xchange Interface OXI API
 * APIs to create and manage OPERA Xchange Interface (OXI) configurations for OPERA Cloud Exchange module functionality.<br /><br /> Compatible with OPERA Cloud release 23.0.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.0.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOXIListOfValuesIncludeInActiveEnum = exports.GetOXIListOfValuesIntegrationSystemEnum = exports.GetInterfaceControlsIntegrationSystemEnum = exports.GetIntegrationOutboundMessagesErrorMessageTypeEnum = exports.GetIntegrationInboundMessagesErrorMessageTypeEnum = exports.GetExternalInterfaceSetupsSystemTypeEnum = exports.GetConversionCodesIntegrationSystemEnum = exports.GetConversionCodeMappingsSearchByEnum = exports.GetConversionCodeMappingsIntegrationSystemEnum = exports.GetAccumulatedBusinessEventsIntegrationSystemEnum = exports.GetAccumulatedBusinessEventsStatusEnum = exports.GetAccumulatedBusinessEventsModulesEnum = exports.OperaExchangeInterfaceConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OperaExchangeInterfaceConfigApi extends runtime.BaseAPI {
    /**
     * API to Delete  Automatic Transmission Schedules by Scheduled Message Id. <p><strong>OperationId:</strong>deleteAutomaticTransmissionSchedules</p>
     * Remove Automatic Transmission Schedules
     */
    async deleteAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/messages/{messageId}/automaticTransmissionSchedules`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Delete  Automatic Transmission Schedules by Scheduled Message Id. <p><strong>OperationId:</strong>deleteAutomaticTransmissionSchedules</p>
     * Remove Automatic Transmission Schedules
     */
    async deleteAutomaticTransmissionSchedules(requestParameters, initOverrides) {
        const response = await this.deleteAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Delete  Interface Mapping Conversion Codes by Conversion Code Mapping Id. <p><strong>OperationId:</strong>deleteConversionCodeMappings</p>
     * Remove Conversion Codes Mappings
     */
    async deleteConversionCodeMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/conversionCodeMappingID/{id}/conversionCodeMapping`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Delete  Interface Mapping Conversion Codes by Conversion Code Mapping Id. <p><strong>OperationId:</strong>deleteConversionCodeMappings</p>
     * Remove Conversion Codes Mappings
     */
    async deleteConversionCodeMappings(requestParameters, initOverrides) {
        const response = await this.deleteConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Delete Interface Setup configuration by Hotel Id and Interface Id. <p><strong>OperationId:</strong>deleteExternalInterfaceSetups</p>
     * Delete external Interface Setup details
     */
    async deleteExternalInterfaceSetupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/externalInterfaceSetups`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Delete Interface Setup configuration by Hotel Id and Interface Id. <p><strong>OperationId:</strong>deleteExternalInterfaceSetups</p>
     * Delete external Interface Setup details
     */
    async deleteExternalInterfaceSetups(requestParameters, initOverrides) {
        const response = await this.deleteExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Delete  Profile Match Rules by Hotel Id, Interface Id and Profile Type. <p><strong>OperationId:</strong>deleteProfileMatchRules</p>
     * Delete profile match rules
     */
    async deleteProfileMatchRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/profiles/{profileType}/profileMatchRules`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Delete  Profile Match Rules by Hotel Id, Interface Id and Profile Type. <p><strong>OperationId:</strong>deleteProfileMatchRules</p>
     * Delete profile match rules
     */
    async deleteProfileMatchRules(requestParameters, initOverrides) {
        const response = await this.deleteProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Delete Interface Mapping UDF Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>deleteUDFMappings</p>
     * Remove UDF Mappings
     */
    async deleteUDFMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/operaValue/{operaValue}/udfMapping`.replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Delete Interface Mapping UDF Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>deleteUDFMappings</p>
     * Remove UDF Mappings
     */
    async deleteUDFMappings(requestParameters, initOverrides) {
        const response = await this.deleteUDFMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch  Accumulated Business Event Messages for External Systems by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getAccumulatedBusinessEvents</p>
     * Fetch accumulated business events
     */
    async getAccumulatedBusinessEventsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.modules) {
            queryParameters['modules'] = requestParameters.modules;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.primaryKey !== undefined) {
            queryParameters['primaryKey'] = requestParameters.primaryKey;
        }
        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/accumulatedBusinessEvents`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchAccumulatedBusinessEventsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch  Accumulated Business Event Messages for External Systems by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getAccumulatedBusinessEvents</p>
     * Fetch accumulated business events
     */
    async getAccumulatedBusinessEvents(requestParameters, initOverrides) {
        const response = await this.getAccumulatedBusinessEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>getAutomaticTransmissionSchedules</p>
     * Fetch Automatic Transmission Schedules
     */
    async getAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.interfaceList) {
            queryParameters['interfaceList'] = requestParameters.interfaceList;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/automaticTransmissionSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchAutomaticTransmissionSchedulesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>getAutomaticTransmissionSchedules</p>
     * Fetch Automatic Transmission Schedules
     */
    async getAutomaticTransmissionSchedules(requestParameters, initOverrides) {
        const response = await this.getAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Communication Methods. <p><strong>OperationId:</strong>getCommunicationMethods</p>
     * Fetch Communication Methods
     */
    async getCommunicationMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.isGlobal !== undefined) {
            queryParameters['isGlobal'] = requestParameters.isGlobal;
        }
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.interfaceIds) {
            queryParameters['interfaceIds'] = requestParameters.interfaceIds;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/intefaces/{interfaceId}/communicationMethods`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchCommunicationMethodsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Communication Methods. <p><strong>OperationId:</strong>getCommunicationMethods</p>
     * Fetch Communication Methods
     */
    async getCommunicationMethods(requestParameters, initOverrides) {
        const response = await this.getCommunicationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>getConversionCodeMappings</p>
     * Fetch Conversion Code Mappings
     */
    async getConversionCodeMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        if (requestParameters.udfCode !== undefined) {
            queryParameters['udfCode'] = requestParameters.udfCode;
        }
        if (requestParameters.mappingValue !== undefined) {
            queryParameters['mappingValue'] = requestParameters.mappingValue;
        }
        if (requestParameters.searchBy !== undefined) {
            queryParameters['searchBy'] = requestParameters.searchBy;
        }
        if (requestParameters.includeGlobal !== undefined) {
            queryParameters['includeGlobal'] = requestParameters.includeGlobal;
        }
        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversions/{conversionCode}/conversionCodeMapping`.replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchConversionCodeMappingsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code. <p><strong>OperationId:</strong>getConversionCodeMappings</p>
     * Fetch Conversion Code Mappings
     */
    async getConversionCodeMappings(requestParameters, initOverrides) {
        const response = await this.getConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Interface Mappings UDF Conversion Codes by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getConversionCodes</p>
     * Fetch Conversion Codes
     */
    async getConversionCodesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        if (requestParameters.conversionCode !== undefined) {
            queryParameters['conversionCode'] = requestParameters.conversionCode;
        }
        if (requestParameters.udfCode !== undefined) {
            queryParameters['udfCode'] = requestParameters.udfCode;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }
        if (requestParameters.includeUDFCodes !== undefined) {
            queryParameters['includeUDFCodes'] = requestParameters.includeUDFCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/intefaces/{interfaceId}/conversionCodes`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchConversionCodesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Interface Mappings UDF Conversion Codes by Hotel Id and Interface Id. <p><strong>OperationId:</strong>getConversionCodes</p>
     * Fetch Conversion Codes
     */
    async getConversionCodes(requestParameters, initOverrides) {
        const response = await this.getConversionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Interface Setup configurations by Interface Ids and Hotel Ids. <p><strong>OperationId:</strong>getExternalInterfaceSetups</p>
     * fetch external Interface Setup details
     */
    async getExternalInterfaceSetupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.interfaceIds) {
            queryParameters['interfaceIds'] = requestParameters.interfaceIds;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.includeXmlVersion !== undefined) {
            queryParameters['includeXmlVersion'] = requestParameters.includeXmlVersion;
        }
        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceSetups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchExternalInterfaceSetupsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Interface Setup configurations by Interface Ids and Hotel Ids. <p><strong>OperationId:</strong>getExternalInterfaceSetups</p>
     * fetch external Interface Setup details
     */
    async getExternalInterfaceSetups(requestParameters, initOverrides) {
        const response = await this.getExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Inbound Messages From External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationInboundMessages</p>
     * Fetch integration inbound messages
     */
    async getIntegrationInboundMessagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.externalHotelCodes) {
            queryParameters['externalHotelCodes'] = requestParameters.externalHotelCodes;
        }
        if (requestParameters.messageTypes) {
            queryParameters['messageTypes'] = requestParameters.messageTypes;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeReviewed !== undefined) {
            queryParameters['includeReviewed'] = requestParameters.includeReviewed;
        }
        if (requestParameters.fromMessageID !== undefined) {
            queryParameters['fromMessageID'] = requestParameters.fromMessageID;
        }
        if (requestParameters.toMessageID !== undefined) {
            queryParameters['toMessageID'] = requestParameters.toMessageID;
        }
        if (requestParameters.messageStatus) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }
        if (requestParameters.messageReference !== undefined) {
            queryParameters['messageReference'] = requestParameters.messageReference;
        }
        if (requestParameters.errorMessageWildCard !== undefined) {
            queryParameters['errorMessageWildCard'] = requestParameters.errorMessageWildCard;
        }
        if (requestParameters.errorMessageType !== undefined) {
            queryParameters['errorMessageType'] = requestParameters.errorMessageType;
        }
        if (requestParameters.msgContains !== undefined) {
            queryParameters['msgContains'] = requestParameters.msgContains;
        }
        if (requestParameters.anyOneOfTheMsg !== undefined) {
            queryParameters['anyOneOfTheMsg'] = requestParameters.anyOneOfTheMsg;
        }
        if (requestParameters.valuesOnly !== undefined) {
            queryParameters['valuesOnly'] = requestParameters.valuesOnly;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.includeErrors !== undefined) {
            queryParameters['includeErrors'] = requestParameters.includeErrors;
        }
        if (requestParameters.actionId !== undefined) {
            queryParameters['actionId'] = requestParameters.actionId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{externalHotelCode}/interfaces/{interfaceId}/integrationSystems/{integrationSystem}/integrationInboundMessages`.replace(`{${"integrationSystem"}}`, encodeURIComponent(String(requestParameters.integrationSystem))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"externalHotelCode"}}`, encodeURIComponent(String(requestParameters.externalHotelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchIntegrationInboundMessagesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Inbound Messages From External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationInboundMessages</p>
     * Fetch integration inbound messages
     */
    async getIntegrationInboundMessages(requestParameters, initOverrides) {
        const response = await this.getIntegrationInboundMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Outbound Messages To External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationOutboundMessages</p>
     * fetch integration outbound messages
     */
    async getIntegrationOutboundMessagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.actionType !== undefined) {
            queryParameters['actionType'] = requestParameters.actionType;
        }
        if (requestParameters.errorMessageWildCard !== undefined) {
            queryParameters['errorMessageWildCard'] = requestParameters.errorMessageWildCard;
        }
        if (requestParameters.errorMessageType !== undefined) {
            queryParameters['errorMessageType'] = requestParameters.errorMessageType;
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeReviewed !== undefined) {
            queryParameters['includeReviewed'] = requestParameters.includeReviewed;
        }
        if (requestParameters.fromMessageID !== undefined) {
            queryParameters['fromMessageID'] = requestParameters.fromMessageID;
        }
        if (requestParameters.toMessageID !== undefined) {
            queryParameters['toMessageID'] = requestParameters.toMessageID;
        }
        if (requestParameters.messageStatus) {
            queryParameters['messageStatus'] = requestParameters.messageStatus;
        }
        if (requestParameters.msgContains !== undefined) {
            queryParameters['msgContains'] = requestParameters.msgContains;
        }
        if (requestParameters.anyOneOfTheMsg !== undefined) {
            queryParameters['anyOneOfTheMsg'] = requestParameters.anyOneOfTheMsg;
        }
        if (requestParameters.valuesOnly !== undefined) {
            queryParameters['valuesOnly'] = requestParameters.valuesOnly;
        }
        if (requestParameters.messageReference !== undefined) {
            queryParameters['messageReference'] = requestParameters.messageReference;
        }
        if (requestParameters.messageTypes) {
            queryParameters['messageTypes'] = requestParameters.messageTypes;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.includeErrors !== undefined) {
            queryParameters['includeErrors'] = requestParameters.includeErrors;
        }
        if (requestParameters.actionId !== undefined) {
            queryParameters['actionId'] = requestParameters.actionId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/integrationSystems/{integrationSystem}/integrationOutboundMessages`.replace(`{${"integrationSystem"}}`, encodeURIComponent(String(requestParameters.integrationSystem))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchIntegrationOutboundMessagesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Outbound Messages To External System by Hotel Id, Interface Id. <p><strong>OperationId:</strong>getIntegrationOutboundMessages</p>
     * fetch integration outbound messages
     */
    async getIntegrationOutboundMessages(requestParameters, initOverrides) {
        const response = await this.getIntegrationOutboundMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch  Interface Controls  by Hotel Id and Interface Id <p><strong>OperationId:</strong>getInterfaceControls</p>
     * Retrieve OXI Parameters and Defaults
     */
    async getInterfaceControlsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }
        if (requestParameters.parameterNameWildCard !== undefined) {
            queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/interfaceControls`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchInterfaceControlsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch  Interface Controls  by Hotel Id and Interface Id <p><strong>OperationId:</strong>getInterfaceControls</p>
     * Retrieve OXI Parameters and Defaults
     */
    async getInterfaceControls(requestParameters, initOverrides) {
        const response = await this.getInterfaceControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch legacy OXI Interface Processor Status by Interface Id. <p><strong>OperationId:</strong>getLegacyInterfaceStatus</p>
     * Fetch legacy interface status
     */
    async getLegacyInterfaceStatusRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaces/{interfaceId}/legacyInterfaceStatus`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.LegacyInterfaceStatusDetailsFromJSON)(jsonValue));
    }
    /**
     * API to Fetch legacy OXI Interface Processor Status by Interface Id. <p><strong>OperationId:</strong>getLegacyInterfaceStatus</p>
     * Fetch legacy interface status
     */
    async getLegacyInterfaceStatus(requestParameters, initOverrides) {
        const response = await this.getLegacyInterfaceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch list of values for all OXI interface type External Systems. <p><strong>OperationId:</strong>getOXIListOfValues</p>
     * Fetch list of values details for OXI
     */
    async getOXIListOfValuesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.integrationSystem !== undefined) {
            queryParameters['integrationSystem'] = requestParameters.integrationSystem;
        }
        if (requestParameters.includeInActive !== undefined) {
            queryParameters['includeInActive'] = requestParameters.includeInActive;
        }
        if (requestParameters.parameterNames) {
            queryParameters['parameterNames'] = requestParameters.parameterNames;
        }
        if (requestParameters.parameterValues) {
            queryParameters['parameterValues'] = requestParameters.parameterValues;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/lovCode/{lovCode}/listOfValuesOXI`.replace(`{${"lovCode"}}`, encodeURIComponent(String(requestParameters.lovCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchOXIListOfValuesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch list of values for all OXI interface type External Systems. <p><strong>OperationId:</strong>getOXIListOfValues</p>
     * Fetch list of values details for OXI
     */
    async getOXIListOfValues(requestParameters, initOverrides) {
        const response = await this.getOXIListOfValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Fetch Profile Match Rules by Interface Id and Hotel Id. <p><strong>OperationId:</strong>getProfileMatchRules</p>
     * Fetch profile match rules
     */
    async getProfileMatchRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }
        if (requestParameters.includeXmlVersions !== undefined) {
            queryParameters['includeXmlVersions'] = requestParameters.includeXmlVersions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaces/{interfaceId}/profileMatchRules`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchProfileMatchRulesFromJSON)(jsonValue));
    }
    /**
     * API to Fetch Profile Match Rules by Interface Id and Hotel Id. <p><strong>OperationId:</strong>getProfileMatchRules</p>
     * Fetch profile match rules
     */
    async getProfileMatchRules(requestParameters, initOverrides) {
        const response = await this.getProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Create Automatic Transmission Schedules. <p><strong>OperationId:</strong>postAutomaticTransmissionSchedules</p>
     * Create Automatic Transmission Schedules
     */
    async postAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/automaticTransmissionSchedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostAutomaticTransmissionSchedulesRequestToJSON)(requestParameters.automaticTransmissionSchedulesToBeCreated),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Create Automatic Transmission Schedules. <p><strong>OperationId:</strong>postAutomaticTransmissionSchedules</p>
     * Create Automatic Transmission Schedules
     */
    async postAutomaticTransmissionSchedules(requestParameters, initOverrides) {
        const response = await this.postAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Create  Interface Mapping Conversion Codes by Hotel Id, Interface Id and Conversion Code with OPERA value and External value. <p><strong>OperationId:</strong>postConversionCodeMappings</p>
     * Create Conversion Codes Mappings
     */
    async postConversionCodeMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/operaValue/{operaValue}/externalValue/{externalValue}/conversionCodeMapping`.replace(`{${"externalValue"}}`, encodeURIComponent(String(requestParameters.externalValue))).replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostConversionCodeMappingsRequestToJSON)(requestParameters.conversionCodeMappingsToBeCreated),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreatedConversionCodeMappingsFromJSON)(jsonValue));
    }
    /**
     * API to Create  Interface Mapping Conversion Codes by Hotel Id, Interface Id and Conversion Code with OPERA value and External value. <p><strong>OperationId:</strong>postConversionCodeMappings</p>
     * Create Conversion Codes Mappings
     */
    async postConversionCodeMappings(requestParameters, initOverrides) {
        const response = await this.postConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Create Interface Setup configuration. <p><strong>OperationId:</strong>postExternalInterfaceSetups</p>
     * Create Interface Setup details
     */
    async postExternalInterfaceSetupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalInterfaceSetups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostExternalInterfaceSetupsRequestToJSON)(requestParameters.externalInterfaceSetupsToBeCreated),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Create Interface Setup configuration. <p><strong>OperationId:</strong>postExternalInterfaceSetups</p>
     * Create Interface Setup details
     */
    async postExternalInterfaceSetups(requestParameters, initOverrides) {
        const response = await this.postExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Create Profile Match Rules. <p><strong>OperationId:</strong>postProfileMatchRules</p>
     * Create profile match rules
     */
    async postProfileMatchRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileMatchRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostProfileMatchRulesRequestToJSON)(requestParameters.profileMatchRulesToBeCreated),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * API to Create Profile Match Rules. <p><strong>OperationId:</strong>postProfileMatchRules</p>
     * Create profile match rules
     */
    async postProfileMatchRules(requestParameters, initOverrides) {
        const response = await this.postProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify  Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>putAutomaticTransmissionSchedules</p>
     * Change Automatic Transmission Schedules
     */
    async putAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/automaticTransmissionSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutAutomaticTransmissionSchedulesRequestToJSON)(requestParameters.automaticTransmissionSchedulesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedAutomaticTransmissionSchedulesFromJSON)(jsonValue));
    }
    /**
     * API to Modify  Automatic Transmission Schedules by Hotel Id. <p><strong>OperationId:</strong>putAutomaticTransmissionSchedules</p>
     * Change Automatic Transmission Schedules
     */
    async putAutomaticTransmissionSchedules(requestParameters, initOverrides) {
        const response = await this.putAutomaticTransmissionSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify Communication Methods. <p><strong>OperationId:</strong>putCommunicationMethods</p>
     * Modify Communication Methods
     */
    async putCommunicationMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/communicationMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutCommunicationMethodsRequestToJSON)(requestParameters.communicationMethodsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedCommunicationMethodsFromJSON)(jsonValue));
    }
    /**
     * API to Modify Communication Methods. <p><strong>OperationId:</strong>putCommunicationMethods</p>
     * Modify Communication Methods
     */
    async putCommunicationMethods(requestParameters, initOverrides) {
        const response = await this.putCommunicationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify  Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code Id with OPERA value and External value. <p><strong>OperationId:</strong>putConversionCodeMappings</p>
     * Change Conversion Codes Mappings
     */
    async putConversionCodeMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/conversionCode/{conversionCode}/ID/{id}/operaValue/{operaValue}/externalValue/{externalValue}/conversionCodeMapping`.replace(`{${"externalValue"}}`, encodeURIComponent(String(requestParameters.externalValue))).replace(`{${"operaValue"}}`, encodeURIComponent(String(requestParameters.operaValue))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"conversionCode"}}`, encodeURIComponent(String(requestParameters.conversionCode))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutConversionCodeMappingsRequestToJSON)(requestParameters.conversionCodeMappingsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedConversionCodeMappingsFromJSON)(jsonValue));
    }
    /**
     * API to Modify  Interface Mapping  Conversion Codes by Hotel Id, Interface Id and Conversion Code Id with OPERA value and External value. <p><strong>OperationId:</strong>putConversionCodeMappings</p>
     * Change Conversion Codes Mappings
     */
    async putConversionCodeMappings(requestParameters, initOverrides) {
        const response = await this.putConversionCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify Interface Mapping UDF Conversion Codes. <p><strong>OperationId:</strong>putConversionCodesStatus</p>
     * Change Conversion codes Status
     */
    async putConversionCodesStatusRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/conversionCodesStatus`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutConversionCodesStatusRequestToJSON)(requestParameters.conversionCodesStatusToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedConversionCodesStatusFromJSON)(jsonValue));
    }
    /**
     * API to Modify Interface Mapping UDF Conversion Codes. <p><strong>OperationId:</strong>putConversionCodesStatus</p>
     * Change Conversion codes Status
     */
    async putConversionCodesStatus(requestParameters, initOverrides) {
        const response = await this.putConversionCodesStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify  Interface Setup configuration. <p><strong>OperationId:</strong>putExternalInterfaceSetups</p>
     * Modify external Interface Setup details
     */
    async putExternalInterfaceSetupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceSetups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutExternalInterfaceSetupsRequestToJSON)(requestParameters.externalInterfaceSetupsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedExternalInterfaceSetupsFromJSON)(jsonValue));
    }
    /**
     * API to Modify  Interface Setup configuration. <p><strong>OperationId:</strong>putExternalInterfaceSetups</p>
     * Modify external Interface Setup details
     */
    async putExternalInterfaceSetups(requestParameters, initOverrides) {
        const response = await this.putExternalInterfaceSetupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify Interface Controls by Interface Id. <p><strong>OperationId:</strong>putInterfaceControls</p>
     * Change OXI Parameters and Defaults
     */
    async putInterfaceControlsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaces/{interfaceId}/interfaceControls`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutInterfaceControlsRequestToJSON)(requestParameters.interfaceControlsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedInterfaceControlsFromJSON)(jsonValue));
    }
    /**
     * API to Modify Interface Controls by Interface Id. <p><strong>OperationId:</strong>putInterfaceControls</p>
     * Change OXI Parameters and Defaults
     */
    async putInterfaceControls(requestParameters, initOverrides) {
        const response = await this.putInterfaceControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * API to Modify Profile Match Rules. <p><strong>OperationId:</strong>putProfileMatchRules</p>
     * Change profile match rules
     */
    async putProfileMatchRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileMatchRules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileMatchRulesRequestToJSON)(requestParameters.profileMatchRulesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedProfileMatchRulesFromJSON)(jsonValue));
    }
    /**
     * API to Modify Profile Match Rules. <p><strong>OperationId:</strong>putProfileMatchRules</p>
     * Change profile match rules
     */
    async putProfileMatchRules(requestParameters, initOverrides) {
        const response = await this.putProfileMatchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OperaExchangeInterfaceConfigApi = OperaExchangeInterfaceConfigApi;
/**
 * @export
 */
exports.GetAccumulatedBusinessEventsModulesEnum = {
    Availability: 'Availability',
    Block: 'Block',
    BlockDetail: 'BlockDetail',
    BlockHeader: 'BlockHeader',
    Rate: 'Rate',
    Reservation: 'Reservation',
    Restriction: 'Restriction'
};
/**
 * @export
 */
exports.GetAccumulatedBusinessEventsStatusEnum = {
    New: 'New',
    Ready: 'Ready'
};
/**
 * @export
 */
exports.GetAccumulatedBusinessEventsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetConversionCodeMappingsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetConversionCodeMappingsSearchByEnum = {
    OperaValue: 'OperaValue',
    ExternalValue: 'ExternalValue',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetConversionCodesIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetExternalInterfaceSetupsSystemTypeEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetIntegrationInboundMessagesErrorMessageTypeEnum = {
    Error: 'Error',
    ResultException: 'ResultException',
    OptionalWarning: 'OptionalWarning',
    Warning: 'Warning'
};
/**
 * @export
 */
exports.GetIntegrationOutboundMessagesErrorMessageTypeEnum = {
    Error: 'Error',
    ResultException: 'ResultException',
    OptionalWarning: 'OptionalWarning',
    Warning: 'Warning'
};
/**
 * @export
 */
exports.GetInterfaceControlsIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetOXIListOfValuesIntegrationSystemEnum = {
    Central: 'Central',
    Property: 'Property',
    Both: 'Both'
};
/**
 * @export
 */
exports.GetOXIListOfValuesIncludeInActiveEnum = {
    True: true,
    False: false
};
