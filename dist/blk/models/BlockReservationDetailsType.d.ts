/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockInventoryControlType } from './BlockInventoryControlType';
import type { BlockRatePlanInfoType } from './BlockRatePlanInfoType';
import type { BreakfastType } from './BreakfastType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import type { PorterageType } from './PorterageType';
/**
 * Contains reservation related information for the block.
 * @export
 * @interface BlockReservationDetailsType
 */
export interface BlockReservationDetailsType {
    /**
     * Rate Plan for the block.
     * @type {Array<BlockRatePlanInfoType>}
     * @memberof BlockReservationDetailsType
     */
    ratePlanCode?: Array<BlockRatePlanInfoType>;
    /**
     * Indicates the approximate check in time for the reservations made for the block.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    arrivalTime?: Date;
    /**
     * Indicates the approximate check out time for the reservations made for the block.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    departureTime?: Date;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof BlockReservationDetailsType
     */
    traceCode?: CodeDescriptionType;
    /**
     *
     * @type {BreakfastType}
     * @memberof BlockReservationDetailsType
     */
    breakfast?: BreakfastType;
    /**
     *
     * @type {PorterageType}
     * @memberof BlockReservationDetailsType
     */
    porterage?: PorterageType;
    /**
     * Free format field to store information from Wholesaler for the block.
     * @type {string}
     * @memberof BlockReservationDetailsType
     */
    taRecordLocator?: string;
    /**
     * Cut off date of the block.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    cutOffDate?: Date;
    /**
     * Cut off days of the block.
     * @type {number}
     * @memberof BlockReservationDetailsType
     */
    cutOffDays?: number;
    /**
     * Determines whether the CutOffDate or CutOffDays has changed for the block header. If CutOffDate or CutOffDays is changed then apply the changed cutoff date/ days as the new cutoff date/ days to all the room types in the Grid.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    updateGridOnCutoffChange?: boolean;
    /**
     * This element informs about the systematic follow up on this business block. A Group Reservations Agent or Reservations Manager can use this date to identify when to followup with the customer.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    followupDate?: Date;
    /**
     * Contains information about the date by which the group must make a decision on the block.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    decisionDate?: Date;
    /**
     * Due date for the rooming list for the block. This is the date by which the guest list should be provided by the customer.
     * @type {Date}
     * @memberof BlockReservationDetailsType
     */
    roomingListDueDate?: Date;
    /**
     * Elasticity of the block.
     * @type {number}
     * @memberof BlockReservationDetailsType
     */
    elastic?: number;
    /**
     * Are Rate amounts suppressed for the block.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    suppressRate?: boolean;
    /**
     * Determines if the rate amounts are to be printed on the reservations picked up from the block. This becomes the default Print Rate setting for all reservations picked up from the block.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    printRate?: boolean;
    /**
     * If this is true, then when a reservation is picked up for the block, the rate for that reservation is taken from the rate grid belonging to the block. If this is false, the rate amounts on the room grid are updated every time the Refresh Rates process is applied.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    rateGuarantee?: boolean;
    /**
     *
     * @type {BlockInventoryControlType}
     * @memberof BlockReservationDetailsType
     */
    inventoryControl?: BlockInventoryControlType;
    /**
     * Indicates the expected number of guests per sleeping room when Occupancy Split Per Room Type parameter is N.
     * @type {number}
     * @memberof BlockReservationDetailsType
     */
    personsPerRoom?: number;
    /**
     * Whether any active posting master reservations exist for the business block.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    activePostingMasterReservations?: boolean;
    /**
     * Determines whether or not the block can be managed at the CRS level.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    housing?: boolean;
    /**
     * Determines whether the CRS guarantee is required or not for the block.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    guaranteeRequired?: boolean;
    /**
     * Determines whether or not the block can be managed at the CRS level.
     * @type {boolean}
     * @memberof BlockReservationDetailsType
     */
    controlBlockLocally?: boolean;
    /**
     * Transaction Code for the block
     * @type {string}
     * @memberof BlockReservationDetailsType
     */
    transactionCode?: string;
}
/**
 * Check if a given object implements the BlockReservationDetailsType interface.
 */
export declare function instanceOfBlockReservationDetailsType(value: object): boolean;
export declare function BlockReservationDetailsTypeFromJSON(json: any): BlockReservationDetailsType;
export declare function BlockReservationDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockReservationDetailsType;
export declare function BlockReservationDetailsTypeToJSON(value?: BlockReservationDetailsType | null): any;
