"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMembershipTypeRulesRuleBasedOnEnum = exports.GetMembershipTypeRulesProgramTypeEnum = exports.GetMembershipTypeRuleFetchInstructionsEnum = exports.GetMembershipTypeFetchInstructionsEnum = exports.MembershipConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class MembershipConfigApi extends runtime.BaseAPI {
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    async deleteMembershipAwardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    async deleteMembershipAwards(requestParameters, initOverrides) {
        const response = await this.deleteMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    async deleteMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    async deleteMembershipBenefitPrograms(requestParameters, initOverrides) {
        const response = await this.deleteMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    async deleteMembershipClassesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    async deleteMembershipClasses(requestParameters, initOverrides) {
        const response = await this.deleteMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Clear Membership Configuration Cache <p><strong>OperationId:</strong>deleteMembershipConfigCache</p>
     *  clear cache
     */
    async deleteMembershipConfigCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/membershipConfig/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Clear Membership Configuration Cache <p><strong>OperationId:</strong>deleteMembershipConfigCache</p>
     *  clear cache
     */
    async deleteMembershipConfigCache(requestParameters, initOverrides) {
        const response = await this.deleteMembershipConfigCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    async deleteMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    async deleteMembershipEnrollmentGroups(requestParameters, initOverrides) {
        const response = await this.deleteMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    async deleteMembershipLevelsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    async deleteMembershipLevels(requestParameters, initOverrides) {
        const response = await this.deleteMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    async deleteMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    async deleteMembershipMarketGroups(requestParameters, initOverrides) {
        const response = await this.deleteMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    async deleteMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    async deleteMembershipPropertyGroups(requestParameters, initOverrides) {
        const response = await this.deleteMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    async deleteMembershipRateGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    async deleteMembershipRateGroups(requestParameters, initOverrides) {
        const response = await this.deleteMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    async deleteMembershipTypeRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipPointsSequence) {
            queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    async deleteMembershipTypeRules(requestParameters, initOverrides) {
        const response = await this.deleteMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    async deleteMembershipTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    async deleteMembershipTypes(requestParameters, initOverrides) {
        const response = await this.deleteMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    async getMembershipAwardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        if (requestParameters.awardCodes) {
            queryParameters['awardCodes'] = requestParameters.awardCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.validForDate !== undefined) {
            queryParameters['validForDate'] = requestParameters.validForDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.includeDetails !== undefined) {
            queryParameters['includeDetails'] = requestParameters.includeDetails;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipAwards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipAwardsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    async getMembershipAwards(requestParameters, initOverrides) {
        const response = await this.getMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    async getMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end.toISOString().substr(0, 10);
        }
        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start.toISOString().substr(0, 10);
        }
        if (requestParameters.minimumLevel !== undefined) {
            queryParameters['minimumLevel'] = requestParameters.minimumLevel;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipBenefitPrograms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipBenefitProgramsInfoFromJSON)(jsonValue));
    }
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    async getMembershipBenefitPrograms(requestParameters, initOverrides) {
        const response = await this.getMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    async getMembershipClassesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipClassesInfoFromJSON)(jsonValue));
    }
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    async getMembershipClasses(requestParameters, initOverrides) {
        const response = await this.getMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    async getMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.enrollmentCodes) {
            queryParameters['enrollmentCodes'] = requestParameters.enrollmentCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipEnrollmentGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipEnrollmentGroupsInfoFromJSON)(jsonValue));
    }
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    async getMembershipEnrollmentGroups(requestParameters, initOverrides) {
        const response = await this.getMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    async getMembershipLevelsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipTypeCode !== undefined) {
            queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.includeFolioTexts !== undefined) {
            queryParameters['includeFolioTexts'] = requestParameters.includeFolioTexts;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipLevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipLevelsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    async getMembershipLevels(requestParameters, initOverrides) {
        const response = await this.getMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    async getMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipMarketGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipMarketGroupsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    async getMembershipMarketGroups(requestParameters, initOverrides) {
        const response = await this.getMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    async getMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipPropertyGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipPropertyGroupsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    async getMembershipPropertyGroups(requestParameters, initOverrides) {
        const response = await this.getMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    async getMembershipRateGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipRateGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipRateGroupsInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    async getMembershipRateGroups(requestParameters, initOverrides) {
        const response = await this.getMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    async getMembershipTypeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipTypeCode !== undefined) {
            queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    async getMembershipType(requestParameters, initOverrides) {
        const response = await this.getMembershipTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    async getMembershipTypeRuleRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }
        if (requestParameters.membershipPointsSequence !== undefined) {
            queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypeRuleFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    async getMembershipTypeRule(requestParameters, initOverrides) {
        const response = await this.getMembershipTypeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    async getMembershipTypeRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.membershipTypesCodes) {
            queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
        }
        if (requestParameters.programType !== undefined) {
            queryParameters['programType'] = requestParameters.programType;
        }
        if (requestParameters.ruleCode !== undefined) {
            queryParameters['ruleCode'] = requestParameters.ruleCode;
        }
        if (requestParameters.ruleBasedOn !== undefined) {
            queryParameters['ruleBasedOn'] = requestParameters.ruleBasedOn;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypeRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypeRulesInfoFromJSON)(jsonValue));
    }
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    async getMembershipTypeRules(requestParameters, initOverrides) {
        const response = await this.getMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    async getMembershipTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.membershipTypesCodes) {
            queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
        }
        if (requestParameters.membershipTypesWildCard !== undefined) {
            queryParameters['membershipTypesWildCard'] = requestParameters.membershipTypesWildCard;
        }
        if (requestParameters.membershipClassesCodes) {
            queryParameters['membershipClassesCodes'] = requestParameters.membershipClassesCodes;
        }
        if (requestParameters.membershipClassesWildCard !== undefined) {
            queryParameters['membershipClassesWildCard'] = requestParameters.membershipClassesWildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypesFromJSON)(jsonValue));
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    async getMembershipTypes(requestParameters, initOverrides) {
        const response = await this.getMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Ping Membership Configuration Service <p><strong>OperationId:</strong>pingMembershipConfigService</p>
     *  ping
     */
    async pingMembershipConfigServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/membershipConfig/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     * Ping Membership Configuration Service <p><strong>OperationId:</strong>pingMembershipConfigService</p>
     *  ping
     */
    async pingMembershipConfigService(requestParameters, initOverrides) {
        const response = await this.pingMembershipConfigServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    async postMembershipAwardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipAwards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipAwardsRequestToJSON)(requestParameters.membershipAwards),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    async postMembershipAwards(requestParameters, initOverrides) {
        const response = await this.postMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    async postMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipBenefitPrograms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipBenefitProgramsRequestToJSON)(requestParameters.membershipBenefitPrograms),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    async postMembershipBenefitPrograms(requestParameters, initOverrides) {
        const response = await this.postMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    async postMembershipClassesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipClassesRequestToJSON)(requestParameters.membershipClasses),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    async postMembershipClasses(requestParameters, initOverrides) {
        const response = await this.postMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    async postMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipEnrollmentGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipEnrollmentGroupsRequestToJSON)(requestParameters.membershipEnrollmentGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    async postMembershipEnrollmentGroups(requestParameters, initOverrides) {
        const response = await this.postMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    async postMembershipFolioTextsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipFolioTexts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipFolioTextsRequestToJSON)(requestParameters.membershipFolioTexts),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    async postMembershipFolioTexts(requestParameters, initOverrides) {
        const response = await this.postMembershipFolioTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    async postMembershipLevelsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipLevels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipLevelsRequestToJSON)(requestParameters.membershipLevels),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    async postMembershipLevels(requestParameters, initOverrides) {
        const response = await this.postMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    async postMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipMarketGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipMarketGroupsRequestToJSON)(requestParameters.membershipMarketGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    async postMembershipMarketGroups(requestParameters, initOverrides) {
        const response = await this.postMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    async postMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipPropertyGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipPropertyGroupsRequestToJSON)(requestParameters.membershipPropertyGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    async postMembershipPropertyGroups(requestParameters, initOverrides) {
        const response = await this.postMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    async postMembershipRateGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipRateGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipRateGroupsRequestToJSON)(requestParameters.membershipRateGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    async postMembershipRateGroups(requestParameters, initOverrides) {
        const response = await this.postMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    async postMembershipTypeRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypeRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipTypeRulesRequestToJSON)(requestParameters.membershipTypeRules),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypeRulesDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    async postMembershipTypeRules(requestParameters, initOverrides) {
        const response = await this.postMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    async postMembershipTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipTypesRequestToJSON)(requestParameters.membershipTypes),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    async postMembershipTypes(requestParameters, initOverrides) {
        const response = await this.postMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    async putMembershipAwardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipAwardsRequestToJSON)(requestParameters.membershipAwards),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    async putMembershipAwards(requestParameters, initOverrides) {
        const response = await this.putMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    async putMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipBenefitProgramsRequestToJSON)(requestParameters.membershipBenefitPrograms),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    async putMembershipBenefitPrograms(requestParameters, initOverrides) {
        const response = await this.putMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    async putMembershipClassesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipClassesRequestToJSON)(requestParameters.membershipClasses),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipClassesInfoFromJSON)(jsonValue));
    }
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    async putMembershipClasses(requestParameters, initOverrides) {
        const response = await this.putMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    async putMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipEnrollmentGroupsRequestToJSON)(requestParameters.membershipEnrollmentGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    async putMembershipEnrollmentGroups(requestParameters, initOverrides) {
        const response = await this.putMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    async putMembershipLevelsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipLevelsRequestToJSON)(requestParameters.membershipLevels),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    async putMembershipLevels(requestParameters, initOverrides) {
        const response = await this.putMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    async putMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipMarketGroupsRequestToJSON)(requestParameters.membershipMarketGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    async putMembershipMarketGroups(requestParameters, initOverrides) {
        const response = await this.putMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    async putMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipPropertyGroupsRequestToJSON)(requestParameters.membershipPropertyGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    async putMembershipPropertyGroups(requestParameters, initOverrides) {
        const response = await this.putMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    async putMembershipRateGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipRateGroupsRequestToJSON)(requestParameters.membershipRateGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    async putMembershipRateGroups(requestParameters, initOverrides) {
        const response = await this.putMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    async putMembershipTypeRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutMembershipTypeRequestToJSON)(requestParameters.membershipTypeChangeInstructions),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MembershipTypesFromJSON)(jsonValue));
    }
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    async putMembershipType(requestParameters, initOverrides) {
        const response = await this.putMembershipTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    async putMembershipTypeRulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostMembershipTypeRulesRequestToJSON)(requestParameters.membershipTypeRules),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    async putMembershipTypeRules(requestParameters, initOverrides) {
        const response = await this.putMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.MembershipConfigApi = MembershipConfigApi;
/**
 * @export
 */
exports.GetMembershipTypeFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    CardNumberDetails: 'CardNumberDetails',
    PointsDetails: 'PointsDetails',
    ExceptionCriteriaDetails: 'ExceptionCriteriaDetails',
    AdditionalDetails: 'AdditionalDetails',
    EnrollmentDetails: 'EnrollmentDetails',
    Levels: 'Levels'
};
/**
 * @export
 */
exports.GetMembershipTypeRuleFetchInstructionsEnum = {
    RuleDefinition: 'RuleDefinition',
    PointsDefinition: 'PointsDefinition',
    RuleConditions: 'RuleConditions'
};
/**
 * @export
 */
exports.GetMembershipTypeRulesProgramTypeEnum = {
    All: 'All',
    Points: 'Points',
    Tier: 'Tier'
};
/**
 * @export
 */
exports.GetMembershipTypeRulesRuleBasedOnEnum = {
    Revenue: 'Revenue',
    Stay: 'Stay',
    Nights: 'Nights',
    Enrollment: 'Enrollment',
    TierUpgrade: 'TierUpgrade',
    Renewal: 'Renewal',
    Rfm: 'Rfm'
};
