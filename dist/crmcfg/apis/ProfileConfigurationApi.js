"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteProfileNameValidationsProfileTypeEnum = exports.ProfileConfigurationApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ProfileConfigurationApi extends runtime.BaseAPI {
    /**
     * You can use this API to copy Exclusive Preferences. <p><strong>OperationId:</strong>copyExclusivePreferences</p>
     * Copy Exclusive Preferences
     */
    async copyExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/exclusivePreferences/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CopyExclusivePreferencesRequestToJSON)(requestParameters.exclusivePreferencesCopy),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to copy Exclusive Preferences. <p><strong>OperationId:</strong>copyExclusivePreferences</p>
     * Copy Exclusive Preferences
     */
    async copyExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.copyExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to copy preferences. <p><strong>OperationId:</strong>copyPreferences</p>
     * Copy preferences
     */
    async copyPreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferences/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CopyPreferencesRequestToJSON)(requestParameters.preferencesCopy),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to copy preferences. <p><strong>OperationId:</strong>copyPreferences</p>
     * Copy preferences
     */
    async copyPreferences(requestParameters, initOverrides) {
        const response = await this.copyPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete address formats. <p><strong>OperationId:</strong>deleteAddressFormats</p>
     * Delete address formats
     */
    async deleteAddressFormatsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.formatCodes) {
            queryParameters['formatCodes'] = requestParameters.formatCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/addressFormats`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete address formats. <p><strong>OperationId:</strong>deleteAddressFormats</p>
     * Delete address formats
     */
    async deleteAddressFormats(requestParameters, initOverrides) {
        const response = await this.deleteAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete credit ratings. <p><strong>OperationId:</strong>deleteCreditRatings</p>
     * Delete credit ratings
     */
    async deleteCreditRatingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.creditRatings) {
            queryParameters['creditRatings'] = requestParameters.creditRatings;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/creditRatings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete credit ratings. <p><strong>OperationId:</strong>deleteCreditRatings</p>
     * Delete credit ratings
     */
    async deleteCreditRatings(requestParameters, initOverrides) {
        const response = await this.deleteCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>deleteExclusivePreferences</p>
     * Delete Exclusive Preferences
     */
    async deleteExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.exclusivePreferenceCode !== undefined) {
            queryParameters['exclusivePreferenceCode'] = requestParameters.exclusivePreferenceCode;
        }
        if (requestParameters.exclusivePreferenceGroup !== undefined) {
            queryParameters['exclusivePreferenceGroup'] = requestParameters.exclusivePreferenceGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>deleteExclusivePreferences</p>
     * Delete Exclusive Preferences
     */
    async deleteExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.deleteExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete preferences, this API allows us to delete both the Global and Hotel level preferences. <p><strong>OperationId:</strong>deleteHotelAndGlobalPreferences</p>
     * Delete preferences
     */
    async deleteHotelAndGlobalPreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }
        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preference`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete preferences, this API allows us to delete both the Global and Hotel level preferences. <p><strong>OperationId:</strong>deleteHotelAndGlobalPreferences</p>
     * Delete preferences
     */
    async deleteHotelAndGlobalPreferences(requestParameters, initOverrides) {
        const response = await this.deleteHotelAndGlobalPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will allow you to delete an existing Preference Group. <p><strong>OperationId:</strong>deletePreferenceGroups</p>
     * Delete preference groups
     */
    async deletePreferenceGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will allow you to delete an existing Preference Group. <p><strong>OperationId:</strong>deletePreferenceGroups</p>
     * Delete preference groups
     */
    async deletePreferenceGroups(requestParameters, initOverrides) {
        const response = await this.deletePreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete preferences. <p><strong>OperationId:</strong>deletePreferences</p>
     * Delete preferences
     */
    async deletePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }
        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete preferences. <p><strong>OperationId:</strong>deletePreferences</p>
     * Delete preferences
     */
    async deletePreferences(requestParameters, initOverrides) {
        const response = await this.deletePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Clear Profile Configuratoin Cache <p><strong>OperationId:</strong>deleteProfileConfigServiceCache</p>
     *  clear cache
     */
    async deleteProfileConfigServiceCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/profile/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Clear Profile Configuratoin Cache <p><strong>OperationId:</strong>deleteProfileConfigServiceCache</p>
     *  clear cache
     */
    async deleteProfileConfigServiceCache(requestParameters, initOverrides) {
        const response = await this.deleteProfileConfigServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete Profile Name Validations. <p><strong>OperationId:</strong>deleteProfileNameValidations</p>
     * Delete Profile Name Validations
     */
    async deleteProfileNameValidationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }
        if (requestParameters.profileName !== undefined) {
            queryParameters['profileName'] = requestParameters.profileName;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete Profile Name Validations. <p><strong>OperationId:</strong>deleteProfileNameValidations</p>
     * Delete Profile Name Validations
     */
    async deleteProfileNameValidations(requestParameters, initOverrides) {
        const response = await this.deleteProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete profile relationships. <p><strong>OperationId:</strong>deleteProfileRelationships</p>
     * Delete profile relationships
     */
    async deleteProfileRelationshipsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }
        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }
        if (requestParameters.fromCode !== undefined) {
            queryParameters['fromCode'] = requestParameters.fromCode;
        }
        if (requestParameters.toCode !== undefined) {
            queryParameters['toCode'] = requestParameters.toCode;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/relationships`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete profile relationships. <p><strong>OperationId:</strong>deleteProfileRelationships</p>
     * Delete profile relationships
     */
    async deleteProfileRelationships(requestParameters, initOverrides) {
        const response = await this.deleteProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete template Exclusive Preferences. <p><strong>OperationId:</strong>deleteTemplateExclusivePreferences</p>
     * Delete template Exclusive Preferences
     */
    async deleteTemplateExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.exclusivePreferenceCode !== undefined) {
            queryParameters['exclusivePreferenceCode'] = requestParameters.exclusivePreferenceCode;
        }
        if (requestParameters.exclusivePreferenceGroup !== undefined) {
            queryParameters['exclusivePreferenceGroup'] = requestParameters.exclusivePreferenceGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete template Exclusive Preferences. <p><strong>OperationId:</strong>deleteTemplateExclusivePreferences</p>
     * Delete template Exclusive Preferences
     */
    async deleteTemplateExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.deleteTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to delete template preferences. <p><strong>OperationId:</strong>deleteTemplatePreferences</p>
     * Delete template preferences
     */
    async deleteTemplatePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }
        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferences`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to delete template preferences. <p><strong>OperationId:</strong>deleteTemplatePreferences</p>
     * Delete template preferences
     */
    async deleteTemplatePreferences(requestParameters, initOverrides) {
        const response = await this.deleteTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get address formats. <p><strong>OperationId:</strong>getAddressFormats</p>
     * Get address formats
     */
    async getAddressFormatsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/addressFormats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AddressFormatsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get address formats. <p><strong>OperationId:</strong>getAddressFormats</p>
     * Get address formats
     */
    async getAddressFormats(requestParameters, initOverrides) {
        const response = await this.getAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get credit ratings. <p><strong>OperationId:</strong>getCreditRatings</p>
     * Get credit ratings
     */
    async getCreditRatingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }
        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/creditRatings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CreditRatingsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get credit ratings. <p><strong>OperationId:</strong>getCreditRatings</p>
     * Get credit ratings
     */
    async getCreditRatings(requestParameters, initOverrides) {
        const response = await this.getCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Exclusive preferences at hotel Level. <p><strong>OperationId:</strong>getExclusivePreferences</p>
     * Get Exclusive preferences
     */
    async getExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.exclusivePreferenceCodes) {
            queryParameters['exclusivePreferenceCodes'] = requestParameters.exclusivePreferenceCodes;
        }
        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }
        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ExclusivePreferencesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Exclusive preferences at hotel Level. <p><strong>OperationId:</strong>getExclusivePreferences</p>
     * Get Exclusive preferences
     */
    async getExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.getExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The API can be used to retrieve preference groups that match the given criteria in the request. <p><strong>OperationId:</strong>getPreferenceGroups</p>
     * Get Preference Groups
     */
    async getPreferenceGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PreferenceGroupsFromJSON)(jsonValue));
    }
    /**
     * The API can be used to retrieve preference groups that match the given criteria in the request. <p><strong>OperationId:</strong>getPreferenceGroups</p>
     * Get Preference Groups
     */
    async getPreferenceGroups(requestParameters, initOverrides) {
        const response = await this.getPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get all configured guest preferences. Use preference grouping code or preference code to narrow down the results.<p><strong>OperationId:</strong>getPreferences</p>
     * Get preferences
     */
    async getPreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }
        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }
        if (requestParameters.createdByUserIds) {
            queryParameters['createdByUserIds'] = requestParameters.createdByUserIds;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelPreferencesFromJSON)(jsonValue));
    }
    /**
     * Use this API to get all configured guest preferences. Use preference grouping code or preference code to narrow down the results.<p><strong>OperationId:</strong>getPreferences</p>
     * Get preferences
     */
    async getPreferences(requestParameters, initOverrides) {
        const response = await this.getPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get Profile Name Validations. <p><strong>OperationId:</strong>getProfileNameValidations</p>
     * Get Profile Name Validations
     */
    async getProfileNameValidationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.typeCodes) {
            queryParameters['typeCodes'] = requestParameters.typeCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileNameValidationsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get Profile Name Validations. <p><strong>OperationId:</strong>getProfileNameValidations</p>
     * Get Profile Name Validations
     */
    async getProfileNameValidations(requestParameters, initOverrides) {
        const response = await this.getProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get profile relationships. <p><strong>OperationId:</strong>getProfileRelationships</p>
     * Get profile relationships
     */
    async getProfileRelationshipsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }
        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/relationships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileLinksFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get profile relationships. <p><strong>OperationId:</strong>getProfileRelationships</p>
     * Get profile relationships
     */
    async getProfileRelationships(requestParameters, initOverrides) {
        const response = await this.getProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get template Exclusive Preferences. <p><strong>OperationId:</strong>getTemplateExclusivePreferences</p>
     * Get template Exclusive Preferences
     */
    async getTemplateExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.exclusivePreferenceCodes) {
            queryParameters['exclusivePreferenceCodes'] = requestParameters.exclusivePreferenceCodes;
        }
        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }
        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TemplateExclusivePreferencesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get template Exclusive Preferences. <p><strong>OperationId:</strong>getTemplateExclusivePreferences</p>
     * Get template Exclusive Preferences
     */
    async getTemplateExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.getTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to get template Preferences. <p><strong>OperationId:</strong>getTemplatePreferences</p>
     * Get template Preferences
     */
    async getTemplatePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }
        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TemplatePreferencesFromJSON)(jsonValue));
    }
    /**
     * You can use this API to get template Preferences. <p><strong>OperationId:</strong>getTemplatePreferences</p>
     * Get template Preferences
     */
    async getTemplatePreferences(requestParameters, initOverrides) {
        const response = await this.getTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Ping Profile Configuration Service <p><strong>OperationId:</strong>pingProfileConfigService</p>
     *  ping
     */
    async pingProfileConfigServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/profile/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     * Ping Profile Configuration Service <p><strong>OperationId:</strong>pingProfileConfigService</p>
     *  ping
     */
    async pingProfileConfigService(requestParameters, initOverrides) {
        const response = await this.pingProfileConfigServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create address formats. <p><strong>OperationId:</strong>postAddressFormats</p>
     * Create address formats
     */
    async postAddressFormatsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/addressFormats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutAddressFormatsRequestToJSON)(requestParameters.addressFormats),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create address formats. <p><strong>OperationId:</strong>postAddressFormats</p>
     * Create address formats
     */
    async postAddressFormats(requestParameters, initOverrides) {
        const response = await this.postAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create credit ratings. <p><strong>OperationId:</strong>postCreditRatings</p>
     * Create credit ratings
     */
    async postCreditRatingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/creditRatings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutCreditRatingsRequestToJSON)(requestParameters.creditRatings),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create credit ratings. <p><strong>OperationId:</strong>postCreditRatings</p>
     * Create credit ratings
     */
    async postCreditRatings(requestParameters, initOverrides) {
        const response = await this.postCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>postExclusivePreferences</p>
     * Create Exclusive Preferences
     */
    async postExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutExclusivePreferencesRequestToJSON)(requestParameters.exclusivePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>postExclusivePreferences</p>
     * Create Exclusive Preferences
     */
    async postExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.postExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create a new Preference group. <p><strong>OperationId:</strong>postPreferenceGroups</p>
     * Create new preference groups
     */
    async postPreferenceGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutPreferenceGroupsRequestToJSON)(requestParameters.preferenceGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create a new Preference group. <p><strong>OperationId:</strong>postPreferenceGroups</p>
     * Create new preference groups
     */
    async postPreferenceGroups(requestParameters, initOverrides) {
        const response = await this.postPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This will allow you to create new preferences. <p><strong>OperationId:</strong>postPreferences</p>
     * Create preferences
     */
    async postPreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutPreferencesRequestToJSON)(requestParameters.hotelPreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This will allow you to create new preferences. <p><strong>OperationId:</strong>postPreferences</p>
     * Create preferences
     */
    async postPreferences(requestParameters, initOverrides) {
        const response = await this.postPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create Profile Name Validations. <p><strong>OperationId:</strong>postProfileNameValidations</p>
     * Create Profile Name Validations
     */
    async postProfileNameValidationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostProfileNameValidationsRequestToJSON)(requestParameters.profileNameValidations),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create Profile Name Validations. <p><strong>OperationId:</strong>postProfileNameValidations</p>
     * Create Profile Name Validations
     */
    async postProfileNameValidations(requestParameters, initOverrides) {
        const response = await this.postProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create profile relationships. <p><strong>OperationId:</strong>postProfileRelationships</p>
     * Create profile relationships
     */
    async postProfileRelationshipsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/relationships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileRelationshipsRequestToJSON)(requestParameters.profileLinks),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create profile relationships. <p><strong>OperationId:</strong>postProfileRelationships</p>
     * Create profile relationships
     */
    async postProfileRelationships(requestParameters, initOverrides) {
        const response = await this.postProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create template Exclusive Preferences. <p><strong>OperationId:</strong>postTemplateExclusivePreferences</p>
     * Create template Exclusive Preferences
     */
    async postTemplateExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTemplateExclusivePreferencesRequestToJSON)(requestParameters.templateExclusivePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create template Exclusive Preferences. <p><strong>OperationId:</strong>postTemplateExclusivePreferences</p>
     * Create template Exclusive Preferences
     */
    async postTemplateExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.postTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create template preferences. <p><strong>OperationId:</strong>postTemplatePreferences</p>
     * Create template preferences
     */
    async postTemplatePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTemplatePreferencesRequestToJSON)(requestParameters.templatePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create template preferences. <p><strong>OperationId:</strong>postTemplatePreferences</p>
     * Create template preferences
     */
    async postTemplatePreferences(requestParameters, initOverrides) {
        const response = await this.postTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change address formats. <p><strong>OperationId:</strong>putAddressFormats</p>
     * Change address formats
     */
    async putAddressFormatsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/addressFormats`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutAddressFormatsRequestToJSON)(requestParameters.addressFormats),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change address formats. <p><strong>OperationId:</strong>putAddressFormats</p>
     * Change address formats
     */
    async putAddressFormats(requestParameters, initOverrides) {
        const response = await this.putAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change credit ratings. <p><strong>OperationId:</strong>putCreditRatings</p>
     * Change credit ratings
     */
    async putCreditRatingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/creditRatings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutCreditRatingsRequestToJSON)(requestParameters.creditRatings),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change credit ratings. <p><strong>OperationId:</strong>putCreditRatings</p>
     * Change credit ratings
     */
    async putCreditRatings(requestParameters, initOverrides) {
        const response = await this.putCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>putExclusivePreferences</p>
     * Change Exclusive Preferences
     */
    async putExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutExclusivePreferencesRequestToJSON)(requestParameters.exclusivePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>putExclusivePreferences</p>
     * Change Exclusive Preferences
     */
    async putExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.putExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API can be used to modify the preference groups. Changes can be made concurrently to multiple groups. <p><strong>OperationId:</strong>putPreferenceGroups</p>
     * Change Preference Groups
     */
    async putPreferenceGroupsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutPreferenceGroupsRequestToJSON)(requestParameters.preferenceGroups),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API can be used to modify the preference groups. Changes can be made concurrently to multiple groups. <p><strong>OperationId:</strong>putPreferenceGroups</p>
     * Change Preference Groups
     */
    async putPreferenceGroups(requestParameters, initOverrides) {
        const response = await this.putPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update and change existing preferences. <p><strong>OperationId:</strong>putPreferences</p>
     * Change preferences
     */
    async putPreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutPreferencesRequestToJSON)(requestParameters.hotelPreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update and change existing preferences. <p><strong>OperationId:</strong>putPreferences</p>
     * Change preferences
     */
    async putPreferences(requestParameters, initOverrides) {
        const response = await this.putPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change Profile Name Validations. <p><strong>OperationId:</strong>putProfileNameValidations</p>
     * Change Profile Name Validations
     */
    async putProfileNameValidationsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileNameValidationsRequestToJSON)(requestParameters.profileNameValidationsToChange),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change Profile Name Validations. <p><strong>OperationId:</strong>putProfileNameValidations</p>
     * Change Profile Name Validations
     */
    async putProfileNameValidations(requestParameters, initOverrides) {
        const response = await this.putProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change profile relationships. <p><strong>OperationId:</strong>putProfileRelationships</p>
     * Change profile relationships
     */
    async putProfileRelationshipsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/relationships`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutProfileRelationshipsRequestToJSON)(requestParameters.profileLinks),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change profile relationships. <p><strong>OperationId:</strong>putProfileRelationships</p>
     * Change profile relationships
     */
    async putProfileRelationships(requestParameters, initOverrides) {
        const response = await this.putProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change template Exclusive Preferences. <p><strong>OperationId:</strong>putTemplateExclusivePreferences</p>
     * Change template Exclusive Preferences
     */
    async putTemplateExclusivePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTemplateExclusivePreferencesRequestToJSON)(requestParameters.templateExclusivePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change template Exclusive Preferences. <p><strong>OperationId:</strong>putTemplateExclusivePreferences</p>
     * Change template Exclusive Preferences
     */
    async putTemplateExclusivePreferences(requestParameters, initOverrides) {
        const response = await this.putTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to change template preferences. <p><strong>OperationId:</strong>putTemplatePreferences</p>
     * Change template preferences
     */
    async putTemplatePreferencesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/preferences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTemplatePreferencesRequestToJSON)(requestParameters.templatePreferences),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * You can use this API to change template preferences. <p><strong>OperationId:</strong>putTemplatePreferences</p>
     * Change template preferences
     */
    async putTemplatePreferences(requestParameters, initOverrides) {
        const response = await this.putTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ProfileConfigurationApi = ProfileConfigurationApi;
/**
 * @export
 */
exports.DeleteProfileNameValidationsProfileTypeEnum = {
    Company: 'Company',
    TravelAgent: 'TravelAgent',
    Source: 'Source'
};
