"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetHotelRoomsHotelFORoomStatusEnum = exports.GetHotelRoomsHotelRoomStatusEnum = exports.FrontDeskOperationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class FrontDeskOperationsApi extends runtime.BaseAPI {
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.roomNumberWildcard !== undefined) {
            queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
        }
        if (requestParameters.hotelRoomStatus) {
            queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
        }
        if (requestParameters.hotelFORoomStatus) {
            queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
        }
        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }
        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }
        if (requestParameters.hotelRoomStartDate !== undefined) {
            queryParameters['hotelRoomStartDate'] = requestParameters.hotelRoomStartDate.toISOString().substr(0, 10);
        }
        if (requestParameters.hotelRoomEndDate !== undefined) {
            queryParameters['hotelRoomEndDate'] = requestParameters.hotelRoomEndDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }
        if (requestParameters.floor !== undefined) {
            queryParameters['floor'] = requestParameters.floor;
        }
        if (requestParameters.includeDueOut !== undefined) {
            queryParameters['includeDueOut'] = requestParameters.includeDueOut;
        }
        if (requestParameters.departureTime !== undefined) {
            queryParameters['departureTime'] = requestParameters.departureTime.toISOString();
        }
        if (requestParameters.roomFeatureCode) {
            queryParameters['roomFeatureCode'] = requestParameters.roomFeatureCode;
        }
        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }
        if (requestParameters.quantity) {
            queryParameters['quantity'] = requestParameters.quantity;
        }
        if (requestParameters.smokingPreference !== undefined) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }
        if (requestParameters.includeAllRoomConditions !== undefined) {
            queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
        }
        if (requestParameters.includeComponentRooms !== undefined) {
            queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
        }
        if (requestParameters.includePseudoRooms !== undefined) {
            queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
        }
        if (requestParameters.includeOORoomCheck !== undefined) {
            queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
        }
        if (requestParameters.connectingRoomsOnly !== undefined) {
            queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
        }
        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }
        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.pseudoRoomsOnly !== undefined) {
            queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
        }
        if (requestParameters.includeAttendentInRoom !== undefined) {
            queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelRoomsFromJSON)(jsonValue));
    }
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRooms(requestParameters, initOverrides) {
        const response = await this.getHotelRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeysRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyInfoFromJSON)(jsonValue));
    }
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeys(requestParameters, initOverrides) {
        const response = await this.getRoomKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckInRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCheckInRequestToJSON)(requestParameters.reservation),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CheckedinReservationFromJSON)(jsonValue));
    }
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckIn(requestParameters, initOverrides) {
        const response = await this.postCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKeyRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRoomKeyRequestToJSON)(requestParameters.roomKey),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyDetailsFromJSON)(jsonValue));
    }
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKey(requestParameters, initOverrides) {
        const response = await this.postRoomKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.FrontDeskOperationsApi = FrontDeskOperationsApi;
/**
 * @export
 */
exports.GetHotelRoomsHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHotelRoomsHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
