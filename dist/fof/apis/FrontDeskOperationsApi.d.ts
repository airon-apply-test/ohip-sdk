/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CheckedinReservation, HotelRooms, PostCheckInRequest, PostRoomKeyRequest, RoomKeyDetails, RoomKeyInfo } from '../models';
export interface GetHotelRoomsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    hotelRoomStatus?: Set<GetHotelRoomsHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<GetHotelRoomsHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    hotelRoomStartDate?: Date;
    hotelRoomEndDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: Date;
    roomFeatureCode?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomKeysRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCheckInOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservation?: PostCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomKeyOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKey?: PostRoomKeyRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class FrontDeskOperationsApi extends runtime.BaseAPI {
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRoomsRaw(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelRooms>>;
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRooms(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelRooms>;
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeysRaw(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInfo>>;
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeys(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInfo>;
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckInRaw(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedinReservation>>;
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckIn(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedinReservation>;
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKeyRaw(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyDetails>>;
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKey(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyDetails>;
}
/**
 * @export
 */
export declare const GetHotelRoomsHotelRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetHotelRoomsHotelRoomStatusEnum = typeof GetHotelRoomsHotelRoomStatusEnum[keyof typeof GetHotelRoomsHotelRoomStatusEnum];
/**
 * @export
 */
export declare const GetHotelRoomsHotelFORoomStatusEnum: {
    readonly Vacant: "Vacant";
    readonly Occupied: "Occupied";
};
export type GetHotelRoomsHotelFORoomStatusEnum = typeof GetHotelRoomsHotelFORoomStatusEnum[keyof typeof GetHotelRoomsHotelFORoomStatusEnum];
