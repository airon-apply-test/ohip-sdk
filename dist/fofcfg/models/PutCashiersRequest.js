"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutCashiersRequestToJSON = exports.PutCashiersRequestFromJSONTyped = exports.PutCashiersRequestFromJSON = exports.instanceOfPutCashiersRequest = void 0;
const runtime_1 = require("../runtime");
const CashierType_1 = require("./CashierType");
const InstanceLink_1 = require("./InstanceLink");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the PutCashiersRequest interface.
 */
function instanceOfPutCashiersRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPutCashiersRequest = instanceOfPutCashiersRequest;
function PutCashiersRequestFromJSON(json) {
    return PutCashiersRequestFromJSONTyped(json, false);
}
exports.PutCashiersRequestFromJSON = PutCashiersRequestFromJSON;
function PutCashiersRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cashiers': !(0, runtime_1.exists)(json, 'cashiers') ? undefined : (json['cashiers'].map(CashierType_1.CashierTypeFromJSON)),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.PutCashiersRequestFromJSONTyped = PutCashiersRequestFromJSONTyped;
function PutCashiersRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cashiers': value.cashiers === undefined ? undefined : (value.cashiers.map(CashierType_1.CashierTypeToJSON)),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.PutCashiersRequestToJSON = PutCashiersRequestToJSON;
