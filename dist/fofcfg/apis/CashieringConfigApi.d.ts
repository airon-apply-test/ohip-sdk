/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AdjustmentCodes, ArticlesInfo, AuthorizerGroups, CashierNumber, CashiersDetails, ChangeCompTypesRequest, ChangeFolioTypeLegendMappingConfigRequest, CompTypesDetails, CompTypesStatus, CurrencyExchangeServiceTaxes, DailyPlanCodes, ExchangeRateType, ExpenseArrangementCodes, FiscalFolioParameters, FolioTypeLegendMappingConfigStatus, FolioTypeLegendMappingsConfigDetails, PostAuthorizerGroupsRequest, PostCompTypesRequest, PostFolioTypeLegendMappingConfigRequest, PutAdjustmentCodesRequest, PutArticlesRequest, PutAuthorizationConfigRuleRequest, PutAuthorizerGroupsRequest, PutCashiersRequest, PutCurrencyExchangeServiceTaxesRequest, PutDailyPlanCodesRequest, PutExpenseArrangementCodesRequest, PutFiscalFolioParametersRequest, Status, TaxTypes } from '../models';
export interface ChangeCompTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesToBeChanged?: ChangeCompTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeFolioTypeLegendMappingConfigOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigToBeChanged?: ChangeFolioTypeLegendMappingConfigRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCode?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteArticlesRequest {
    hotelId?: string;
    articleCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articleHotelId?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    description?: Array<string>;
    transactionCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    availableForPostIt?: boolean;
    color?: DeleteArticlesColorEnum;
    universalProductCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAuthorizationConfigRuleRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: Array<string>;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceCodeHotelId?: string;
    sourceCode?: string;
    rateCategory?: string;
    rateCode?: Array<string>;
    guaranteeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAuthorizerGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroup?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCurrencyExchangeServiceTaxesRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteExpenseArrangementCodesRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteFiscalFolioParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    partner?: Array<string>;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAdjustmentCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetArticlesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodes?: Array<string>;
    articleCodes?: Array<string>;
    universalProductCode?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAuthorizerGroupsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAvailableCashierNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCashiersRequest {
    cashierIDs?: Array<number>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    name?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCompTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypeCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCurrencyExchangeServiceTaxesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDailyPlanCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExpenseArrangementCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFiscalFolioParametersRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    internal?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFolioTypeLegendMappingsConfigRequest {
    hotelId?: string;
    legendCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFuturePastExchangeRatesRequest {
    currencyCode?: string;
    hotelId?: string;
    exchangeTypes?: GetFuturePastExchangeRatesExchangeTypesEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dateRangeStart?: Date;
    dateRangeEnd?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTaxTypesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypeCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: PutAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostArticlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles?: PutArticlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAuthorizationConfigRuleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules?: PutAuthorizationConfigRuleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAuthorizerGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroups?: PostAuthorizerGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCashiersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers?: PutCashiersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCompTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesCriteria?: PostCompTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCurrencyExchangeServiceTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes?: PutCurrencyExchangeServiceTaxesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostExpenseArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes?: PutExpenseArrangementCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostFolioTypeLegendMappingConfigOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigCriteria?: PostFolioTypeLegendMappingConfigRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAdjustmentCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: PutAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutArticlesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles?: PutArticlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAuthorizationConfigRuleOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules?: PutAuthorizationConfigRuleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAuthorizerGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsToChange?: PutAuthorizerGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCashiersOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers?: PutCashiersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCurrencyExchangeServiceTaxesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes?: PutCurrencyExchangeServiceTaxesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutDailyPlanCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyPlanCodes?: PutDailyPlanCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutExpenseArrangementCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes?: PutExpenseArrangementCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutFiscalFolioParametersOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioParameters?: PutFiscalFolioParametersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveCompTypesRequest {
    compTypesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveFolioTypeLegendMappingConfigRequest {
    legendCode?: string;
    folioType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CashieringConfigApi extends runtime.BaseAPI {
    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    changeCompTypesRaw(requestParameters: ChangeCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesStatus>>;
    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    changeCompTypes(requestParameters: ChangeCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesStatus>;
    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    changeFolioTypeLegendMappingConfigRaw(requestParameters: ChangeFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingConfigStatus>>;
    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    changeFolioTypeLegendMappingConfig(requestParameters: ChangeFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingConfigStatus>;
    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    deleteAdjustmentCodesRaw(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    deleteAdjustmentCodes(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    deleteArticlesRaw(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    deleteArticles(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    deleteAuthorizationConfigRuleRaw(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    deleteAuthorizationConfigRule(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    deleteAuthorizerGroupsRaw(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    deleteAuthorizerGroups(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    deleteCurrencyExchangeServiceTaxesRaw(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    deleteCurrencyExchangeServiceTaxes(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    deleteExpenseArrangementCodesRaw(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    deleteExpenseArrangementCodes(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    deleteFiscalFolioParametersRaw(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    deleteFiscalFolioParameters(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    getAdjustmentCodesRaw(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentCodes>>;
    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    getAdjustmentCodes(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentCodes>;
    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesInfo>>;
    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    getArticles(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesInfo>;
    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    getAuthorizerGroupsRaw(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizerGroups>>;
    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    getAuthorizerGroups(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizerGroups>;
    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    getAvailableCashierNumberRaw(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierNumber>>;
    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    getAvailableCashierNumber(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierNumber>;
    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    getCashiersRaw(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashiersDetails>>;
    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    getCashiers(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashiersDetails>;
    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    getCompTypesRaw(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesDetails>>;
    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    getCompTypes(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesDetails>;
    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    getCurrencyExchangeServiceTaxesRaw(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeServiceTaxes>>;
    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    getCurrencyExchangeServiceTaxes(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeServiceTaxes>;
    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    getDailyPlanCodesRaw(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyPlanCodes>>;
    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    getDailyPlanCodes(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyPlanCodes>;
    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    getExpenseArrangementCodesRaw(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseArrangementCodes>>;
    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    getExpenseArrangementCodes(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseArrangementCodes>;
    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    getFiscalFolioParametersRaw(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalFolioParameters>>;
    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    getFiscalFolioParameters(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalFolioParameters>;
    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    getFolioTypeLegendMappingsConfigRaw(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingsConfigDetails>>;
    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    getFolioTypeLegendMappingsConfig(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingsConfigDetails>;
    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    getFuturePastExchangeRatesRaw(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExchangeRateType>>>;
    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    getFuturePastExchangeRates(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExchangeRateType>>;
    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    getTaxTypesRaw(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxTypes>>;
    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    getTaxTypes(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxTypes>;
    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    postAdjustmentCodesRaw(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    postAdjustmentCodes(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    postArticlesRaw(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    postArticles(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    postAuthorizationConfigRuleRaw(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    postAuthorizationConfigRule(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    postAuthorizerGroupsRaw(requestParameters: PostAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    postAuthorizerGroups(requestParameters: PostAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    postCashiersRaw(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    postCashiers(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    postCompTypesRaw(requestParameters: PostCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    postCompTypes(requestParameters: PostCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    postCurrencyExchangeServiceTaxesRaw(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    postCurrencyExchangeServiceTaxes(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    postExpenseArrangementCodesRaw(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    postExpenseArrangementCodes(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    postFolioTypeLegendMappingConfigRaw(requestParameters: PostFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    postFolioTypeLegendMappingConfig(requestParameters: PostFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    putAdjustmentCodesRaw(requestParameters: PutAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    putAdjustmentCodes(requestParameters: PutAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    putArticlesRaw(requestParameters: PutArticlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    putArticles(requestParameters: PutArticlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    putAuthorizationConfigRuleRaw(requestParameters: PutAuthorizationConfigRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    putAuthorizationConfigRule(requestParameters: PutAuthorizationConfigRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    putAuthorizerGroupsRaw(requestParameters: PutAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    putAuthorizerGroups(requestParameters: PutAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    putCashiersRaw(requestParameters: PutCashiersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    putCashiers(requestParameters: PutCashiersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    putCurrencyExchangeServiceTaxesRaw(requestParameters: PutCurrencyExchangeServiceTaxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    putCurrencyExchangeServiceTaxes(requestParameters: PutCurrencyExchangeServiceTaxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    putDailyPlanCodesRaw(requestParameters: PutDailyPlanCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    putDailyPlanCodes(requestParameters: PutDailyPlanCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    putExpenseArrangementCodesRaw(requestParameters: PutExpenseArrangementCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    putExpenseArrangementCodes(requestParameters: PutExpenseArrangementCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    putFiscalFolioParametersRaw(requestParameters: PutFiscalFolioParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    putFiscalFolioParameters(requestParameters: PutFiscalFolioParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    removeCompTypesRaw(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    removeCompTypes(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    removeFolioTypeLegendMappingConfigRaw(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    removeFolioTypeLegendMappingConfig(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const DeleteArticlesColorEnum: {
    readonly Red: "Red";
    readonly DarkRed: "DarkRed";
    readonly Green: "Green";
    readonly DarkGreen: "DarkGreen";
    readonly LightGreen: "LightGreen";
    readonly Orange: "Orange";
    readonly White: "White";
    readonly Yellow: "Yellow";
    readonly DarkYellow: "DarkYellow";
    readonly Purple: "Purple";
    readonly Brown: "Brown";
    readonly Gray: "Gray";
    readonly Aqua: "Aqua";
    readonly Chocolate: "Chocolate";
    readonly Blue: "Blue";
    readonly LightBlue: "LightBlue";
    readonly DarkBlue: "DarkBlue";
    readonly Cyan: "Cyan";
    readonly DarkCyan: "DarkCyan";
    readonly Magenta: "Magenta";
    readonly DarkMagenta: "DarkMagenta";
    readonly Black: "Black";
};
export type DeleteArticlesColorEnum = typeof DeleteArticlesColorEnum[keyof typeof DeleteArticlesColorEnum];
/**
 * @export
 */
export declare const GetFuturePastExchangeRatesExchangeTypesEnum: {
    readonly Cash: "Cash";
    readonly Settlement: "Settlement";
    readonly Posting: "Posting";
    readonly Check: "Check";
    readonly TaCommission: "TACommission";
    readonly Membership: "Membership";
    readonly Certificate: "Certificate";
};
export type GetFuturePastExchangeRatesExchangeTypesEnum = typeof GetFuturePastExchangeRatesExchangeTypesEnum[keyof typeof GetFuturePastExchangeRatesExchangeTypesEnum];
