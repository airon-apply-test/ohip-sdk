"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class HotelConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to update Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>changeHotelRoomMaintenanceReasons</p>
     * Change Hotel Room Maintenance Reasons
     */
    async changeHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomMaintenanceReasons/{reasonCode}`.replace(`{${"reasonCode"}}`, encodeURIComponent(String(requestParameters.reasonCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeHotelRoomMaintenanceReasonsRequestToJSON)(requestParameters.hotelRoomMaintenanceReasonsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>changeHotelRoomMaintenanceReasons</p>
     * Change Hotel Room Maintenance Reasons
     */
    async changeHotelRoomMaintenanceReasons(requestParameters, initOverrides) {
        const response = await this.changeHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update housekeeping room schedules. <p><strong>OperationId:</strong>changeHousekeepingRoomSchedules</p>
     * Change housekeeping room schedules
     */
    async changeHousekeepingRoomSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingRoomSchedules/{roomScheduleId}`.replace(`{${"roomScheduleId"}}`, encodeURIComponent(String(requestParameters.roomScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeHousekeepingRoomSchedulesRequestToJSON)(requestParameters.housekeepingRoomSchedulesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update housekeeping room schedules. <p><strong>OperationId:</strong>changeHousekeepingRoomSchedules</p>
     * Change housekeeping room schedules
     */
    async changeHousekeepingRoomSchedules(requestParameters, initOverrides) {
        const response = await this.changeHousekeepingRoomSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update Housekeeping Sections. <p><strong>OperationId:</strong>changeHousekeepingSections</p>
     * Change Housekeeping Sections
     */
    async changeHousekeepingSectionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingSections/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeHousekeepingSectionsRequestToJSON)(requestParameters.housekeepingSectionsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update Housekeeping Sections. <p><strong>OperationId:</strong>changeHousekeepingSections</p>
     * Change Housekeeping Sections
     */
    async changeHousekeepingSections(requestParameters, initOverrides) {
        const response = await this.changeHousekeepingSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update template floors. <p><strong>OperationId:</strong>changeTemplateFloors</p>
     * Change template floors
     */
    async changeTemplateFloorsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/templateFloors/{templateFloorsId}`.replace(`{${"templateFloorsId"}}`, encodeURIComponent(String(requestParameters.templateFloorsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangeTemplateFloorsRequestToJSON)(requestParameters.templateFloorsToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update template floors. <p><strong>OperationId:</strong>changeTemplateFloors</p>
     * Change template floors
     */
    async changeTemplateFloors(requestParameters, initOverrides) {
        const response = await this.changeTemplateFloorsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete new Room Type templates. <p><strong>OperationId:</strong>deleteRoomTypeTemplates</p>
     * Delete new Room Type templates
     */
    async deleteRoomTypeTemplatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/roomTypes/{roomTypeTemplatesId}`.replace(`{${"roomTypeTemplatesId"}}`, encodeURIComponent(String(requestParameters.roomTypeTemplatesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete new Room Type templates. <p><strong>OperationId:</strong>deleteRoomTypeTemplates</p>
     * Delete new Room Type templates
     */
    async deleteRoomTypeTemplates(requestParameters, initOverrides) {
        const response = await this.deleteRoomTypeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete a Room Type from a property. <p><strong>OperationId:</strong>deleteRoomTypes</p>
     * Delete Room Types
     */
    async deleteRoomTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomTypes/{roomTypeId}`.replace(`{${"roomTypeId"}}`, encodeURIComponent(String(requestParameters.roomTypeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete a Room Type from a property. <p><strong>OperationId:</strong>deleteRoomTypes</p>
     * Delete Room Types
     */
    async deleteRoomTypes(requestParameters, initOverrides) {
        const response = await this.deleteRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>getHotelRoomMaintenanceReasons</p>
     * Get Hotel Room Maintenance Reasons
     */
    async getHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.roomMaintenanceReasonCodes) {
            queryParameters['roomMaintenanceReasonCodes'] = requestParameters.roomMaintenanceReasonCodes;
        }
        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomMaintenanceReasons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelRoomMaintenanceReasonsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>getHotelRoomMaintenanceReasons</p>
     * Get Hotel Room Maintenance Reasons
     */
    async getHotelRoomMaintenanceReasons(requestParameters, initOverrides) {
        const response = await this.getHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get housekeeping room schedules. <p><strong>OperationId:</strong>getHousekeepingRoomSchedules</p>
     * Get housekeeping room schedules
     */
    async getHousekeepingRoomSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }
        if (requestParameters.housekeepingRoomScheduleCodes) {
            queryParameters['housekeepingRoomScheduleCodes'] = requestParameters.housekeepingRoomScheduleCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingRoomSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HousekeepingRoomSchedulesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get housekeeping room schedules. <p><strong>OperationId:</strong>getHousekeepingRoomSchedules</p>
     * Get housekeeping room schedules
     */
    async getHousekeepingRoomSchedules(requestParameters, initOverrides) {
        const response = await this.getHousekeepingRoomSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get Housekeeping Sections. <p><strong>OperationId:</strong>getHousekeepingSections</p>
     * Get Housekeeping Sections
     */
    async getHousekeepingSectionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.housekeepingSectionsCodes) {
            queryParameters['housekeepingSectionsCodes'] = requestParameters.housekeepingSectionsCodes;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingSections`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HousekeepingSectionsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get Housekeeping Sections. <p><strong>OperationId:</strong>getHousekeepingSections</p>
     * Get Housekeeping Sections
     */
    async getHousekeepingSections(requestParameters, initOverrides) {
        const response = await this.getHousekeepingSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API accepts the room type template request search criteria and gets the Room Type templates. <p><strong>OperationId:</strong>getRoomTypeTemplates</p>
     * Get Room Type Templates
     */
    async getRoomTypeTemplatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }
        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }
        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }
        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }
        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/roomTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomTypeTemplatesDetailsFromJSON)(jsonValue));
    }
    /**
     * This API accepts the room type template request search criteria and gets the Room Type templates. <p><strong>OperationId:</strong>getRoomTypeTemplates</p>
     * Get Room Type Templates
     */
    async getRoomTypeTemplates(requestParameters, initOverrides) {
        const response = await this.getRoomTypeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to return room types for a specific property based on search criteria such as roomClassCodes, roomTypeCodes, physical, pseudo, etc.<p><strong>OperationId:</strong>getRoomTypes</p>
     * Get hotel room types
     */
    async getRoomTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.accessible !== undefined) {
            queryParameters['accessible'] = requestParameters.accessible;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }
        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }
        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }
        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }
        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomTypesDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to return room types for a specific property based on search criteria such as roomClassCodes, roomTypeCodes, physical, pseudo, etc.<p><strong>OperationId:</strong>getRoomTypes</p>
     * Get hotel room types
     */
    async getRoomTypes(requestParameters, initOverrides) {
        const response = await this.getRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to return rooms for a specific property based on search criteria such as roomClassCodes, roomTypeCodes, room, etc.<p><strong>OperationId:</strong>getRooms</p>
     * Get hotel rooms
     */
    async getRoomsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }
        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }
        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }
        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }
        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to return rooms for a specific property based on search criteria such as roomClassCodes, roomTypeCodes, room, etc.<p><strong>OperationId:</strong>getRooms</p>
     * Get hotel rooms
     */
    async getRooms(requestParameters, initOverrides) {
        const response = await this.getRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get template floors. <p><strong>OperationId:</strong>getTemplateFloors</p>
     * Get template floors
     */
    async getTemplateFloorsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.floors) {
            queryParameters['floors'] = requestParameters.floors;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/templateFloors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TemplateFloorsDetailsFromJSON)(jsonValue));
    }
    /**
     * Use this API to get template floors. <p><strong>OperationId:</strong>getTemplateFloors</p>
     * Get template floors
     */
    async getTemplateFloors(requestParameters, initOverrides) {
        const response = await this.getTemplateFloorsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>postHotelRoomMaintenanceReasons</p>
     * Create Hotel Room Maintenance Reasons
     */
    async postHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomMaintenanceReasons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostHotelRoomMaintenanceReasonsRequestToJSON)(requestParameters.hotelRoomMaintenanceReasonsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>postHotelRoomMaintenanceReasons</p>
     * Create Hotel Room Maintenance Reasons
     */
    async postHotelRoomMaintenanceReasons(requestParameters, initOverrides) {
        const response = await this.postHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create housekeeping room schedules. <p><strong>OperationId:</strong>postHousekeepingRoomSchedules</p>
     * Create housekeeping room schedules
     */
    async postHousekeepingRoomSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingRoomSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostHousekeepingRoomSchedulesRequestToJSON)(requestParameters.housekeepingRoomSchedulesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create housekeeping room schedules. <p><strong>OperationId:</strong>postHousekeepingRoomSchedules</p>
     * Create housekeeping room schedules
     */
    async postHousekeepingRoomSchedules(requestParameters, initOverrides) {
        const response = await this.postHousekeepingRoomSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create Housekeeping Sections. <p><strong>OperationId:</strong>postHousekeepingSections</p>
     * Create Housekeeping Sections
     */
    async postHousekeepingSectionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingSections`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostHousekeepingSectionsRequestToJSON)(requestParameters.housekeepingSectionsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create Housekeeping Sections. <p><strong>OperationId:</strong>postHousekeepingSections</p>
     * Create Housekeeping Sections
     */
    async postHousekeepingSections(requestParameters, initOverrides) {
        const response = await this.postHousekeepingSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to Use this API to create new Room Type templates. <p><strong>OperationId:</strong>postRoomTypeTemplates</p>
     * Create Room Type Templates
     */
    async postRoomTypeTemplatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/roomTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRoomTypeTemplatesRequestToJSON)(requestParameters.roomTypeTemplatesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API is used to Use this API to create new Room Type templates. <p><strong>OperationId:</strong>postRoomTypeTemplates</p>
     * Create Room Type Templates
     */
    async postRoomTypeTemplates(requestParameters, initOverrides) {
        const response = await this.postRoomTypeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create new room types for a property. A list of new room types can be passed as part of the request to Use this API to create multiple rooms in one request. <p><strong>OperationId:</strong>postRoomTypes</p>
     * Create a new room type
     */
    async postRoomTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostRoomTypesRequestToJSON)(requestParameters.roomTypesCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create new room types for a property. A list of new room types can be passed as part of the request to Use this API to create multiple rooms in one request. <p><strong>OperationId:</strong>postRoomTypes</p>
     * Create a new room type
     */
    async postRoomTypes(requestParameters, initOverrides) {
        const response = await this.postRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to create template floors. <p><strong>OperationId:</strong>postTemplateFloors</p>
     * Create template floors
     */
    async postTemplateFloorsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/templateFloors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostTemplateFloorsRequestToJSON)(requestParameters.templateFloorsCriteria),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to create template floors. <p><strong>OperationId:</strong>postTemplateFloors</p>
     * Create template floors
     */
    async postTemplateFloors(requestParameters, initOverrides) {
        const response = await this.postTemplateFloorsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to update a Room Type template. Use this API to updates can be made concurrently to multiple templates by passing Collection of Room Type templates with the new values. <p><strong>OperationId:</strong>putRoomTypeTemplates</p>
     * Change Room Type Templates
     */
    async putRoomTypeTemplatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/roomTypes/{roomTypeTemplatesId}`.replace(`{${"roomTypeTemplatesId"}}`, encodeURIComponent(String(requestParameters.roomTypeTemplatesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutRoomTypeTemplatesRequestToJSON)(requestParameters.roomTypeTemplatesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API is used to update a Room Type template. Use this API to updates can be made concurrently to multiple templates by passing Collection of Room Type templates with the new values. <p><strong>OperationId:</strong>putRoomTypeTemplates</p>
     * Change Room Type Templates
     */
    async putRoomTypeTemplates(requestParameters, initOverrides) {
        const response = await this.putRoomTypeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to update a Room Type from a property. A list of room types that need to be modified can also passed as part of the request. <p><strong>OperationId:</strong>putRoomTypes</p>
     * Update a Room Type
     */
    async putRoomTypesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomTypes/{roomTypeId}`.replace(`{${"roomTypeId"}}`, encodeURIComponent(String(requestParameters.roomTypeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutRoomTypesRequestToJSON)(requestParameters.roomTypesToBeChanged),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to update a Room Type from a property. A list of room types that need to be modified can also passed as part of the request. <p><strong>OperationId:</strong>putRoomTypes</p>
     * Update a Room Type
     */
    async putRoomTypes(requestParameters, initOverrides) {
        const response = await this.putRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>removeHotelRoomMaintenanceReasons</p>
     * Delete Hotel Room Maintenance Reasons
     */
    async removeHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomMaintenanceReasons/{reasonCode}`.replace(`{${"reasonCode"}}`, encodeURIComponent(String(requestParameters.reasonCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Hotel Room Maintenance Reasons. <p><strong>OperationId:</strong>removeHotelRoomMaintenanceReasons</p>
     * Delete Hotel Room Maintenance Reasons
     */
    async removeHotelRoomMaintenanceReasons(requestParameters, initOverrides) {
        const response = await this.removeHotelRoomMaintenanceReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete housekeeping room schedules. <p><strong>OperationId:</strong>removeHousekeepingRoomSchedules</p>
     * Delete housekeeping room schedules
     */
    async removeHousekeepingRoomSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/roomTypeCodes/{roomTypeCode}/housekeepingRoomSchedules/{roomScheduleId}`.replace(`{${"roomScheduleId"}}`, encodeURIComponent(String(requestParameters.roomScheduleId))).replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete housekeeping room schedules. <p><strong>OperationId:</strong>removeHousekeepingRoomSchedules</p>
     * Delete housekeeping room schedules
     */
    async removeHousekeepingRoomSchedules(requestParameters, initOverrides) {
        const response = await this.removeHousekeepingRoomSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Housekeeping Sections. <p><strong>OperationId:</strong>removeHousekeepingSections</p>
     * Delete Housekeeping Sections
     */
    async removeHousekeepingSectionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingSections/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Housekeeping Sections. <p><strong>OperationId:</strong>removeHousekeepingSections</p>
     * Delete Housekeeping Sections
     */
    async removeHousekeepingSections(requestParameters, initOverrides) {
        const response = await this.removeHousekeepingSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete template floors. <p><strong>OperationId:</strong>removeTemplateFloors</p>
     * Delete template floors
     */
    async removeTemplateFloorsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/templateFloors/{templateFloorsId}`.replace(`{${"templateFloorsId"}}`, encodeURIComponent(String(requestParameters.templateFloorsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete template floors. <p><strong>OperationId:</strong>removeTemplateFloors</p>
     * Delete template floors
     */
    async removeTemplateFloors(requestParameters, initOverrides) {
        const response = await this.removeTemplateFloorsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.HotelConfigApi = HotelConfigApi;
