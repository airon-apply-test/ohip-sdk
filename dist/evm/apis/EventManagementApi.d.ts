/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Event, Events } from '../models';
export interface GetEventRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetEventFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventsMultipleHotelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    eventStartDate?: Date;
    eventEndDate?: Date;
    blockId?: Array<string>;
    eventId?: Array<string>;
    category?: Set<GetEventsMultipleHotelsCategoryEnum>;
    name?: Array<string>;
    attachedProfileId?: Array<string>;
    eventStatusCodes?: Array<string>;
    eventTypeCodes?: Array<string>;
    functionSpaceCodes?: Array<string>;
    includeInactive?: boolean;
    includeAlternateEvents?: boolean;
    includeSubEvents?: boolean;
    cateringEventOrderBy?: GetEventsMultipleHotelsCateringEventOrderByEnum;
    fetchInstructions?: Set<GetEventsMultipleHotelsFetchInstructionsEnum>;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEventsOneHotelRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventStartDate?: Date;
    eventEndDate?: Date;
    blockId?: Array<string>;
    eventId?: Array<string>;
    attachedProfileId?: string;
    eventStatusCodes?: Array<string>;
    eventTypeCodes?: Array<string>;
    functionSpaceCodes?: Array<string>;
    includeInactive?: boolean;
    includeAlternateEvents?: boolean;
    includeSubEvents?: boolean;
    cateringEventOrderBy?: GetEventsOneHotelCateringEventOrderByEnum;
    fetchInstructions?: Set<GetEventsOneHotelFetchInstructionsEnum>;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class EventManagementApi extends runtime.BaseAPI {
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEventRaw(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>>;
    /**
     * This API will allow you to retrieve the details of one event by specifying the event ID in the path. Event details such as event type, event description, start date / time and end date time, attendees, function space, setup style, function space rate, and more  will be returned. You can also add fetch instructions to specify what additional event data, such as block information, revenue information, event notes, and master / sub event information you would like returned in the response. If you don&apos;t know the eventID, please use getEvents API to find the event and its respective eventID. <p><strong>OperationId:</strong>getEvent</p>
     * Get an Event
     */
    getEvent(requestParameters: GetEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event>;
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotelsRaw(requestParameters: GetEventsMultipleHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Events>>;
    /**
     * This API fetches catering events for multiple hotels, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsMultipleHotels</p>
     * Get Events
     */
    getEventsMultipleHotels(requestParameters: GetEventsMultipleHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Events>;
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotelRaw(requestParameters: GetEventsOneHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Events>>;
    /**
     * This API fetches catering events for a specific hotel, based on search criteria such as dates, linked block, status, function space, and more. The data returned in the result contains, event type, description, dates and times, attendees, function space, setup style and more. <p><strong>OperationId:</strong>getEventsOneHotel</p>
     * Get Events
     */
    getEventsOneHotel(requestParameters: GetEventsOneHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Events>;
}
/**
 * @export
 */
export declare const GetEventFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventFetchInstructionsEnum = typeof GetEventFetchInstructionsEnum[keyof typeof GetEventFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsCategoryEnum: {
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Agent: "Agent";
    readonly Contact: "Contact";
    readonly Company: "Company";
    readonly Account: "Account";
};
export type GetEventsMultipleHotelsCategoryEnum = typeof GetEventsMultipleHotelsCategoryEnum[keyof typeof GetEventsMultipleHotelsCategoryEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsCateringEventOrderByEnum: {
    readonly StartDateTimeAsc: "StartDateTimeAsc";
    readonly StartDateTimeMasterSubAsc: "StartDateTimeMasterSubAsc";
};
export type GetEventsMultipleHotelsCateringEventOrderByEnum = typeof GetEventsMultipleHotelsCateringEventOrderByEnum[keyof typeof GetEventsMultipleHotelsCateringEventOrderByEnum];
/**
 * @export
 */
export declare const GetEventsMultipleHotelsFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventsMultipleHotelsFetchInstructionsEnum = typeof GetEventsMultipleHotelsFetchInstructionsEnum[keyof typeof GetEventsMultipleHotelsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetEventsOneHotelCateringEventOrderByEnum: {
    readonly StartDateTimeAsc: "StartDateTimeAsc";
    readonly StartDateTimeMasterSubAsc: "StartDateTimeMasterSubAsc";
};
export type GetEventsOneHotelCateringEventOrderByEnum = typeof GetEventsOneHotelCateringEventOrderByEnum[keyof typeof GetEventsOneHotelCateringEventOrderByEnum];
/**
 * @export
 */
export declare const GetEventsOneHotelFetchInstructionsEnum: {
    readonly EventDetails: "EventDetails";
    readonly BlocksInfo: "BlocksInfo";
    readonly Indicators: "Indicators";
    readonly Notes: "Notes";
    readonly SubEventsInfo: "SubEventsInfo";
    readonly AlternateEventsInfo: "AlternateEventsInfo";
    readonly MasterEventInfo: "MasterEventInfo";
    readonly Revenues: "Revenues";
    readonly IncludeInactiveSubEventsInfo: "IncludeInactiveSubEventsInfo";
    readonly IncludeInactiveMasterEventInfo: "IncludeInactiveMasterEventInfo";
    readonly ActualEventDetails: "ActualEventDetails";
    readonly EligibleMasterEventDetails: "EligibleMasterEventDetails";
};
export type GetEventsOneHotelFetchInstructionsEnum = typeof GetEventsOneHotelFetchInstructionsEnum[keyof typeof GetEventsOneHotelFetchInstructionsEnum];
