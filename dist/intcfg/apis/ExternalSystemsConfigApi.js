"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetHotelInterfacesInterfaceTypesEnum = exports.GetHotelInterfaceSchemasInterfaceTypesEnum = exports.GetHotelInterfaceFailedMessagesInterfaceTypesEnum = exports.GetHotelInterfaceErrorsInterfaceTypesEnum = exports.GetDeliveryMethodsUsagesEnum = exports.DeleteDeliveryMethodsOptionsEnum = exports.DeleteDeliveryMethodsTypeEnum = exports.ExternalSystemsConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ExternalSystemsConfigApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    async clearCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/config/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    async clearCache(requestParameters, initOverrides) {
        const response = await this.clearCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.options) {
            queryParameters['options'] = requestParameters.options;
        }
        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethods(requestParameters, initOverrides) {
        const response = await this.deleteDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterfaceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.logo !== undefined) {
            queryParameters['logo'] = requestParameters.logo;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/hotelInerface`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterface(requestParameters, initOverrides) {
        const response = await this.deleteHotelInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRightRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.right !== undefined) {
            queryParameters['right'] = requestParameters.right;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        if (requestParameters.interfaceRightDescription !== undefined) {
            queryParameters['interfaceRightDescription'] = requestParameters.interfaceRightDescription;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceRights`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRight(requestParameters, initOverrides) {
        const response = await this.deleteInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisherRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.subscriberHotelId !== undefined) {
            queryParameters['subscriberHotelId'] = requestParameters.subscriberHotelId;
        }
        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisher(requestParameters, initOverrides) {
        const response = await this.deletePublisherRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }
        if (requestParameters.usages) {
            queryParameters['usages'] = requestParameters.usages;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedDeliveryMethodsFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethods(requestParameters, initOverrides) {
        const response = await this.getDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailablePropertiesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.interfaceCodes) {
            queryParameters['interfaceCodes'] = requestParameters.interfaceCodes;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaces/{interfaceId}/databases/{databaseId}/availableResorts`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedExternalDatabaseAvailablePropertiesFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailableProperties(requestParameters, initOverrides) {
        const response = await this.getExternalDatabaseAvailablePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistryRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.machine !== undefined) {
            queryParameters['machine'] = requestParameters.machine;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceControllerRegistry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedHotelInterfaceControllerRegistryFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistry(requestParameters, initOverrides) {
        const response = await this.getHotelInterfaceControllerRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrorsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }
        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceErrors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedHotelInterfaceErrorsFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrors(requestParameters, initOverrides) {
        const response = await this.getHotelInterfaceErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }
        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceFailedMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedHotelInterfaceFailedMessagesFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessages(requestParameters, initOverrides) {
        const response = await this.getHotelInterfaceFailedMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemasRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }
        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceSchemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedHotelInterfaceSchemasFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemas(requestParameters, initOverrides) {
        const response = await this.getHotelInterfaceSchemasRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfacesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }
        if (requestParameters.logosCodes) {
            queryParameters['logosCodes'] = requestParameters.logosCodes;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotelInterfaceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedHotelInterfacesFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfaces(requestParameters, initOverrides) {
        const response = await this.getHotelInterfacesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRightsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceRights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.InterfaceRightTypeFromJSON));
    }
    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRights(requestParameters, initOverrides) {
        const response = await this.getInterfaceRightsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/publishers`.replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedPublishersFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishers(requestParameters, initOverrides) {
        const response = await this.getPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.uDFName !== undefined) {
            queryParameters['uDFName'] = requestParameters.uDFName;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/udfMappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FetchedUDFMappingsFromJSON)(jsonValue));
    }
    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappings(requestParameters, initOverrides) {
        const response = await this.getUDFMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    async pingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/config/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    async ping(requestParameters, initOverrides) {
        const response = await this.pingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostDeliveryMethodsRequestToJSON)(requestParameters.createDeliveryMethods),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethods(requestParameters, initOverrides) {
        const response = await this.postDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostPublishersRequestToJSON)(requestParameters.createPublishers),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishers(requestParameters, initOverrides) {
        const response = await this.postPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethodsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutDeliveryMethodsRequestToJSON)(requestParameters.changeDeliveryMethods),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedDeliveryMethodsFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethods(requestParameters, initOverrides) {
        const response = await this.putDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRightRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/interfaceRights`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutInterfaceRightRequestToJSON)(requestParameters.changeInterfaceRight),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedInterfaceRightFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRight(requestParameters, initOverrides) {
        const response = await this.putInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMappingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/udfMappings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutUDFMappingRequestToJSON)(requestParameters.changeUDFMapping),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedUDFMappingFromJSON)(jsonValue));
    }
    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMapping(requestParameters, initOverrides) {
        const response = await this.putUDFMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.ExternalSystemsConfigApi = ExternalSystemsConfigApi;
/**
 * @export
 */
exports.DeleteDeliveryMethodsTypeEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush'
};
/**
 * @export
 */
exports.DeleteDeliveryMethodsOptionsEnum = {
    Email: 'Email',
    Fax: 'Fax',
    TextMessage: 'TextMessage',
    Sftp: 'Sftp'
};
/**
 * @export
 */
exports.GetDeliveryMethodsUsagesEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush'
};
/**
 * @export
 */
exports.GetHotelInterfaceErrorsInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
};
/**
 * @export
 */
exports.GetHotelInterfaceFailedMessagesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
};
/**
 * @export
 */
exports.GetHotelInterfaceSchemasInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
};
/**
 * @export
 */
exports.GetHotelInterfacesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
};
