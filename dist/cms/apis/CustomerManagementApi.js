"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud API for Customer Management Service
 * This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTrackItItemsAssignedStatusesEnum = exports.GetTrackItItemsActionStatusesEnum = exports.GetTrackItItemsTrackItGroupsEnum = exports.GetCalendarTasksClassCodesEnum = exports.GetCalendarTasksCompletionStatusEnum = exports.CustomerManagementApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class CustomerManagementApi extends runtime.BaseAPI {
    /**
     * This API will allow you to delete a Calendar Task. <p><strong>OperationId:</strong>deleteCalendarTask</p>
     * Delete a Calendar Task
     */
    async deleteCalendarTaskRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to delete a Calendar Task. <p><strong>OperationId:</strong>deleteCalendarTask</p>
     * Delete a Calendar Task
     */
    async deleteCalendarTask(requestParameters, initOverrides) {
        const response = await this.deleteCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete an attachment associated with the calendar task <p><strong>OperationId:</strong>deleteCalendarTaskAttachment</p>
     * Delete a Calendar Task attachment
     */
    async deleteCalendarTaskAttachmentRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.linkedToId !== undefined) {
            queryParameters['linkedToId'] = requestParameters.linkedToId;
        }
        if (requestParameters.attachId !== undefined) {
            queryParameters['attachId'] = requestParameters.attachId;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/activities/tasks/attachment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Delete an attachment associated with the calendar task <p><strong>OperationId:</strong>deleteCalendarTaskAttachment</p>
     * Delete a Calendar Task attachment
     */
    async deleteCalendarTaskAttachment(requestParameters, initOverrides) {
        const response = await this.deleteCalendarTaskAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCustomerManagementServiceCache</p>
     * Operation to clear the cache for the customer management service
     */
    async deleteCustomerManagementServiceCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/customerManagement/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCustomerManagementServiceCache</p>
     * Operation to clear the cache for the customer management service
     */
    async deleteCustomerManagementServiceCache(requestParameters, initOverrides) {
        const response = await this.deleteCustomerManagementServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Delete a Track It Item for a property. <p><strong>OperationId:</strong>deleteTrackItItems</p>
     * Deletes track it items
     */
    async deleteTrackItItemsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.trackItId) {
            queryParameters['trackItId'] = requestParameters.trackItId;
        }
        if (requestParameters.trackItIdContext) {
            queryParameters['trackItIdContext'] = requestParameters.trackItIdContext;
        }
        if (requestParameters.trackItIdType) {
            queryParameters['trackItIdType'] = requestParameters.trackItIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Delete a Track It Item for a property. <p><strong>OperationId:</strong>deleteTrackItItems</p>
     * Deletes track it items
     */
    async deleteTrackItItems(requestParameters, initOverrides) {
        const response = await this.deleteTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * With this API you can get a Calendar Task. <p><strong>OperationId:</strong>getCalendarTask</p>
     * Get a Calendar Task
     */
    async getCalendarTaskRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CalendarTaskFromJSON)(jsonValue));
    }
    /**
     * With this API you can get a Calendar Task. <p><strong>OperationId:</strong>getCalendarTask</p>
     * Get a Calendar Task
     */
    async getCalendarTask(requestParameters, initOverrides) {
        const response = await this.getCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve the attachments on a Calendar task. <p><strong>OperationId:</strong>getCalendarTaskAttachments</p>
     * Get calendar task attachments
     */
    async getCalendarTaskAttachmentsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/activities/tasks/{taskId}/attachments`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CalendarTaskAttachmentsFromJSON)(jsonValue));
    }
    /**
     * Retrieve the attachments on a Calendar task. <p><strong>OperationId:</strong>getCalendarTaskAttachments</p>
     * Get calendar task attachments
     */
    async getCalendarTaskAttachments(requestParameters, initOverrides) {
        const response = await this.getCalendarTaskAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * You can fetch a list of Calendar Tasks for with this API, for one or more properties. <p><strong>OperationId:</strong>getCalendarTasks</p>
     * Get Calendar Tasks
     */
    async getCalendarTasksRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.countSummary !== undefined) {
            queryParameters['countSummary'] = requestParameters.countSummary;
        }
        if (requestParameters.taskSummary !== undefined) {
            queryParameters['taskSummary'] = requestParameters.taskSummary;
        }
        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.completionStatus !== undefined) {
            queryParameters['completionStatus'] = requestParameters.completionStatus;
        }
        if (requestParameters.priorityCodes) {
            queryParameters['priorityCodes'] = requestParameters.priorityCodes;
        }
        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }
        if (requestParameters.typeCodes) {
            queryParameters['typeCodes'] = requestParameters.typeCodes;
        }
        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }
        if (requestParameters.taskOwner !== undefined) {
            queryParameters['taskOwner'] = requestParameters.taskOwner;
        }
        if (requestParameters.author !== undefined) {
            queryParameters['author'] = requestParameters.author;
        }
        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }
        if (requestParameters.accountIdContext !== undefined) {
            queryParameters['accountIdContext'] = requestParameters.accountIdContext;
        }
        if (requestParameters.accountIdType !== undefined) {
            queryParameters['accountIdType'] = requestParameters.accountIdType;
        }
        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }
        if (requestParameters.contactIdContext !== undefined) {
            queryParameters['contactIdContext'] = requestParameters.contactIdContext;
        }
        if (requestParameters.contactIdType !== undefined) {
            queryParameters['contactIdType'] = requestParameters.contactIdType;
        }
        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }
        if (requestParameters.blockIdContext !== undefined) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }
        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/activities/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CalendarTasksFromJSON)(jsonValue));
    }
    /**
     * You can fetch a list of Calendar Tasks for with this API, for one or more properties. <p><strong>OperationId:</strong>getCalendarTasks</p>
     * Get Calendar Tasks
     */
    async getCalendarTasks(requestParameters, initOverrides) {
        const response = await this.getCalendarTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a list of all Track It Items for a property. <p><strong>OperationId:</strong>getTrackItItems</p>
     * Fetches track it items
     */
    async getTrackItItemsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.ticketId !== undefined) {
            queryParameters['ticketId'] = requestParameters.ticketId;
        }
        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }
        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }
        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }
        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }
        if (requestParameters.trackItGroups) {
            queryParameters['trackItGroups'] = requestParameters.trackItGroups;
        }
        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }
        if (requestParameters.locations) {
            queryParameters['locations'] = requestParameters.locations;
        }
        if (requestParameters.actions) {
            queryParameters['actions'] = requestParameters.actions;
        }
        if (requestParameters.actionStatuses) {
            queryParameters['actionStatuses'] = requestParameters.actionStatuses;
        }
        if (requestParameters.appUserId !== undefined) {
            queryParameters['appUserId'] = requestParameters.appUserId;
        }
        if (requestParameters.appUserIdContext !== undefined) {
            queryParameters['appUserIdContext'] = requestParameters.appUserIdContext;
        }
        if (requestParameters.appUserIdType !== undefined) {
            queryParameters['appUserIdType'] = requestParameters.appUserIdType;
        }
        if (requestParameters.assignedStatuses) {
            queryParameters['assignedStatuses'] = requestParameters.assignedStatuses;
        }
        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }
        if (requestParameters.followUpDate !== undefined) {
            queryParameters['followUpDate'] = requestParameters.followUpDate.toISOString().substr(0, 10);
        }
        if (requestParameters.createdOn !== undefined) {
            queryParameters['createdOn'] = requestParameters.createdOn.toISOString().substr(0, 10);
        }
        if (requestParameters.createdByUserId !== undefined) {
            queryParameters['createdByUserId'] = requestParameters.createdByUserId;
        }
        if (requestParameters.createdByUserIdContext !== undefined) {
            queryParameters['createdByUserIdContext'] = requestParameters.createdByUserIdContext;
        }
        if (requestParameters.createdByUserIdType !== undefined) {
            queryParameters['createdByUserIdType'] = requestParameters.createdByUserIdType;
        }
        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackItItemsFromJSON)(jsonValue));
    }
    /**
     * Retrieve a list of all Track It Items for a property. <p><strong>OperationId:</strong>getTrackItItems</p>
     * Fetches track it items
     */
    async getTrackItItems(requestParameters, initOverrides) {
        const response = await this.getTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *  <p><strong>OperationId:</strong>pingCustomerManagementService</p>
     * Operation to ping the customer management service
     */
    async pingCustomerManagementServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/customerManagement/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     *  <p><strong>OperationId:</strong>pingCustomerManagementService</p>
     * Operation to ping the customer management service
     */
    async pingCustomerManagementService(requestParameters, initOverrides) {
        const response = await this.pingCustomerManagementServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow you to create a new Calendar Task. <p><strong>OperationId:</strong>postCalendarTask</p>
     * Create Calendar Task
     */
    async postCalendarTaskRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/activities/task`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCalendarTaskRequestToJSON)(requestParameters.calendarTask),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to create a new Calendar Task. <p><strong>OperationId:</strong>postCalendarTask</p>
     * Create Calendar Task
     */
    async postCalendarTask(requestParameters, initOverrides) {
        const response = await this.postCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create a new Track It Item. Track It manages storage and delivery of guest luggage, parcels, vehicles (valet), and lost items.  They can optionally be linked to a reservation if related or an arrival, in-house or departure reservation. <p><strong>OperationId:</strong>postTrackItItems</p>
     * Creates track it items
     */
    async postTrackItItemsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTrackItItemsRequestToJSON)(requestParameters.trackItItems),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Create a new Track It Item. Track It manages storage and delivery of guest luggage, parcels, vehicles (valet), and lost items.  They can optionally be linked to a reservation if related or an arrival, in-house or departure reservation. <p><strong>OperationId:</strong>postTrackItItems</p>
     * Creates track it items
     */
    async postTrackItItems(requestParameters, initOverrides) {
        const response = await this.postTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will allow you to update an existing Calendar Task. <p><strong>OperationId:</strong>putCalendarTask</p>
     * Update Calendar Task
     */
    async putCalendarTaskRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostCalendarTaskRequestToJSON)(requestParameters.calendarTask),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CalendarTaskFromJSON)(jsonValue));
    }
    /**
     * This API will allow you to update an existing Calendar Task. <p><strong>OperationId:</strong>putCalendarTask</p>
     * Update Calendar Task
     */
    async putCalendarTask(requestParameters, initOverrides) {
        const response = await this.putCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update the details of a Track It Item for a property. <p><strong>OperationId:</strong>putTrackItItems</p>
     * Updates track it items
     */
    async putTrackItItemsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutTrackItItemsRequestToJSON)(requestParameters.trackItItems),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackItItemsFromJSON)(jsonValue));
    }
    /**
     * Update the details of a Track It Item for a property. <p><strong>OperationId:</strong>putTrackItItems</p>
     * Updates track it items
     */
    async putTrackItItems(requestParameters, initOverrides) {
        const response = await this.putTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.CustomerManagementApi = CustomerManagementApi;
/**
 * @export
 */
exports.GetCalendarTasksCompletionStatusEnum = {
    All: 'All',
    Completed: 'Completed',
    Outstanding: 'Outstanding'
};
/**
 * @export
 */
exports.GetCalendarTasksClassCodesEnum = {
    Correspondence: 'Correspondence',
    Meeting: 'Meeting',
    Todolist: 'Todolist',
    Call: 'Call',
    Appointment: 'Appointment'
};
/**
 * @export
 */
exports.GetTrackItItemsTrackItGroupsEnum = {
    Parcel: 'Parcel',
    Valet: 'Valet',
    Baggage: 'Baggage',
    Lost: 'Lost'
};
/**
 * @export
 */
exports.GetTrackItItemsActionStatusesEnum = {
    Open: 'Open',
    Closed: 'Closed'
};
/**
 * @export
 */
exports.GetTrackItItemsAssignedStatusesEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
};
