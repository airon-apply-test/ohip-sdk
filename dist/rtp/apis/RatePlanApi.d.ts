/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { GetBestAvailableRatesDetails, NegotiatedRates, NegotiatedRatesDetails, PackagesInfo, PostBestAvailableRatesRequest, PostNegotiatedRatesRequest, RatePlanInfo, RatePlanSchedulesInfo, RatePlansSummary, Status } from '../models';
export interface DeleteBestAvailableRatesRequest {
    hotelId?: string;
    code?: Array<string>;
    end?: Date;
    start?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    lOS1?: boolean;
    lOS2?: boolean;
    lOS3?: boolean;
    lOS4?: boolean;
    lOS5?: boolean;
    lOS6?: boolean;
    lOS7?: boolean;
    lOS8?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRatePlanSchedulesRequest {
    ratePlanCode?: string;
    hotelId?: string;
    ratePlanScheduleIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBestAvailableRatesRequest {
    hotelId?: string;
    startDay?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    rateCode?: Array<string>;
    endDay?: Date;
    daysOfWeek?: Set<GetBestAvailableRatesDaysOfWeekEnum>;
    lengthOfStay?: Set<GetBestAvailableRatesLengthOfStayEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetNegotiatedRatesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetNegotiatedRatesForGivenHotelAndRateRequest {
    rateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetNegotiatedRatesForGivenProfileRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPackagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    hotelId?: Array<string>;
    packageCode?: Array<string>;
    descriptionWildCard?: string;
    startDate?: Date;
    endDate?: Date;
    adults?: number;
    children?: number;
    includeGroup?: boolean;
    sellSeparate?: boolean;
    ticketPostingRhythm?: boolean;
    fetchInstructions?: Set<GetPackagesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRatePlanRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    fetchInstructions?: Set<GetRatePlanFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRatePlanSchedulesRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeRatePlanPackage?: boolean;
    limit?: number;
    tierId?: number;
    ratePlanScheduleId?: string;
    ratePlanScheduleIdType?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRatePlansRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeRateInformation?: boolean;
    limit?: number;
    offset?: number;
    ratePlanCode?: Array<string>;
    rateCategory?: Array<string>;
    sellDate?: Date;
    displaySet?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetRatePlansOrderTypeEnum>;
    includeInactive?: boolean;
    dayUseOnly?: boolean;
    approvalStatus?: GetRatePlansApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBestAvailableRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createBestAvailableRates?: PostBestAvailableRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostNegotiatedRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates?: PostNegotiatedRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutNegotiatedRatesRequest {
    rateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates?: PostNegotiatedRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class RatePlanApi extends runtime.BaseAPI {
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    deleteBestAvailableRatesRaw(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    deleteBestAvailableRates(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    deleteRatePlanSchedulesRaw(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    deleteRatePlanSchedules(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    getBestAvailableRatesRaw(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBestAvailableRatesDetails>>;
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    getBestAvailableRates(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBestAvailableRatesDetails>;
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    getNegotiatedRatesRaw(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>>;
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    getNegotiatedRates(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates>;
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>>;
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    getNegotiatedRatesForGivenHotelAndRate(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates>;
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    getNegotiatedRatesForGivenProfileRaw(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>>;
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    getNegotiatedRatesForGivenProfile(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates>;
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    getPackagesRaw(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesInfo>>;
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    getPackages(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesInfo>;
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    getRatePlanRaw(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanInfo>>;
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    getRatePlan(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanInfo>;
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    getRatePlanSchedulesRaw(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanSchedulesInfo>>;
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    getRatePlanSchedules(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanSchedulesInfo>;
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    getRatePlansRaw(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlansSummary>>;
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    getRatePlans(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlansSummary>;
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    postBestAvailableRatesRaw(requestParameters: PostBestAvailableRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    postBestAvailableRates(requestParameters: PostBestAvailableRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    postNegotiatedRatesRaw(requestParameters: PostNegotiatedRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    postNegotiatedRates(requestParameters: PostNegotiatedRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    putNegotiatedRatesRaw(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRatesDetails>>;
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    putNegotiatedRates(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRatesDetails>;
}
/**
 * @export
 */
export declare const GetBestAvailableRatesDaysOfWeekEnum: {
    readonly Monday: "Monday";
    readonly Tuesday: "Tuesday";
    readonly Wednesday: "Wednesday";
    readonly Thursday: "Thursday";
    readonly Friday: "Friday";
    readonly Saturday: "Saturday";
    readonly Sunday: "Sunday";
};
export type GetBestAvailableRatesDaysOfWeekEnum = typeof GetBestAvailableRatesDaysOfWeekEnum[keyof typeof GetBestAvailableRatesDaysOfWeekEnum];
/**
 * @export
 */
export declare const GetBestAvailableRatesLengthOfStayEnum: {
    readonly One: "One";
    readonly Two: "Two";
    readonly Three: "Three";
    readonly Four: "Four";
    readonly Five: "Five";
    readonly Six: "Six";
    readonly Seven: "Seven";
    readonly Eight: "Eight";
};
export type GetBestAvailableRatesLengthOfStayEnum = typeof GetBestAvailableRatesLengthOfStayEnum[keyof typeof GetBestAvailableRatesLengthOfStayEnum];
/**
 * @export
 */
export declare const GetNegotiatedRatesFetchInstructionsEnum: {
    readonly Discounts: "Discounts";
};
export type GetNegotiatedRatesFetchInstructionsEnum = typeof GetNegotiatedRatesFetchInstructionsEnum[keyof typeof GetNegotiatedRatesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum: {
    readonly Discounts: "Discounts";
};
export type GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetNegotiatedRatesForGivenProfileFetchInstructionsEnum: {
    readonly Discounts: "Discounts";
};
export type GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetPackagesFetchInstructionsEnum: {
    readonly Header: "Header";
    readonly PostingRules: "PostingRules";
    readonly CalculatedPrice: "CalculatedPrice";
    readonly Items: "Items";
    readonly Details: "Details";
    readonly UsageDetails: "UsageDetails";
};
export type GetPackagesFetchInstructionsEnum = typeof GetPackagesFetchInstructionsEnum[keyof typeof GetPackagesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetRatePlanFetchInstructionsEnum: {
    readonly PrimaryDetails: "PrimaryDetails";
    readonly TransactionDetails: "TransactionDetails";
    readonly Packages: "Packages";
    readonly RateCommission: "RateCommission";
    readonly NegotiatedProfiles: "NegotiatedProfiles";
    readonly RateControls: "RateControls";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly AccessExclusions: "AccessExclusions";
    readonly ApprovalNotes: "ApprovalNotes";
};
export type GetRatePlanFetchInstructionsEnum = typeof GetRatePlanFetchInstructionsEnum[keyof typeof GetRatePlanFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetRatePlansOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetRatePlansOrderTypeEnum = typeof GetRatePlansOrderTypeEnum[keyof typeof GetRatePlansOrderTypeEnum];
/**
 * @export
 */
export declare const GetRatePlansApprovalStatusEnum: {
    readonly NewUnapproved: "NewUnapproved";
    readonly ChangedUnapproved: "ChangedUnapproved";
    readonly Rejected: "Rejected";
    readonly Approved: "Approved";
};
export type GetRatePlansApprovalStatusEnum = typeof GetRatePlansApprovalStatusEnum[keyof typeof GetRatePlansApprovalStatusEnum];
