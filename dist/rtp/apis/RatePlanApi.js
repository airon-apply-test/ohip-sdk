"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 21.5.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRatePlansApprovalStatusEnum = exports.GetRatePlansOrderTypeEnum = exports.GetRatePlanFetchInstructionsEnum = exports.GetPackagesFetchInstructionsEnum = exports.GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = exports.GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = exports.GetNegotiatedRatesFetchInstructionsEnum = exports.GetBestAvailableRatesLengthOfStayEnum = exports.GetBestAvailableRatesDaysOfWeekEnum = exports.RatePlanApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class RatePlanApi extends runtime.BaseAPI {
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }
        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end.toISOString().substr(0, 10);
        }
        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start.toISOString().substr(0, 10);
        }
        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }
        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }
        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }
        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }
        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }
        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }
        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }
        if (requestParameters.lOS1 !== undefined) {
            queryParameters['lOS1'] = requestParameters.lOS1;
        }
        if (requestParameters.lOS2 !== undefined) {
            queryParameters['lOS2'] = requestParameters.lOS2;
        }
        if (requestParameters.lOS3 !== undefined) {
            queryParameters['lOS3'] = requestParameters.lOS3;
        }
        if (requestParameters.lOS4 !== undefined) {
            queryParameters['lOS4'] = requestParameters.lOS4;
        }
        if (requestParameters.lOS5 !== undefined) {
            queryParameters['lOS5'] = requestParameters.lOS5;
        }
        if (requestParameters.lOS6 !== undefined) {
            queryParameters['lOS6'] = requestParameters.lOS6;
        }
        if (requestParameters.lOS7 !== undefined) {
            queryParameters['lOS7'] = requestParameters.lOS7;
        }
        if (requestParameters.lOS8 !== undefined) {
            queryParameters['lOS8'] = requestParameters.lOS8;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRates(requestParameters, initOverrides) {
        const response = await this.deleteBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.ratePlanScheduleIds) {
            queryParameters['ratePlanScheduleIds'] = requestParameters.ratePlanScheduleIds;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedules(requestParameters, initOverrides) {
        const response = await this.deleteRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.startDay !== undefined) {
            queryParameters['startDay'] = requestParameters.startDay.toISOString().substr(0, 10);
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.rateCode) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }
        if (requestParameters.endDay !== undefined) {
            queryParameters['endDay'] = requestParameters.endDay.toISOString().substr(0, 10);
        }
        if (requestParameters.daysOfWeek) {
            queryParameters['daysOfWeek'] = requestParameters.daysOfWeek;
        }
        if (requestParameters.lengthOfStay) {
            queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetBestAvailableRatesDetailsFromJSON)(jsonValue));
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRates(requestParameters, initOverrides) {
        const response = await this.getBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    async getNegotiatedRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }
        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NegotiatedRatesFromJSON)(jsonValue));
    }
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    async getNegotiatedRates(requestParameters, initOverrides) {
        const response = await this.getNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }
        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}/profiles`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NegotiatedRatesFromJSON)(jsonValue));
    }
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRate(requestParameters, initOverrides) {
        const response = await this.getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }
        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/profiles/{profileId}/negotiatedRates`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NegotiatedRatesFromJSON)(jsonValue));
    }
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfile(requestParameters, initOverrides) {
        const response = await this.getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackagesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }
        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }
        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }
        if (requestParameters.includeGroup !== undefined) {
            queryParameters['includeGroup'] = requestParameters.includeGroup;
        }
        if (requestParameters.sellSeparate !== undefined) {
            queryParameters['sellSeparate'] = requestParameters.sellSeparate;
        }
        if (requestParameters.ticketPostingRhythm !== undefined) {
            queryParameters['ticketPostingRhythm'] = requestParameters.ticketPostingRhythm;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PackagesInfoFromJSON)(jsonValue));
    }
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackages(requestParameters, initOverrides) {
        const response = await this.getPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlanRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }
        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RatePlanInfoFromJSON)(jsonValue));
    }
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlan(requestParameters, initOverrides) {
        const response = await this.getRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedulesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.excludeRatePlanPackage !== undefined) {
            queryParameters['excludeRatePlanPackage'] = requestParameters.excludeRatePlanPackage;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.tierId !== undefined) {
            queryParameters['tierId'] = requestParameters.tierId;
        }
        if (requestParameters.ratePlanScheduleId !== undefined) {
            queryParameters['ratePlanScheduleId'] = requestParameters.ratePlanScheduleId;
        }
        if (requestParameters.ratePlanScheduleIdType !== undefined) {
            queryParameters['ratePlanScheduleIdType'] = requestParameters.ratePlanScheduleIdType;
        }
        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
        }
        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
        }
        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }
        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }
        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RatePlanSchedulesInfoFromJSON)(jsonValue));
    }
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedules(requestParameters, initOverrides) {
        const response = await this.getRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlansRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }
        if (requestParameters.includeRateInformation !== undefined) {
            queryParameters['includeRateInformation'] = requestParameters.includeRateInformation;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }
        if (requestParameters.rateCategory) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }
        if (requestParameters.sellDate !== undefined) {
            queryParameters['sellDate'] = requestParameters.sellDate.toISOString().substr(0, 10);
        }
        if (requestParameters.displaySet !== undefined) {
            queryParameters['displaySet'] = requestParameters.displaySet;
        }
        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }
        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }
        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }
        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }
        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }
        if (requestParameters.dayUseOnly !== undefined) {
            queryParameters['dayUseOnly'] = requestParameters.dayUseOnly;
        }
        if (requestParameters.approvalStatus !== undefined) {
            queryParameters['approvalStatus'] = requestParameters.approvalStatus;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/ratePlans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RatePlansSummaryFromJSON)(jsonValue));
    }
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlans(requestParameters, initOverrides) {
        const response = await this.getRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostBestAvailableRatesRequestToJSON)(requestParameters.createBestAvailableRates),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRates(requestParameters, initOverrides) {
        const response = await this.postBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    async postNegotiatedRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostNegotiatedRatesRequestToJSON)(requestParameters.negotiatedRates),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    async postNegotiatedRates(requestParameters, initOverrides) {
        const response = await this.postNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    async putNegotiatedRatesRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostNegotiatedRatesRequestToJSON)(requestParameters.negotiatedRates),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NegotiatedRatesDetailsFromJSON)(jsonValue));
    }
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    async putNegotiatedRates(requestParameters, initOverrides) {
        const response = await this.putNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.RatePlanApi = RatePlanApi;
/**
 * @export
 */
exports.GetBestAvailableRatesDaysOfWeekEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
};
/**
 * @export
 */
exports.GetBestAvailableRatesLengthOfStayEnum = {
    One: 'One',
    Two: 'Two',
    Three: 'Three',
    Four: 'Four',
    Five: 'Five',
    Six: 'Six',
    Seven: 'Seven',
    Eight: 'Eight'
};
/**
 * @export
 */
exports.GetNegotiatedRatesFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetPackagesFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
};
/**
 * @export
 */
exports.GetRatePlanFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
};
/**
 * @export
 */
exports.GetRatePlansOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetRatePlansApprovalStatusEnum = {
    NewUnapproved: 'NewUnapproved',
    ChangedUnapproved: 'ChangedUnapproved',
    Rejected: 'Rejected',
    Approved: 'Approved'
};
