"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 22.3.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeisureManagementApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class LeisureManagementApi extends runtime.BaseAPI {
    /**
     * This API will send a response to Cancellation of an Activity Booking. <p><strong>OperationId:</strong>deleteActivityBooking</p>
     * Send a response to Cancellation of an Activity Booking
     */
    async deleteActivityBookingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.activityId !== undefined) {
            queryParameters['activityId'] = requestParameters.activityId;
        }
        if (requestParameters.activityIdType !== undefined) {
            queryParameters['activityIdType'] = requestParameters.activityIdType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will send a response to Cancellation of an Activity Booking. <p><strong>OperationId:</strong>deleteActivityBooking</p>
     * Send a response to Cancellation of an Activity Booking
     */
    async deleteActivityBooking(requestParameters, initOverrides) {
        const response = await this.deleteActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Operation to clear cache <p><strong>OperationId:</strong>deleteLeisureManagementServiceCache</p>
     * Clear Cache for the Leisure Management Service
     */
    async deleteLeisureManagementServiceCacheRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/leisureManagement/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * Operation to clear cache <p><strong>OperationId:</strong>deleteLeisureManagementServiceCache</p>
     * Clear Cache for the Leisure Management Service
     */
    async deleteLeisureManagementServiceCache(requestParameters, initOverrides) {
        const response = await this.deleteLeisureManagementServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will send a response to Look-up of Activity Bookings. <p><strong>OperationId:</strong>getActivityBookings</p>
     * Send a response to Look-up of Activity Bookings
     */
    async getActivityBookingsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }
        if (requestParameters.profileIdContext) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }
        if (requestParameters.profileIdsType) {
            queryParameters['profileIdsType'] = requestParameters.profileIdsType;
        }
        if (requestParameters.reservationIds) {
            queryParameters['reservationIds'] = requestParameters.reservationIds;
        }
        if (requestParameters.reservationIdContext) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }
        if (requestParameters.reservationIdsType) {
            queryParameters['reservationIdsType'] = requestParameters.reservationIdsType;
        }
        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }
        if (requestParameters.activityIdContext) {
            queryParameters['activityIdContext'] = requestParameters.activityIdContext;
        }
        if (requestParameters.activityIdsType) {
            queryParameters['activityIdsType'] = requestParameters.activityIdsType;
        }
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/activityBookings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityBookingsDetailsFromJSON)(jsonValue));
    }
    /**
     * This API will send a response to Look-up of Activity Bookings. <p><strong>OperationId:</strong>getActivityBookings</p>
     * Send a response to Look-up of Activity Bookings
     */
    async getActivityBookings(requestParameters, initOverrides) {
        const response = await this.getActivityBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Service ping the Leisure Management Service. <p><strong>OperationId:</strong>pingLeisureManagementService</p>
     * Ping the Leisure Management Service
     */
    async pingLeisureManagementServiceRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/services/leisureManagement/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OperaVersionFromJSON)(jsonValue));
    }
    /**
     * Service ping the Leisure Management Service. <p><strong>OperationId:</strong>pingLeisureManagementService</p>
     * Ping the Leisure Management Service
     */
    async pingLeisureManagementService(requestParameters, initOverrides) {
        const response = await this.pingLeisureManagementServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will send a response to Creation of Activity Booking. <p><strong>OperationId:</strong>postActivityBooking</p>
     * Send a response to Creation of Activity Booking
     */
    async postActivityBookingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostActivityBookingRequestToJSON)(requestParameters.createActivityBooking),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will send a response to Creation of Activity Booking. <p><strong>OperationId:</strong>postActivityBooking</p>
     * Send a response to Creation of Activity Booking
     */
    async postActivityBooking(requestParameters, initOverrides) {
        const response = await this.postActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will send a response to a Location Notification. <p><strong>OperationId:</strong>postLocationNotification</p>
     * Send a response to Location Notification
     */
    async postLocationNotificationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/locationNotifications`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PostLocationNotificationRequestToJSON)(requestParameters.locationNotificationToBeCreated),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
    }
    /**
     * This API will send a response to a Location Notification. <p><strong>OperationId:</strong>postLocationNotification</p>
     * Send a response to Location Notification
     */
    async postLocationNotification(requestParameters, initOverrides) {
        const response = await this.postLocationNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * This API will send a response to a  Change in Activity Booking request from external Activity Scheduler system. <p><strong>OperationId:</strong>putActivityBooking</p>
     * Send a response to Change in Activity Booking
     */
    async putActivityBookingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }
        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }
        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }
        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }
        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }
        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.PutActivityBookingRequestToJSON)(requestParameters.changeActivityBooking),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityBookingModifiedFromJSON)(jsonValue));
    }
    /**
     * This API will send a response to a  Change in Activity Booking request from external Activity Scheduler system. <p><strong>OperationId:</strong>putActivityBooking</p>
     * Send a response to Change in Activity Booking
     */
    async putActivityBooking(requestParameters, initOverrides) {
        const response = await this.putActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.LeisureManagementApi = LeisureManagementApi;
